var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var operations_exports = {};
__export(operations_exports, {
  any: () => any,
  array: () => array,
  boolean: () => boolean,
  both: () => both,
  contramap: () => contramap,
  date: () => date,
  makeEqual: () => makeEqual,
  never: () => never,
  number: () => number,
  orElseEither: () => orElseEither,
  strict: () => strict,
  string: () => string,
  struct: () => struct,
  symbol: () => symbol,
  tuple: () => tuple
});
function makeEqual(f) {
  return {
    equals: f
  };
}
const any = /* @__PURE__ */ makeEqual(() => true);
const never = /* @__PURE__ */ makeEqual(() => false);
function both(fb) {
  return (fa) => makeEqual(({
    tuple: [x0, x1]
  }, {
    tuple: [y0, y1]
  }) => fa.equals(x0, y0) && fb.equals(x1, y1));
}
function orElseEither(fb) {
  return (fa) => makeEqual((ex, ey) => ex._tag === "Left" && ey._tag === "Left" ? fa.equals(ex.left, ey.left) : ex._tag === "Right" && ey._tag === "Right" ? fb().equals(ex.right, ey.right) : false);
}
function contramap(f) {
  return (fa) => makeEqual((x, y) => fa.equals(f(x), f(y)));
}
function strict() {
  return makeEqual((x, y) => x === y);
}
const number = /* @__PURE__ */ strict();
const string = /* @__PURE__ */ strict();
const symbol = /* @__PURE__ */ strict();
const boolean = /* @__PURE__ */ strict();
const date = /* @__PURE__ */ contramap((date2) => date2.valueOf())(number);
function array(EqA) {
  return {
    equals: (x, y) => {
      if (x.length === y.length) {
        for (let i = 0; i < x.length; i++) {
          if (!EqA.equals(x[i], y[i])) {
            return false;
          }
        }
        return true;
      }
      return false;
    }
  };
}
function tuple(...eqs) {
  return makeEqual((x, y) => eqs.every((E, i) => E.equals(x.get(i), y.get(i))));
}
function struct(eqs) {
  return makeEqual((x, y) => {
    for (const k in eqs) {
      if (!eqs[k].equals(x[k], y[k])) {
        return false;
      }
    }
    return true;
  });
}
module.exports = __toCommonJS(operations_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  any,
  array,
  boolean,
  both,
  contramap,
  date,
  makeEqual,
  never,
  number,
  orElseEither,
  strict,
  string,
  struct,
  symbol,
  tuple
});
