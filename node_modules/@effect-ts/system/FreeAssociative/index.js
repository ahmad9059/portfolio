var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var FreeAssociative_exports = {};
__export(FreeAssociative_exports, {
  IConcat: () => IConcat,
  IElement: () => IElement,
  IEmpty: () => IEmpty,
  append: () => append,
  append_: () => append_,
  concat: () => concat,
  concat_: () => concat_,
  init: () => init,
  isFreeAssociative: () => isFreeAssociative,
  of: () => of,
  prepend: () => prepend,
  prepend_: () => prepend_,
  toArray: () => toArray
});
var import_Operator = require("../Operator/index.js");
var import_Stack = require("../Stack/index.js");
var St = __toESM(require("../Structural/index.js"));
var _a, _b, _c;
const _brand = /* @__PURE__ */ Symbol();
function isFreeAssociative(self) {
  return typeof self === "object" && self != null && _brand in self;
}
class IEmpty {
  constructor() {
    this._tag = "Empty";
    this[_a] = _brand;
  }
  get [(_a = _brand, St.hashSym)]() {
    return St.hash(toArray(this));
  }
  [St.equalsSym](that) {
    return isFreeAssociative(that) && St.equals(toArray(this), toArray(that));
  }
}
class IElement {
  constructor(element) {
    this.element = element;
    this._tag = "Element";
    this[_b] = _brand;
  }
  get [(_b = _brand, St.hashSym)]() {
    return St.hash(toArray(this));
  }
  [St.equalsSym](that) {
    return isFreeAssociative(that) && St.equals(toArray(this), toArray(that));
  }
}
class IConcat {
  constructor(left, right) {
    this.left = left;
    this.right = right;
    this._tag = "Concat";
    this[_c] = _brand;
  }
}
_c = _brand;
function init() {
  return new IEmpty();
}
function of(a) {
  return new IElement(a);
}
function concat(r) {
  return (l) => new IConcat(l, r);
}
function concat_(l, r) {
  return new IConcat(l, r);
}
function append(a) {
  return (_) => new IConcat(_, new IElement(a));
}
function append_(_, a) {
  return new IConcat(_, new IElement(a));
}
function prepend(a) {
  return (_) => new IConcat(new IElement(a), _);
}
function prepend_(_, a) {
  return new IConcat(new IElement(a), _);
}
function toArray(_) {
  const as = [];
  let current = _;
  let stack = void 0;
  while (typeof current !== "undefined") {
    switch (current._tag) {
      case "Empty": {
        current = void 0;
        break;
      }
      case "Element": {
        as.push(current.element);
        current = void 0;
        break;
      }
      case "Concat": {
        const p = stack;
        stack = new import_Stack.Stack(current.right, p);
        current = current.left;
        break;
      }
    }
    if (typeof current === "undefined") {
      if (typeof stack !== "undefined") {
        current = stack.value;
        stack = stack.previous;
      }
    }
  }
  return as;
}
module.exports = __toCommonJS(FreeAssociative_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IConcat,
  IElement,
  IEmpty,
  append,
  append_,
  concat,
  concat_,
  init,
  isFreeAssociative,
  of,
  prepend,
  prepend_,
  toArray
});
