var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Supervisor_exports = {};
__export(Supervisor_exports, {
  Continue: () => Continue,
  Stop: () => Stop,
  Supervisor: () => Supervisor,
  _continue: () => _continue,
  _stop: () => _stop,
  fibersIn: () => fibersIn,
  mainFibers: () => mainFibers,
  none: () => none,
  propagationAnd: () => propagationAnd,
  propagationOr: () => propagationOr,
  track: () => track,
  trackMainFibers: () => trackMainFibers
});
var import_Operator = require("../Operator/index.js");
var SS = __toESM(require("../Collections/Immutable/SortedSet/index.js"));
var import_core = require("../Effect/core.js");
var import_zip = require("../Effect/zip.js");
var import_runtimeOrd = require("../Fiber/runtimeOrd.js");
var import_AtomicReference = require("../Support/AtomicReference/index.js");
class Supervisor {
  constructor(value, unsafeOnStart, unsafeOnEnd) {
    this.value = value;
    this.unsafeOnStart = unsafeOnStart;
    this.unsafeOnEnd = unsafeOnEnd;
  }
  and(that) {
    return new Supervisor((0, import_zip.zip_)(this.value, that.value), (environment, effect, parent, fiber) => propagationAnd(this.unsafeOnStart(environment, effect, parent, fiber), that.unsafeOnStart(environment, effect, parent, fiber)), (value, fiber) => propagationAnd(this.unsafeOnEnd(value, fiber), that.unsafeOnEnd(value, fiber)));
  }
  or(that) {
    return new Supervisor((0, import_zip.zip_)(this.value, that.value), (environment, effect, parent, fiber) => propagationOr(this.unsafeOnStart(environment, effect, parent, fiber), that.unsafeOnStart(environment, effect, parent, fiber)), (value, fiber) => propagationOr(this.unsafeOnEnd(value, fiber), that.unsafeOnEnd(value, fiber)));
  }
}
class Stop {
  constructor() {
    this._tag = "Stop";
  }
}
class Continue {
  constructor() {
    this._tag = "Continue";
  }
}
const propagationAnd = (self, that) => self._tag === "Continue" && that._tag === "Continue" ? _continue : _stop;
const propagationOr = (self, that) => self._tag === "Continue" || that._tag === "Continue" ? _continue : _stop;
const _stop = /* @__PURE__ */ new Stop();
const _continue = /* @__PURE__ */ new Continue();
const mainFibers = /* @__PURE__ */ new Set();
function unsafeTrackMain() {
  const interval = new import_AtomicReference.AtomicReference(void 0);
  return new Supervisor((0, import_core.succeedWith)(() => mainFibers), (_, __, ___, fiber) => {
    if (mainFibers.has(fiber)) {
      if (typeof interval.get === "undefined") {
        interval.set(setInterval(() => {
        }, 6e4));
      }
    }
    return _continue;
  }, (_, fiber) => {
    mainFibers.delete(fiber);
    if (mainFibers.size === 0) {
      const ci = interval.get;
      if (ci) {
        clearInterval(ci);
      }
    }
    return _continue;
  });
}
const trackMainFibers = /* @__PURE__ */ unsafeTrackMain();
const track = /* @__PURE__ */ (0, import_core.suspend)(() => fibersIn(new import_AtomicReference.AtomicReference(SS.make((0, import_runtimeOrd.runtimeOrd)()))));
function fibersIn(ref) {
  return (0, import_core.succeedWith)(() => new Supervisor((0, import_core.succeedWith)(() => ref.get), (_, __, ___, fiber) => {
    ref.set(SS.add_(ref.get, fiber));
    return _continue;
  }, (_, fiber) => {
    ref.set(SS.remove_(ref.get, fiber));
    return _continue;
  }));
}
const none = /* @__PURE__ */ new Supervisor(import_core.unit, () => _continue, () => _continue);
module.exports = __toCommonJS(Supervisor_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Continue,
  Stop,
  Supervisor,
  _continue,
  _stop,
  fibersIn,
  mainFibers,
  none,
  propagationAnd,
  propagationOr,
  track,
  trackMainFibers
});
