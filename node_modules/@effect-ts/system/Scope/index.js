var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Scope_exports = {};
__export(Scope_exports, {
  Global: () => Global,
  Key: () => Key,
  Local: () => Local,
  Open: () => Open,
  OrderedFinalizer: () => OrderedFinalizer,
  globalScope: () => globalScope,
  makeScope: () => makeScope,
  unsafeMakeScope: () => unsafeMakeScope
});
var import_Operator = require("../Operator/index.js");
var import_cause = require("../Cause/cause.js");
var A = __toESM(require("../Collections/Immutable/Array/index.js"));
var import_cause2 = require("../Effect/cause.js");
var import_core = require("../Effect/core.js");
var import_map = require("../Effect/map.js");
var import_uncause = require("../Effect/uncause.js");
var import_zipWith = require("../Effect/zipWith.js");
var E = __toESM(require("../Either/index.js"));
var import_AtomicNumber = require("../Support/AtomicNumber/index.js");
var import_AtomicReference = require("../Support/AtomicReference/index.js");
class Key {
  constructor(remove) {
    this.remove = (0, import_core.succeed)(false);
    if (remove) {
      this.remove = remove;
    }
  }
  setRemove(remove) {
    this.remove = remove;
  }
}
class Global {
  constructor() {
    this._tag = "Global";
    this.unsafeEnsureResult = E.right(new Key((0, import_core.succeedWith)(() => true)));
    this.ensureResult = (0, import_core.succeedWith)(() => this.unsafeEnsureResult);
    this.deny = this.deny.bind(this);
    this.ensure = this.ensure.bind(this);
    this.extend = this.extend.bind(this);
    this.unsafeEnsure = this.unsafeEnsure.bind(this);
    this.unsafeExtend = this.unsafeExtend.bind(this);
  }
  get closed() {
    return (0, import_core.succeed)(false);
  }
  deny(_key) {
    return (0, import_core.succeed)(true);
  }
  get empty() {
    return (0, import_core.succeed)(false);
  }
  ensure(_finalizer) {
    return this.ensureResult;
  }
  extend(that) {
    return (0, import_core.succeedWith)(() => this.unsafeExtend(that));
  }
  get open() {
    return (0, import_map.map_)(this.closed, (c) => !c);
  }
  get released() {
    return (0, import_core.succeed)(false);
  }
  unsafeEnsure(_finalizer) {
    return this.unsafeEnsureResult;
  }
  unsafeExtend(that) {
    switch (that._tag) {
      case "Global":
        return true;
      case "Local":
        return that.unsafeAddRef();
    }
  }
  unsafeDeny() {
    return true;
  }
}
class OrderedFinalizer {
  constructor(order, finalizer) {
    this.order = order;
    this.finalizer = finalizer;
  }
}
const noCause = import_cause.empty;
const noCauseEffect = /* @__PURE__ */ (0, import_core.succeed)(noCause);
class Local {
  constructor(finalizerCount, exitValue, references, finalizers) {
    this.finalizerCount = finalizerCount;
    this.exitValue = exitValue;
    this.references = references;
    this.finalizers = finalizers;
    this._tag = "Local";
  }
  get closed() {
    return (0, import_core.succeedWith)(() => this.unsafeClosed);
  }
  get open() {
    return (0, import_map.map_)(this.closed, (c) => !c);
  }
  deny(key) {
    return (0, import_core.succeedWith)(() => this.unsafeDeny(key));
  }
  get empty() {
    return (0, import_core.succeedWith)(() => this.finalizers.size === 0);
  }
  ensure(finalizer) {
    return (0, import_core.succeedWith)(() => this.unsafeEnsure(finalizer));
  }
  extend(that) {
    return (0, import_core.succeedWith)(() => this.unsafeExtend(that));
  }
  get released() {
    return (0, import_core.succeedWith)(() => this.unsafeReleased());
  }
  unsafeExtend(that) {
    if (this === that) {
      return true;
    }
    switch (that._tag) {
      case "Global":
        return true;
      case "Local":
        if (!this.unsafeClosed && !that.unsafeClosed) {
          that.unsafeAddRef();
          this.unsafeEnsure((_) => that.release);
          return true;
        } else {
          return false;
        }
    }
  }
  get release() {
    return (0, import_core.suspend)(() => {
      const result = this.unsafeRelease();
      if (result != null) {
        return (0, import_map.map_)(result, () => true);
      } else {
        return (0, import_core.succeed)(false);
      }
    });
  }
  unsafeReleased() {
    return this.references.get <= 0;
  }
  unsafeEnsure(finalizer) {
    if (this.unsafeClosed) {
      return E.left(this.exitValue.get);
    }
    const key = new Key();
    key.setRemove(this.deny(key));
    this.finalizers.set(key, new OrderedFinalizer(this.finalizerCount.incrementAndGet(), finalizer));
    return E.right(key);
  }
  unsafeAddRef() {
    if (this.unsafeClosed) {
      return false;
    }
    this.references.incrementAndGet();
    return true;
  }
  get unsafeClosed() {
    return this.exitValue.get != null;
  }
  unsafeDeny(key) {
    if (this.unsafeClosed) {
      return false;
    } else {
      return this.finalizers.delete(key);
    }
  }
  unsafeClose(a) {
    this.exitValue.compareAndSet(null, a);
    return this.unsafeRelease();
  }
  unsafeRelease() {
    if (this.references.decrementAndGet() === 0) {
      const totalSize = this.finalizers.size;
      if (totalSize === 0) {
        return null;
      }
      const array = Array.from(this.finalizers.values());
      const sorted = array.sort((l, r) => l == null ? -1 : r == null ? 1 : l.order - r.order);
      const a = this.exitValue.get;
      return (0, import_uncause.uncause)(A.reduce_(sorted, noCauseEffect, (acc, o) => o != null ? (0, import_zipWith.zipWith_)(acc, (0, import_cause2.cause)(o.finalizer(a)), (a2, b) => (0, import_cause.then)(a2, b)) : acc));
    } else {
      return null;
    }
  }
  get unsafeEmpty() {
    return this.finalizers.size === 0;
  }
}
const globalScope = /* @__PURE__ */ new Global();
class Open {
  constructor(close, scope) {
    this.close = close;
    this.scope = scope;
  }
}
function unsafeMakeScope() {
  const exitValue = new import_AtomicReference.AtomicReference(null);
  const finalizers = /* @__PURE__ */ new Map();
  const scope = new Local(new import_AtomicNumber.AtomicNumber(Number.MIN_SAFE_INTEGER), exitValue, new import_AtomicNumber.AtomicNumber(1), finalizers);
  return new Open((a) => {
    return (0, import_core.suspend)(() => {
      const result = scope.unsafeClose(a);
      if (result != null) {
        return (0, import_map.map_)(result, () => true);
      } else {
        return (0, import_core.succeed)(false);
      }
    });
  }, scope);
}
function makeScope() {
  return (0, import_core.succeedWith)(() => unsafeMakeScope());
}
module.exports = __toCommonJS(Scope_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Global,
  Key,
  Local,
  Open,
  OrderedFinalizer,
  globalScope,
  makeScope,
  unsafeMakeScope
});
