var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Case_exports = {};
__export(Case_exports, {
  Case: () => Case,
  CaseBrand: () => CaseBrand,
  Tagged: () => Tagged,
  TaggedADT: () => TaggedADT,
  caseArgs: () => caseArgs,
  caseKeys: () => caseKeys,
  hasCaseBrand: () => hasCaseBrand
});
var St = __toESM(require("../Structural/index.js"));
const CaseBrand = /* @__PURE__ */ Symbol();
function hasCaseBrand(self) {
  return typeof self === "object" && self != null && CaseBrand in self;
}
const h0 = /* @__PURE__ */ St.hashString("@effect-ts/system/Case");
const caseArgs = /* @__PURE__ */ Symbol();
const caseKeys = /* @__PURE__ */ Symbol();
const Case = class {
  constructor(args) {
    this[caseArgs] = args;
    if (typeof args === "object" && args != null) {
      const keys = Object.keys(args);
      for (let i = 0; i < keys.length; i++) {
        this[keys[i]] = args[keys[i]];
      }
    }
    this[caseKeys] = Object.keys(this).sort();
  }
  static make(args) {
    return new this(args);
  }
  copy(args) {
    return new this.constructor(__spreadValues(__spreadValues({}, this[caseArgs]), args));
  }
  get [CaseBrand]() {
    return this[caseKeys];
  }
  get [St.hashSym]() {
    let h = h0;
    for (const k of this[caseKeys]) {
      h = St.combineHash(h, St.hash(this[k]));
    }
    return h;
  }
  [St.equalsSym](that) {
    if (this === that) {
      return true;
    }
    if (that instanceof this.constructor) {
      const kthat = that[CaseBrand];
      const len = kthat.length;
      if (len !== this[caseKeys].length) {
        return false;
      }
      let eq = true;
      let i = 0;
      while (eq && i < len) {
        eq = this[caseKeys][i] === kthat[i] && St.equals(this[this[caseKeys][i]], that[kthat[i]]);
        i++;
      }
      return eq;
    }
    return false;
  }
};
function TaggedADT() {
  return Tagged;
}
function Tagged(tag, key) {
  var _a;
  if (key) {
    class X2 extends Case {
      constructor() {
        super(...arguments);
        this[_a] = tag;
      }
    }
    _a = key;
    X2._tag = tag;
    return X2;
  }
  class X extends Case {
    constructor() {
      super(...arguments);
      this._tag = tag;
    }
  }
  X._tag = tag;
  return X;
}
module.exports = __toCommonJS(Case_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Case,
  CaseBrand,
  Tagged,
  TaggedADT,
  caseArgs,
  caseKeys,
  hasCaseBrand
});
