var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var XRefM_exports = {};
__export(XRefM_exports, {
  AtomicM: () => AtomicM,
  DerivedAllM: () => DerivedAllM,
  DerivedM: () => DerivedM,
  concrete: () => concrete
});
var semaphore = __toESM(require("../Semaphore/index.js"));
var T = __toESM(require("./effect.js"));
class AtomicM {
  constructor(ref, semaphore2) {
    this.ref = ref;
    this.semaphore = semaphore2;
    this._tag = "AtomicM";
    this.foldM = this.foldM.bind(this);
    this.foldAllM = this.foldAllM.bind(this);
    this.set = this.set.bind(this);
  }
  foldM(_ea, _eb, ca, bd) {
    return new DerivedM((f) => f(this, (s) => bd(s), (a) => ca(a)));
  }
  foldAllM(_ea, _eb, _ec, ca, bd) {
    return new DerivedAllM((f) => f(this, (s) => bd(s), (a) => (s) => ca(a)(s)));
  }
  get get() {
    return this.ref.get;
  }
  set(a) {
    return semaphore.withPermit_(this.ref.set(a), this.semaphore);
  }
}
class DerivedM {
  constructor(use) {
    this.use = use;
    this._tag = "DerivedM";
    this.foldM = this.foldM.bind(this);
    this.foldAllM = this.foldAllM.bind(this);
    this.set = this.set.bind(this);
  }
  foldM(ea, eb, ca, bd) {
    return this.use((value, getEither, setEither) => new DerivedM((f) => f(value, (s) => T.foldM_(getEither(s), (e) => T.fail(eb(e)), (a) => bd(a)), (a) => T.chain_(ca(a), (a2) => T.mapError_(setEither(a2), ea)))));
  }
  foldAllM(ea, eb, ec, ca, bd) {
    return this.use((value, getEither, setEither) => new DerivedAllM((f) => f(value, (s) => T.foldM_(getEither(s), (e) => T.fail(eb(e)), (a) => bd(a)), (c) => (s) => T.chain_(T.foldM_(getEither(s), (e) => T.fail(ec(e)), ca(c)), (a) => T.mapError_(setEither(a), ea)))));
  }
  get get() {
    return this.use((value, getEither) => T.chain_(value.get, (a) => getEither(a)));
  }
  set(a) {
    return this.use((value, _, setEither) => semaphore.withPermit_(T.chain_(setEither(a), (a2) => value.set(a2)), value.semaphore));
  }
}
class DerivedAllM {
  constructor(use) {
    this.use = use;
    this._tag = "DerivedAllM";
    this.foldM = this.foldM.bind(this);
    this.foldAllM = this.foldAllM.bind(this);
    this.set = this.set.bind(this);
  }
  foldM(ea, eb, ca, bd) {
    return this.use((value, getEither, setEither) => new DerivedAllM((f) => f(value, (s) => T.foldM_(getEither(s), (e) => T.fail(eb(e)), (a) => bd(a)), (a) => (s) => T.chain_(ca(a), (a2) => T.mapError_(setEither(a2)(s), ea)))));
  }
  foldAllM(ea, eb, ec, ca, bd) {
    return this.use((value, getEither, setEither) => new DerivedAllM((f) => f(value, (s) => T.foldM_(getEither(s), (e) => T.fail(eb(e)), (a) => bd(a)), (c) => (s) => T.chain_(T.foldM_(getEither(s), (e) => T.fail(ec(e)), ca(c)), (a) => T.mapError_(setEither(a)(s), ea)))));
  }
  get get() {
    return this.use((value, getEither) => T.chain_(value.get, (a) => getEither(a)));
  }
  set(a) {
    return this.use((value, _, setEither) => semaphore.withPermit_(T.chain_(T.chain_(value.get, setEither(a)), (a2) => value.set(a2)), value.semaphore));
  }
}
const concrete = (_) => _;
module.exports = __toCommonJS(XRefM_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AtomicM,
  DerivedAllM,
  DerivedM,
  concrete
});
