var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var interruption_exports = {};
__export(interruption_exports, {
  InterruptStatusRestoreImpl: () => InterruptStatusRestoreImpl,
  disconnect: () => disconnect,
  interrupt: () => interrupt,
  interruptAs: () => interruptAs,
  interruptible: () => interruptible,
  interruptibleMask: () => interruptibleMask,
  onInterrupt: () => onInterrupt,
  onInterruptExtended_: () => onInterruptExtended_,
  onInterrupt_: () => onInterrupt_,
  uninterruptible: () => uninterruptible,
  uninterruptibleMask: () => uninterruptibleMask
});
var Cause = __toESM(require("../Cause/core.js"));
var Fiber = __toESM(require("../Fiber/core.js"));
var import_core = require("../Fiber/core.js");
var import_core2 = require("./core.js");
var import_core_scope = require("./core-scope.js");
var import_fiberId = require("./fiberId.js");
const uninterruptible = /* @__PURE__ */ (0, import_core2.interruptStatus)(import_core.uninterruptible);
class InterruptStatusRestoreImpl {
  constructor(flag) {
    this.flag = flag;
    this.restore = this.restore.bind(this);
    this.force = this.force.bind(this);
  }
  restore(effect, __trace) {
    return (0, import_core2.interruptStatus_)(effect, this.flag, __trace);
  }
  force(effect, __trace) {
    if (this.flag.isUninteruptible) {
      return interruptible(disconnect(uninterruptible(effect)), __trace);
    }
    return (0, import_core2.interruptStatus_)(effect, this.flag, __trace);
  }
}
function uninterruptibleMask(f, __trace) {
  return (0, import_core2.checkInterruptible)((flag) => uninterruptible(f(new InterruptStatusRestoreImpl(flag))), __trace);
}
function onInterrupt_(self, cleanup, __trace) {
  return uninterruptibleMask(({
    restore
  }) => (0, import_core2.foldCauseM_)(restore(self), (cause) => Cause.interrupted(cause) ? (0, import_core2.chain_)(cleanup(Cause.interruptors(cause)), () => (0, import_core2.halt)(cause)) : (0, import_core2.halt)(cause), import_core2.succeed, __trace));
}
function onInterruptExtended_(self, cleanup, __trace) {
  return uninterruptibleMask(({
    restore
  }) => (0, import_core2.foldCauseM_)(restore(self), (cause) => Cause.interrupted(cause) ? (0, import_core2.foldCauseM_)(cleanup(Cause.interruptors(cause)), (_) => (0, import_core2.halt)(_), () => (0, import_core2.halt)(cause)) : (0, import_core2.halt)(cause), import_core2.succeed, __trace));
}
function onInterrupt(cleanup, __trace) {
  return (self) => onInterrupt_(self, cleanup, __trace);
}
function disconnect(effect, __trace) {
  return uninterruptibleMask(({
    restore
  }) => (0, import_core2.chain_)(import_fiberId.fiberId, (id) => (0, import_core2.chain_)((0, import_core_scope.forkDaemon)(restore(effect)), (fiber) => onInterrupt_(restore(Fiber.join(fiber)), () => (0, import_core_scope.forkDaemon)(fiber.interruptAs(id))))), __trace);
}
function interruptibleMask(f, __trace) {
  return (0, import_core2.checkInterruptible)((flag) => interruptible(f(new InterruptStatusRestoreImpl(flag))), __trace);
}
function interruptAs(fiberId2, __trace) {
  return (0, import_core2.haltWith)((trace) => Cause.traced(Cause.interrupt(fiberId2), trace()), __trace);
}
const interrupt = /* @__PURE__ */ (0, import_core2.chain_)(import_fiberId.fiberId, interruptAs);
function interruptible(effect, __trace) {
  return (0, import_core2.interruptStatus_)(effect, import_core.interruptible, __trace);
}
module.exports = __toCommonJS(interruption_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InterruptStatusRestoreImpl,
  disconnect,
  interrupt,
  interruptAs,
  interruptible,
  interruptibleMask,
  onInterrupt,
  onInterruptExtended_,
  onInterrupt_,
  uninterruptible,
  uninterruptibleMask
});
