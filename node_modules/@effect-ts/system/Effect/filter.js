var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var filter_exports = {};
__export(filter_exports, {
  filter: () => filter,
  filterNot: () => filterNot,
  filterNotPar: () => filterNotPar,
  filterNotParN: () => filterNotParN,
  filterNotParN_: () => filterNotParN_,
  filterNotPar_: () => filterNotPar_,
  filterNot_: () => filterNot_,
  filterPar: () => filterPar,
  filterParN: () => filterParN,
  filterParN_: () => filterParN_,
  filterPar_: () => filterPar_,
  filter_: () => filter_
});
var import_compact = require("../Collections/Immutable/Chunk/api/compact.js");
var import_Function = require("../Function/index.js");
var I = __toESM(require("../Iterable/index.js"));
var O = __toESM(require("../Option/index.js"));
var core = __toESM(require("./core.js"));
var forEach = __toESM(require("./excl-forEach.js"));
var map = __toESM(require("./map.js"));
var zipWith = __toESM(require("./zipWith.js"));
function filter(f, __trace) {
  return (as) => filter_(as, f, __trace);
}
function filter_(as, f, __trace) {
  return core.suspend(() => I.reduce_(as, core.succeedWith(() => []), (io, a) => zipWith.zipWith_(io, core.suspend(() => f(a)), (as_, p) => {
    if (p) {
      as_.push(a);
    }
    return as_;
  })), __trace);
}
function filterPar_(as, f, __trace) {
  return map.map_(forEach.forEachPar_(as, (a) => map.map_(f(a), (b) => b ? O.some(a) : O.none), __trace), import_compact.compact);
}
function filterPar(f, __trace) {
  return (as) => filterPar_(as, f, __trace);
}
function filterParN_(as, n, f, __trace) {
  return map.map_(forEach.forEachParN_(as, n, (a) => map.map_(f(a), (b) => b ? O.some(a) : O.none), __trace), import_compact.compact);
}
function filterParN(n, f, __trace) {
  return (as) => filterParN_(as, n, f, __trace);
}
function filterNot(f, __trace) {
  return (as) => filterNot_(as, f, __trace);
}
function filterNot_(as, f, __trace) {
  return filter_(as, (x) => map.map_(f(x), (b) => !b), __trace);
}
function filterNotPar_(as, f, __trace) {
  return filterPar_(as, (x) => map.map_(f(x), (b) => !b), __trace);
}
function filterNotPar(f, __trace) {
  return (as) => filterNotPar_(as, f, __trace);
}
function filterNotParN_(as, n, f, __trace) {
  return filterParN_(as, n, (x) => map.map_(f(x), (b) => !b), __trace);
}
function filterNotParN(n, f, __trace) {
  return (as) => filterNotParN_(as, n, f, __trace);
}
module.exports = __toCommonJS(filter_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  filter,
  filterNot,
  filterNotPar,
  filterNotParN,
  filterNotParN_,
  filterNotPar_,
  filterNot_,
  filterPar,
  filterParN,
  filterParN_,
  filterPar_,
  filter_
});
