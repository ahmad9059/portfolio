var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var memoize_exports = {};
__export(memoize_exports, {
  memoize: () => memoize,
  memoizeEq: () => memoizeEq
});
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var import_Function = require("../Function/index.js");
var import_await = require("../Promise/await.js");
var import_make = require("../Promise/make.js");
var RefM = __toESM(require("../RefM/index.js"));
var import_core = require("./core.js");
var Do = __toESM(require("./do.js"));
var map = __toESM(require("./map.js"));
var tap = __toESM(require("./tap.js"));
var to = __toESM(require("./to.js"));
function memoize(f, __trace) {
  return map.map_(RefM.makeRefM(/* @__PURE__ */ new Map()), (ref) => (a) => map.map_(Do.bind_(Do.bind_(Do.do, "promise", () => RefM.modify((m) => {
    const memo = m.get(a);
    if (memo) {
      return (0, import_core.succeed)(Tp.tuple(memo, m));
    }
    return map.map_(tap.tap_(Do.bind_(Do.do, "promise", () => (0, import_make.make)()), ({
      promise
    }) => (0, import_core.fork)(to.to_(f(a), promise))), ({
      promise
    }) => Tp.tuple(promise, m.set(a, promise)));
  })(ref)), "b", ({
    promise
  }) => (0, import_await.await)(promise)), ({
    b
  }) => b), __trace);
}
function memoizeEq(compare) {
  return (f) => map.map_(RefM.makeRefM(/* @__PURE__ */ new Map()), (ref) => (a) => map.map_(Do.bind_(Do.bind_(Do.do, "promise", () => RefM.modify((m) => {
    for (const [k, v] of m) {
      if (compare(k)(a)) {
        return (0, import_core.succeed)(Tp.tuple(v, m));
      }
    }
    return map.map_(tap.tap_(Do.bind_(Do.do, "promise", () => (0, import_make.make)()), ({
      promise
    }) => (0, import_core.fork)(to.to_(f(a), promise))), ({
      promise
    }) => Tp.tuple(promise, m.set(a, promise)));
  })(ref)), "b", ({
    promise
  }) => (0, import_await.await)(promise)), ({
    b
  }) => b));
}
module.exports = __toCommonJS(memoize_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  memoize,
  memoizeEq
});
