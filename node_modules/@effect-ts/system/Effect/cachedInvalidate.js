var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var cachedInvalidate_exports = {};
__export(cachedInvalidate_exports, {
  cachedInvalidate: () => cachedInvalidate,
  cachedInvalidate_: () => cachedInvalidate_
});
var import_Clock = require("../Clock/index.js");
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var import_Function = require("../Function/index.js");
var O = __toESM(require("../Option/index.js"));
var Ref = __toESM(require("../RefM/index.js"));
var core = __toESM(require("./core.js"));
var die = __toESM(require("./die.js"));
var Do = __toESM(require("./do.js"));
var import_environment = require("./environment.js");
var P = __toESM(require("./excl-forEach-promise.js"));
var uninterruptibleMask = __toESM(require("./interruption.js"));
var map = __toESM(require("./map.js"));
var tap = __toESM(require("./tap.js"));
var to = __toESM(require("./to.js"));
function cachedInvalidate(ttl, __trace) {
  return (fa) => cachedInvalidate_(fa, ttl);
}
function cachedInvalidate_(fa, ttl, __trace) {
  return map.map_(Do.bind_(Do.bind_(Do.do, "r", () => (0, import_environment.environment)()), "cache", () => Ref.makeRefM(O.none)), ({
    cache,
    r
  }) => Tp.tuple(core.provideAll_(get(fa, ttl, cache), r), invalidate(cache)), __trace);
}
function invalidate(cache) {
  return cache.set(O.none);
}
function compute(fa, ttl, start) {
  return map.map_(tap.tap_(Do.bind_(Do.do, "p", () => P.make()), ({
    p
  }) => to.to_(fa, p)), ({
    p
  }) => O.some(Tp.tuple(start + ttl, p)));
}
function get(fa, ttl, cache) {
  return uninterruptibleMask.uninterruptibleMask(({
    restore
  }) => core.chain_(import_Clock.currentTime, (time) => core.chain_(Ref.updateSomeAndGet((o) => O.fold_(o, () => O.some(compute(fa, ttl, time)), ({
    tuple: [end]
  }) => end - time <= 0 ? O.some(compute(fa, ttl, time)) : O.none))(cache), (a) => a._tag === "None" ? die.die("bug") : restore(P.await(a.value.get(1))))));
}
module.exports = __toCommonJS(cachedInvalidate_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cachedInvalidate,
  cachedInvalidate_
});
