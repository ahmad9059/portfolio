var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var gen_exports = {};
__export(gen_exports, {
  GenEffect: () => GenEffect,
  gen: () => gen,
  genM: () => genM
});
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var import_managed = require("../Managed/managed.js");
var import_makeReleaseMap = require("../Managed/ReleaseMap/makeReleaseMap.js");
var import_releaseAll = require("../Managed/ReleaseMap/releaseAll.js");
var Utils = __toESM(require("../Utils/index.js"));
var import_bracketExit = require("./bracketExit.js");
var import_commons = require("./commons.js");
var import_core = require("./core.js");
var import_ExecutionStrategy = require("./ExecutionStrategy.js");
var import_fail = require("./fail.js");
var import_fromEither = require("./fromEither.js");
var import_getOrFail = require("./getOrFail.js");
var import_has = require("./has.js");
var import_map = require("./map.js");
var import_provideSome = require("./provideSome.js");
class GenEffect {
  constructor(effect, trace) {
    this.effect = effect;
    this.trace = trace;
  }
  *[Symbol.iterator]() {
    return yield this;
  }
}
function adapter(_, __, ___) {
  if (Utils.isEither(_)) {
    return new GenEffect((0, import_fromEither.fromEither)(() => _), __);
  }
  if (Utils.isOption(_)) {
    if (__ && typeof __ === "function") {
      return new GenEffect(_._tag === "None" ? (0, import_fail.fail)(__()) : (0, import_core.succeed)(_.value), ___);
    }
    return new GenEffect((0, import_getOrFail.getOrFail)(_), __);
  }
  if (Utils.isTag(_)) {
    return new GenEffect((0, import_has.service)(_), __);
  }
  return new GenEffect(_, __);
}
function genM(f, __trace) {
  return (0, import_core.suspend)(() => {
    const iterator = f(adapter);
    const state = iterator.next();
    function run(rm, state2) {
      if (state2.done) {
        return (0, import_core.succeed)(state2.value);
      }
      return (0, import_core.chain_)((0, import_core.suspend)(() => state2.value.trace ? state2.value["effect"] instanceof import_managed.ManagedImpl ? (0, import_map.map_)((0, import_provideSome.provideSome_)(state2.value["effect"]["effect"], (r0) => Tp.tuple(r0, rm)), (_) => _.get(1)) : state2.value["effect"] : state2.value["effect"] instanceof import_managed.ManagedImpl ? (0, import_map.map_)((0, import_provideSome.provideSome_)(state2.value["effect"]["effect"], (r0) => Tp.tuple(r0, rm)), (_) => _.get(1)) : state2.value["effect"], state2.value.trace), (val) => {
        const next = iterator.next(val);
        return run(rm, next);
      });
    }
    return (0, import_core.chain_)(import_makeReleaseMap.makeReleaseMap, (rm) => (0, import_bracketExit.bracketExit_)(import_core.unit, () => run(rm, state), (_, e) => (0, import_releaseAll.releaseAll)(e, import_ExecutionStrategy.sequential)(rm)));
  }, __trace);
}
function gen(f, __trace) {
  return (0, import_core.suspend)(() => {
    const iterator = f(adapter);
    const state = iterator.next();
    function run(state2) {
      if (state2.done) {
        return (0, import_core.succeed)(state2.value);
      }
      return (0, import_core.chain_)((0, import_core.suspend)(() => state2.value["effect"], state2.value.trace), (val) => run(iterator.next(val)));
    }
    return run(state);
  }, __trace);
}
module.exports = __toCommonJS(gen_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GenEffect,
  gen,
  genM
});
