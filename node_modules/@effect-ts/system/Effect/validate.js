var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var validate_exports = {};
__export(validate_exports, {
  validate: () => validate,
  validateExec: () => validateExec,
  validateExec_: () => validateExec_,
  validatePar: () => validatePar,
  validateParN: () => validateParN,
  validateParN_: () => validateParN_,
  validatePar_: () => validatePar_,
  validate_: () => validate_
});
var Chunk = __toESM(require("../Collections/Immutable/Chunk/core.js"));
var E = __toESM(require("../Either/index.js"));
var import_absolve = require("./absolve.js");
var import_either = require("./either.js");
var import_excl_forEach = require("./excl-forEach.js");
var import_map = require("./map.js");
function validate_(as, f, __trace) {
  return (0, import_absolve.absolve)((0, import_map.map_)((0, import_excl_forEach.forEach_)(as, (a) => (0, import_either.either)(f(a))), mergeExits()), __trace);
}
function validatePar_(as, f, __trace) {
  return (0, import_absolve.absolve)((0, import_map.map_)((0, import_excl_forEach.forEachPar_)(as, (a) => (0, import_either.either)(f(a))), mergeExits()), __trace);
}
function validateParN_(as, n, f, __trace) {
  return (0, import_absolve.absolve)((0, import_map.map_)((0, import_excl_forEach.forEachParN_)(as, n, (a) => (0, import_either.either)(f(a))), mergeExits()), __trace);
}
function mergeExits() {
  return (exits) => {
    let errors = Chunk.empty();
    let results = Chunk.empty();
    for (const e of exits) {
      if (e._tag === "Left") {
        errors = Chunk.append_(errors, e.left);
      } else {
        results = Chunk.append_(results, e.right);
      }
    }
    if (!Chunk.isEmpty(errors)) {
      return E.left(errors);
    } else {
      return E.right(results);
    }
  };
}
function validateExec_(as, es, f, __trace) {
  return (0, import_absolve.absolve)((0, import_map.map_)((0, import_excl_forEach.forEachExec_)(as, es, (a) => (0, import_either.either)(f(a))), mergeExits()), __trace);
}
function validate(f, __trace) {
  return (as) => validate_(as, f, __trace);
}
function validatePar(f, __trace) {
  return (as) => validatePar_(as, f, __trace);
}
function validateParN(n, f, __trace) {
  return (as) => validateParN_(as, n, f, __trace);
}
function validateExec(es, f, __trace) {
  return (as) => validateExec_(as, es, f, __trace);
}
module.exports = __toCommonJS(validate_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  validate,
  validateExec,
  validateExec_,
  validatePar,
  validateParN,
  validateParN_,
  validatePar_,
  validate_
});
