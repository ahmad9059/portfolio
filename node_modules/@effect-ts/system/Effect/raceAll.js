var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var raceAll_exports = {};
__export(raceAll_exports, {
  raceAll: () => raceAll,
  raceAllWait: () => raceAllWait,
  raceAllWithStrategy: () => raceAllWithStrategy
});
var import_reduce = require("../Collections/Immutable/Chunk/api/reduce.js");
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var Exit = __toESM(require("../Exit/index.js"));
var Fiber = __toESM(require("../Fiber/index.js"));
var import_Function = require("../Function/index.js");
var import_await = require("../Promise/await.js");
var import_halt = require("../Promise/halt.js");
var import_make = require("../Promise/make.js");
var import_succeed = require("../Promise/succeed.js");
var Ref = __toESM(require("../Ref/index.js"));
var as = __toESM(require("./as.js"));
var asUnit = __toESM(require("./asUnit.js"));
var core = __toESM(require("./core.js"));
var Do = __toESM(require("./do.js"));
var import_excl_forEach = require("./excl-forEach.js");
var import_flatten = require("./flatten.js");
var interruption = __toESM(require("./interruption.js"));
var map = __toESM(require("./map.js"));
var tap = __toESM(require("./tap.js"));
function arbiter(fibers, winner, promise, fails) {
  return (res) => Exit.foldM((e) => (0, import_flatten.flatten)(Ref.modify_(fails, (c) => Tp.tuple(c === 0 ? asUnit.asUnit((0, import_halt.halt)(e)(promise)) : core.unit, c - 1))), (a) => core.chain_((0, import_succeed.succeed)(Tp.tuple(a, winner))(promise), (set) => set ? (0, import_reduce.reduce)(core.unit, (io, f) => f === winner ? io : tap.tap_(io, () => Fiber.interrupt(f)))(fibers) : core.unit))(res);
}
function raceAllWithStrategy(ios, interruptStrategy, __trace) {
  return map.map_(tap.tap_(Do.bind_(Do.bind_(Do.bind_(Do.do, "done", () => (0, import_make.make)()), "fails", () => Ref.makeRef(ios.length)), "c", ({
    done,
    fails
  }) => interruption.uninterruptibleMask(({
    restore
  }) => map.map_(Do.bind_(Do.let_(tap.tap_(Do.bind_(Do.do, "fs", () => (0, import_excl_forEach.forEach_)(ios, (x) => core.fork(interruption.interruptible(x)))), ({
    fs
  }) => (0, import_reduce.reduce_)(fs, core.unit, (io, f) => core.chain_(io, () => core.fork(core.chain_(f.await, arbiter(fs, f, done, fails)))))), "inheritRefs", () => (res) => as.as_(res.get(1).inheritRefs, res.get(0))), "c", ({
    fs,
    inheritRefs
  }) => interruption.onInterrupt_(restore(core.chain_((0, import_await.await)(done), inheritRefs)), () => (0, import_reduce.reduce_)(fs, core.unit, (io, f) => tap.tap_(io, () => Fiber.interrupt(f))))), ({
    c,
    fs
  }) => ({
    c,
    fs
  })), __trace)), ({
    c: {
      fs
    }
  }) => interruptStrategy === "wait" ? (0, import_excl_forEach.forEach_)(fs, (f) => f.await) : core.unit), ({
    c: {
      c
    }
  }) => c);
}
function raceAll(ios, __trace) {
  return raceAllWithStrategy(ios, "background", __trace);
}
function raceAllWait(ios, __trace) {
  return raceAllWithStrategy(ios, "wait", __trace);
}
module.exports = __toCommonJS(raceAll_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  raceAll,
  raceAllWait,
  raceAllWithStrategy
});
