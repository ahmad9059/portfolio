var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var interop_exports = {};
__export(interop_exports, {
  fromAsync: () => fromAsync,
  fromIO: () => fromIO
});
var Async = __toESM(require("../Async/index.js"));
var IO = __toESM(require("../IO/index.js"));
var import_core = require("./core.js");
var import_effectAsyncInterrupt = require("./effectAsyncInterrupt.js");
var import_fail = require("./fail.js");
var import_interruption = require("./interruption.js");
function fromAsync(async, __trace) {
  return (0, import_core.accessM)((r) => (0, import_effectAsyncInterrupt.effectAsyncInterrupt)((cb) => {
    const cancel = Async.runAsyncEnv(async, r, (exit) => {
      switch (exit._tag) {
        case "Success": {
          cb((0, import_core.succeed)(exit.a));
          break;
        }
        case "Interrupt": {
          cb(import_interruption.interrupt);
          break;
        }
        case "Failure": {
          cb((0, import_fail.fail)(exit.e));
          break;
        }
      }
    });
    return (0, import_core.succeedWith)(() => {
      cancel();
    });
  }, __trace));
}
function fromIO(io, __trace) {
  return (0, import_core.succeedWith)(() => IO.run(io), __trace);
}
module.exports = __toCommonJS(interop_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fromAsync,
  fromIO
});
