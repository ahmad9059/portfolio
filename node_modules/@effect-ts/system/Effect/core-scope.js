var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var core_scope_exports = {};
__export(core_scope_exports, {
  ForkScopeRestore: () => ForkScopeRestore,
  forkDaemon: () => forkDaemon,
  forkDaemonReport: () => forkDaemonReport,
  forkDaemonReport_: () => forkDaemonReport_,
  forkIn: () => forkIn,
  forkInReport: () => forkInReport,
  forkInReport_: () => forkInReport_,
  forkIn_: () => forkIn_,
  forkScope: () => forkScope,
  forkScopeMask: () => forkScopeMask,
  forkScopeMask_: () => forkScopeMask_,
  forkScopeWith: () => forkScopeWith,
  overrideForkScope: () => overrideForkScope,
  overrideForkScope_: () => overrideForkScope_,
  raceWith: () => raceWith,
  raceWithScope: () => raceWithScope,
  raceWithScope_: () => raceWithScope_,
  raceWith_: () => raceWith_,
  resetForkScope: () => resetForkScope,
  transplant: () => transplant
});
var O = __toESM(require("../Option/index.js"));
var import_Scope = require("../Scope/index.js");
var import_core = require("./core.js");
var import_primitives = require("./primitives.js");
const forkScope = /* @__PURE__ */ new import_primitives.IGetForkScope(import_core.succeed);
class ForkScopeRestore {
  constructor(scope) {
    this.scope = scope;
    this.restore = (fa, __trace) => new import_primitives.IOverrideForkScope(fa, O.some(this.scope), __trace);
  }
}
function forkScopeMask_(newScope, f, __trace) {
  return forkScopeWith((scope) => new import_primitives.IOverrideForkScope(f(new ForkScopeRestore(scope)), O.some(newScope)), __trace);
}
function forkScopeMask(f, __trace) {
  return (newScope) => forkScopeMask_(newScope, f, __trace);
}
function raceWithScope_(left, right, leftWins, rightWins, scope, __trace) {
  return new import_primitives.IRaceWith(left, right, leftWins, rightWins, O.some(scope), __trace);
}
function raceWithScope(right, leftWins, rightWins, scope, __trace) {
  return (left) => raceWithScope_(left, right, leftWins, rightWins, scope, __trace);
}
function raceWith_(left, right, leftWins, rightWins, __trace) {
  return new import_primitives.IRaceWith(left, right, leftWins, rightWins, O.none, __trace);
}
function raceWith(right, leftWins, rightWins, __trace) {
  return (left) => raceWith_(left, right, leftWins, rightWins, __trace);
}
function transplant(f, __trace) {
  return forkScopeWith((scope) => f((e, __trace2) => new import_primitives.IOverrideForkScope(e, O.some(scope), __trace2)), __trace);
}
function forkDaemon(value, __trace) {
  return new import_primitives.IFork(value, O.some(import_Scope.globalScope), O.none, __trace);
}
function forkDaemonReport(reportFailure, __trace) {
  return (value) => forkDaemonReport_(value, reportFailure, __trace);
}
function forkDaemonReport_(value, reportFailure, __trace) {
  return new import_primitives.IFork(value, O.some(import_Scope.globalScope), O.some(reportFailure), __trace);
}
function forkIn(scope, __trace) {
  return (value) => forkIn_(value, scope, __trace);
}
function forkIn_(value, scope, __trace) {
  return new import_primitives.IFork(value, O.some(scope), O.none, __trace);
}
function forkInReport(scope, reportFailure, __trace) {
  return (value) => new import_primitives.IFork(value, O.some(scope), O.some(reportFailure), __trace);
}
function forkInReport_(value, scope, reportFailure, __trace) {
  return new import_primitives.IFork(value, O.some(scope), O.some(reportFailure), __trace);
}
function forkScopeWith(f, __trace) {
  return new import_primitives.IGetForkScope(f, __trace);
}
function overrideForkScope(scope, __trace) {
  return (self) => new import_primitives.IOverrideForkScope(self, O.some(scope), __trace);
}
function overrideForkScope_(self, scope, __trace) {
  return new import_primitives.IOverrideForkScope(self, O.some(scope), __trace);
}
function resetForkScope(self, __trace) {
  return new import_primitives.IOverrideForkScope(self, O.none, __trace);
}
module.exports = __toCommonJS(core_scope_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ForkScopeRestore,
  forkDaemon,
  forkDaemonReport,
  forkDaemonReport_,
  forkIn,
  forkInReport,
  forkInReport_,
  forkIn_,
  forkScope,
  forkScopeMask,
  forkScopeMask_,
  forkScopeWith,
  overrideForkScope,
  overrideForkScope_,
  raceWith,
  raceWithScope,
  raceWithScope_,
  raceWith_,
  resetForkScope,
  transplant
});
