var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipWithPar_exports = {};
__export(zipWithPar_exports, {
  zipWithPar: () => zipWithPar,
  zipWithPar_: () => zipWithPar_
});
var import_cause = require("../Cause/cause.js");
var import_core = require("../Fiber/core.js");
var import_core2 = require("./core.js");
var import_core_scope = require("./core-scope.js");
var import_map = require("./map.js");
function zipWithPar_(a, b, f, __trace) {
  const g = (b2, a2) => f(a2, b2);
  return (0, import_core_scope.transplant)((graft) => (0, import_core2.descriptorWith)((d) => (0, import_core_scope.raceWith_)(graft(a), graft(b), (ex, fi) => coordinateZipPar(d.id, f, true, ex, fi), (ex, fi) => coordinateZipPar(d.id, g, false, ex, fi), __trace)));
}
function coordinateZipPar(fiberId, f, leftWinner, winner, loser) {
  switch (winner._tag) {
    case "Success": {
      return (0, import_map.map_)((0, import_core.join)(loser), (y) => f(winner.value, y));
    }
    case "Failure": {
      return (0, import_core2.chain_)(loser.interruptAs(fiberId), (e) => {
        switch (e._tag) {
          case "Success": {
            return (0, import_core2.halt)(winner.cause);
          }
          case "Failure": {
            return leftWinner ? (0, import_core2.halt)((0, import_cause.both)(winner.cause, e.cause)) : (0, import_core2.halt)((0, import_cause.both)(e.cause, winner.cause));
          }
        }
      });
    }
  }
}
function zipWithPar(b, f, __trace) {
  return (a) => zipWithPar_(a, b, f, __trace);
}
module.exports = __toCommonJS(zipWithPar_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipWithPar,
  zipWithPar_
});
