var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var runtime_exports = {};
__export(runtime_exports, {
  CustomRuntime: () => CustomRuntime,
  defaultEnv: () => defaultEnv,
  defaultPlatform: () => defaultPlatform,
  defaultRuntime: () => defaultRuntime,
  makeCustomRuntime: () => makeCustomRuntime,
  prettyReporter: () => prettyReporter,
  run: () => run,
  runCancel: () => runCancel,
  runFiber: () => runFiber,
  runPromise: () => runPromise,
  runPromiseExit: () => runPromiseExit,
  runtime: () => runtime,
  withRuntime: () => withRuntime,
  withRuntimeM: () => withRuntimeM
});
var Cause = __toESM(require("../Cause/core.js"));
var import_Pretty = require("../Cause/Pretty/index.js");
var import_Clock = require("../Clock/index.js");
var import_core = require("../Exit/core.js");
var import_context = require("../Fiber/context.js");
var import_core2 = require("../Fiber/core.js");
var import_id = require("../Fiber/id.js");
var import_platform = require("../Fiber/platform.js");
var import_Function = require("../Function/index.js");
var O = __toESM(require("../Option/index.js"));
var import_Option = require("../Option/index.js");
var import_Random = require("../Random/index.js");
var Scope = __toESM(require("../Scope/index.js"));
var Supervisor = __toESM(require("../Supervisor/index.js"));
var import_Tracing = require("../Tracing/index.js");
var core = __toESM(require("./core.js"));
var import_primitives = require("./primitives.js");
const empty = () => {
};
const defaultEnv = {
  [import_Clock.HasClock.key]: /* @__PURE__ */ new import_Clock.LiveClock(),
  [import_Random.HasRandom.key]: import_Random.defaultRandom
};
const prettyReporter = (e) => {
  console.error((0, import_Pretty.pretty)(e, import_Pretty.defaultRenderer));
};
const defaultPlatform = /* @__PURE__ */ new import_platform.Platform({
  executionTraceLength: 25,
  stackTraceLength: 25,
  traceExecution: /* @__PURE__ */ (0, import_Tracing.isTracingEnabled)(),
  traceStack: /* @__PURE__ */ (0, import_Tracing.isTracingEnabled)(),
  traceEffects: /* @__PURE__ */ (0, import_Tracing.isTracingEnabled)(),
  initialTracingStatus: /* @__PURE__ */ (0, import_Tracing.isTracingEnabled)(),
  ancestorExecutionTraceLength: 25,
  ancestorStackTraceLength: 25,
  ancestryLength: 25,
  renderer: import_Pretty.defaultRenderer,
  reportFailure: import_Function.constVoid,
  maxOp: 2048,
  supervisor: Supervisor.trackMainFibers
});
class CustomRuntime {
  constructor(env, platform) {
    this.env = env;
    this.platform = platform;
    this.traceExecution = this.traceExecution.bind(this);
    this.executionTraceLength = this.executionTraceLength.bind(this);
    this.traceStack = this.traceStack.bind(this);
    this.stackTraceLength = this.stackTraceLength.bind(this);
    this.traceEffect = this.traceEffect.bind(this);
    this.initialTracingStatus = this.initialTracingStatus.bind(this);
    this.ancestorExecutionTraceLength = this.ancestorExecutionTraceLength.bind(this);
    this.ancestorStackTraceLength = this.ancestorStackTraceLength.bind(this);
    this.ancestryLength = this.ancestryLength.bind(this);
    this.fiberContext = this.fiberContext.bind(this);
    this.run = this.run.bind(this);
    this.runCancel = this.runCancel.bind(this);
    this.runPromise = this.runPromise.bind(this);
    this.runPromiseExit = this.runPromiseExit.bind(this);
    this.traceRenderer = this.traceRenderer.bind(this);
    this.runFiber = this.runFiber.bind(this);
  }
  fiberContext(effect) {
    const initialIS = import_core2.interruptible;
    const fiberId = (0, import_id.newFiberId)();
    const scope = Scope.unsafeMakeScope();
    const supervisor = Supervisor.none;
    const context = new import_context.FiberContext(fiberId, this.env, initialIS, /* @__PURE__ */ new Map(), supervisor, scope, this.platform.value.maxOp, this.platform.value.reportFailure, this.platform, import_Option.none, this.platform.value.initialTracingStatus);
    if (supervisor !== Supervisor.none) {
      supervisor.unsafeOnStart(this.env, effect, O.none, context);
      context.onDone((exit) => supervisor.unsafeOnEnd((0, import_core.flatten)(exit), context));
    }
    context.evaluateLater(effect);
    return context;
  }
  supervised(supervisor) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      supervisor
    })));
  }
  runFiber(self) {
    const context = this.fiberContext(self);
    return context;
  }
  run(self, cb) {
    const context = this.fiberContext(self);
    context.runAsync(cb || empty);
  }
  runCancel(self, cb) {
    const context = this.fiberContext(self);
    context.runAsync(cb || empty);
    return context.interruptAs(context.id);
  }
  runPromise(self) {
    const context = this.fiberContext(self);
    return new Promise((res, rej) => {
      context.runAsync((exit) => {
        switch (exit._tag) {
          case "Success": {
            res(exit.value);
            break;
          }
          case "Failure": {
            rej(Cause.squash(import_Function.identity)(exit.cause));
            break;
          }
        }
      });
    });
  }
  runPromiseExit(self) {
    const context = this.fiberContext(self);
    return new Promise((res) => {
      context.runAsync((exit) => {
        res(exit);
      });
    });
  }
  withEnvironment(f) {
    return new CustomRuntime(f(this.env), this.platform);
  }
  traceRenderer(renderer) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      renderer
    })));
  }
  traceExecution(b) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      traceExecution: b
    })));
  }
  executionTraceLength(n) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      executionTraceLength: n
    })));
  }
  traceStack(b) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      traceStack: b
    })));
  }
  stackTraceLength(n) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      stackTraceLength: n
    })));
  }
  traceEffect(b) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      traceEffects: b
    })));
  }
  initialTracingStatus(b) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      initialTracingStatus: b
    })));
  }
  ancestorExecutionTraceLength(n) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      ancestorExecutionTraceLength: n
    })));
  }
  ancestorStackTraceLength(n) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      ancestorStackTraceLength: n
    })));
  }
  ancestryLength(n) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      ancestryLength: n
    })));
  }
  reportFailure(reportFailure) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      reportFailure
    })));
  }
  maxOp(maxOp) {
    return new CustomRuntime(this.env, new import_platform.Platform(__spreadProps(__spreadValues({}, this.platform.value), {
      maxOp
    })));
  }
}
function makeCustomRuntime(env, platform) {
  return new CustomRuntime(env, platform);
}
const defaultRuntime = /* @__PURE__ */ makeCustomRuntime(defaultEnv, defaultPlatform);
const {
  run,
  runCancel,
  runFiber,
  runPromise,
  runPromiseExit
} = defaultRuntime;
function runtime() {
  return core.accessM((r0) => new import_primitives.IPlatform((platform) => core.succeedWith(() => {
    return makeCustomRuntime(r0, platform);
  })));
}
function withRuntimeM(f) {
  return core.chain_(runtime(), f);
}
function withRuntime(f) {
  return core.chain_(runtime(), (r) => core.succeed(f(r)));
}
module.exports = __toCommonJS(runtime_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CustomRuntime,
  defaultEnv,
  defaultPlatform,
  defaultRuntime,
  makeCustomRuntime,
  prettyReporter,
  run,
  runCancel,
  runFiber,
  runPromise,
  runPromiseExit,
  runtime,
  withRuntime,
  withRuntimeM
});
