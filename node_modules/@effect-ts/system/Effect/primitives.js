var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var primitives_exports = {};
__export(primitives_exports, {
  ICheckInterrupt: () => ICheckInterrupt,
  ICheckTracingStatus: () => ICheckTracingStatus,
  IDescriptor: () => IDescriptor,
  IEffectAsync: () => IEffectAsync,
  IEffectPartial: () => IEffectPartial,
  IEffectTotal: () => IEffectTotal,
  IFail: () => IFail,
  IFiberRefModify: () => IFiberRefModify,
  IFiberRefNew: () => IFiberRefNew,
  IFlatMap: () => IFlatMap,
  IFold: () => IFold,
  IFork: () => IFork,
  IGetForkScope: () => IGetForkScope,
  IInterruptStatus: () => IInterruptStatus,
  IOverrideForkScope: () => IOverrideForkScope,
  IPlatform: () => IPlatform,
  IProvide: () => IProvide,
  IRaceWith: () => IRaceWith,
  IRead: () => IRead,
  ISucceed: () => ISucceed,
  ISupervise: () => ISupervise,
  ISuspend: () => ISuspend,
  ISuspendPartial: () => ISuspendPartial,
  ITrace: () => ITrace,
  ITracer: () => ITracer,
  ITracingStatus: () => ITracingStatus,
  IYield: () => IYield
});
var import_effect = require("./effect.js");
__reExport(primitives_exports, require("./effect.js"));
class IFail extends import_effect.Base {
  constructor(fill, trace) {
    super();
    this.fill = fill;
    this.trace = trace;
    this._tag = "Fail";
  }
}
class IFlatMap extends import_effect.Base {
  constructor(val, f, trace) {
    super();
    this.val = val;
    this.f = f;
    this.trace = trace;
    this._tag = "FlatMap";
  }
}
class ISucceed extends import_effect.Base {
  constructor(val, trace) {
    super();
    this.val = val;
    this.trace = trace;
    this._tag = "Succeed";
  }
}
class ITrace extends import_effect.Base {
  constructor() {
    super();
    this._tag = "Trace";
  }
}
class ITracingStatus extends import_effect.Base {
  constructor(effect, flag) {
    super();
    this.effect = effect;
    this.flag = flag;
    this._tag = "TracingStatus";
  }
}
class ICheckTracingStatus extends import_effect.Base {
  constructor(f) {
    super();
    this.f = f;
    this._tag = "CheckTracingStatus";
  }
}
class IEffectPartial extends import_effect.Base {
  constructor(effect, onThrow, trace) {
    super();
    this.effect = effect;
    this.onThrow = onThrow;
    this.trace = trace;
    this._tag = "EffectPartial";
  }
}
class IEffectTotal extends import_effect.Base {
  constructor(effect, trace) {
    super();
    this.effect = effect;
    this.trace = trace;
    this._tag = "EffectTotal";
  }
}
class IEffectAsync extends import_effect.Base {
  constructor(register, blockingOn, trace) {
    super();
    this.register = register;
    this.blockingOn = blockingOn;
    this.trace = trace;
    this._tag = "EffectAsync";
  }
}
class IFold extends import_effect.Base {
  constructor(value, failure, apply, trace) {
    super();
    this.value = value;
    this.failure = failure;
    this.apply = apply;
    this.trace = trace;
    this._tag = "Fold";
  }
}
class IFork extends import_effect.Base {
  constructor(value, scope, reportFailure, trace) {
    super();
    this.value = value;
    this.scope = scope;
    this.reportFailure = reportFailure;
    this.trace = trace;
    this._tag = "Fork";
  }
}
class IInterruptStatus extends import_effect.Base {
  constructor(effect, flag, trace) {
    super();
    this.effect = effect;
    this.flag = flag;
    this.trace = trace;
    this._tag = "InterruptStatus";
  }
}
class ICheckInterrupt extends import_effect.Base {
  constructor(f, trace) {
    super();
    this.f = f;
    this.trace = trace;
    this._tag = "CheckInterrupt";
  }
}
class IDescriptor extends import_effect.Base {
  constructor(f, trace) {
    super();
    this.f = f;
    this.trace = trace;
    this._tag = "Descriptor";
  }
}
class IYield extends import_effect.Base {
  constructor() {
    super();
    this._tag = "Yield";
  }
}
class IRead extends import_effect.Base {
  constructor(f, trace) {
    super();
    this.f = f;
    this.trace = trace;
    this._tag = "Read";
  }
}
class IPlatform extends import_effect.Base {
  constructor(f, trace) {
    super();
    this.f = f;
    this.trace = trace;
    this._tag = "Platform";
  }
}
class ITracer extends import_effect.Base {
  constructor(f, trace) {
    super();
    this.f = f;
    this.trace = trace;
    this._tag = "Tracer";
  }
}
class IProvide extends import_effect.Base {
  constructor(r, next, trace) {
    super();
    this.r = r;
    this.next = next;
    this.trace = trace;
    this._tag = "Provide";
  }
}
class ISuspend extends import_effect.Base {
  constructor(factory, trace) {
    super();
    this.factory = factory;
    this.trace = trace;
    this._tag = "Suspend";
  }
}
class ISuspendPartial extends import_effect.Base {
  constructor(factory, onThrow, trace) {
    super();
    this.factory = factory;
    this.onThrow = onThrow;
    this.trace = trace;
    this._tag = "SuspendPartial";
  }
}
class IFiberRefNew extends import_effect.Base {
  constructor(initial, onFork, onJoin) {
    super();
    this.initial = initial;
    this.onFork = onFork;
    this.onJoin = onJoin;
    this._tag = "FiberRefNew";
  }
}
class IFiberRefModify extends import_effect.Base {
  constructor(fiberRef, f, trace) {
    super();
    this.fiberRef = fiberRef;
    this.f = f;
    this.trace = trace;
    this._tag = "FiberRefModify";
  }
}
class IRaceWith extends import_effect.Base {
  constructor(left, right, leftWins, rightWins, scope, trace) {
    super();
    this.left = left;
    this.right = right;
    this.leftWins = leftWins;
    this.rightWins = rightWins;
    this.scope = scope;
    this.trace = trace;
    this._tag = "RaceWith";
  }
}
class ISupervise extends import_effect.Base {
  constructor(effect, supervisor, trace) {
    super();
    this.effect = effect;
    this.supervisor = supervisor;
    this.trace = trace;
    this._tag = "Supervise";
  }
}
class IGetForkScope extends import_effect.Base {
  constructor(f, trace) {
    super();
    this.f = f;
    this.trace = trace;
    this._tag = "GetForkScope";
  }
}
class IOverrideForkScope extends import_effect.Base {
  constructor(effect, forkScope, trace) {
    super();
    this.effect = effect;
    this.forkScope = forkScope;
    this.trace = trace;
    this._tag = "OverrideForkScope";
  }
}
module.exports = __toCommonJS(primitives_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ICheckInterrupt,
  ICheckTracingStatus,
  IDescriptor,
  IEffectAsync,
  IEffectPartial,
  IEffectTotal,
  IFail,
  IFiberRefModify,
  IFiberRefNew,
  IFlatMap,
  IFold,
  IFork,
  IGetForkScope,
  IInterruptStatus,
  IOverrideForkScope,
  IPlatform,
  IProvide,
  IRaceWith,
  IRead,
  ISucceed,
  ISupervise,
  ISuspend,
  ISuspendPartial,
  ITrace,
  ITracer,
  ITracingStatus,
  IYield
});
