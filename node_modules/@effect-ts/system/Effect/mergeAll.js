var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var mergeAll_exports = {};
__export(mergeAll_exports, {
  mergeAll: () => mergeAll,
  mergeAllPar: () => mergeAllPar,
  mergeAllParN: () => mergeAllParN,
  mergeAllParN_: () => mergeAllParN_,
  mergeAllPar_: () => mergeAllPar_,
  mergeAll_: () => mergeAll_
});
var import_Function = require("../Function/index.js");
var I = __toESM(require("../Iterable/index.js"));
var Ref = __toESM(require("../Ref/index.js"));
var core = __toESM(require("./core.js"));
var forEach = __toESM(require("./excl-forEach.js"));
var import_zipWith = require("./zipWith.js");
var import_zipWithPar = require("./zipWithPar.js");
function mergeAll(zero, f, __trace) {
  return (as) => mergeAll_(as, zero, f, __trace);
}
function mergeAll_(as, zero, f, __trace) {
  return core.suspend(() => I.reduce_(as, core.succeed(zero), (b, a) => (0, import_zipWith.zipWith_)(b, a, f)), __trace);
}
function mergeAllPar(zero, f, __trace) {
  return (as) => mergeAllPar_(as, zero, f, __trace);
}
function mergeAllPar_(as, zero, f, __trace) {
  return core.suspend(() => I.reduce_(as, core.succeed(zero), (b, a) => (0, import_zipWithPar.zipWithPar_)(b, a, f)), __trace);
}
function mergeAllParN(n, zero, f, __trace) {
  return (as) => mergeAllParN_(as, n, zero, f, __trace);
}
function mergeAllParN_(as, n, zero, f, __trace) {
  return core.chain_(Ref.makeRef(zero), (acc) => core.chain_(forEach.forEachUnitParN_(as, n, core.chain((a) => Ref.update_(acc, (b) => f(b, a))), __trace), () => acc.get));
}
module.exports = __toCommonJS(mergeAll_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mergeAll,
  mergeAllPar,
  mergeAllParN,
  mergeAllParN_,
  mergeAllPar_,
  mergeAll_
});
