var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var retryWhile_exports = {};
__export(retryWhile_exports, {
  retryWhile: () => retryWhile,
  retryWhileM: () => retryWhileM,
  retryWhileM_: () => retryWhileM_,
  retryWhile_: () => retryWhile_
});
var import_Function = require("../Function/index.js");
var catchAll = __toESM(require("./catchAll.js"));
var core = __toESM(require("./core.js"));
var fail = __toESM(require("./fail.js"));
function retryWhileM(f, __trace) {
  return (self) => retryWhileM_(self, f);
}
function retryWhileM_(self, f, __trace) {
  return core.suspend(() => catchAll.catchAll_(self, (e) => core.chain_(f(e), (b) => b ? retryWhileM_(self, f) : fail.fail(e))), __trace);
}
function retryWhile(f, __trace) {
  return (self) => retryWhile_(self, f, __trace);
}
function retryWhile_(self, f, __trace) {
  return retryWhileM_(self, (a) => core.succeed(f(a)), __trace);
}
module.exports = __toCommonJS(retryWhile_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  retryWhile,
  retryWhileM,
  retryWhileM_,
  retryWhile_
});
