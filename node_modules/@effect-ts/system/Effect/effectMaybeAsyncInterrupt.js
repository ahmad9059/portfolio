var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var effectMaybeAsyncInterrupt_exports = {};
__export(effectMaybeAsyncInterrupt_exports, {
  effectMaybeAsyncInterrupt: () => effectMaybeAsyncInterrupt,
  effectMaybeAsyncInterruptBlockingOn: () => effectMaybeAsyncInterruptBlockingOn
});
var O = __toESM(require("../Option/index.js"));
var import_AtomicReference = require("../Support/AtomicReference/index.js");
var import_OneShot = require("../Support/OneShot/index.js");
var core = __toESM(require("./core.js"));
var import_flatten = require("./flatten.js");
var import_interruption = require("./interruption.js");
function effectMaybeAsyncInterrupt(register, __trace) {
  return effectMaybeAsyncInterruptBlockingOn(register, [], __trace);
}
function effectMaybeAsyncInterruptBlockingOn(register, blockingOn, __trace) {
  return core.chain_(core.succeedWith(() => [new import_AtomicReference.AtomicReference(false), new import_OneShot.OneShot()]), ([started, cancel]) => (0, import_interruption.onInterrupt_)((0, import_flatten.flatten)(core.effectAsyncOptionBlockingOn((k) => {
    started.set(true);
    const ret = new import_AtomicReference.AtomicReference(O.none);
    try {
      const res = register((io) => k(core.succeed(io)));
      switch (res._tag) {
        case "Right": {
          ret.set(O.some(core.succeed(res.right)));
          break;
        }
        case "Left": {
          cancel.set(res.left);
          break;
        }
      }
    } finally {
      if (!cancel.isSet()) {
        cancel.set(core.unit);
      }
    }
    return ret.get;
  }, blockingOn, __trace)), () => core.suspend(() => started.get ? cancel.get() : core.unit)));
}
module.exports = __toCommonJS(effectMaybeAsyncInterrupt_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  effectMaybeAsyncInterrupt,
  effectMaybeAsyncInterruptBlockingOn
});
