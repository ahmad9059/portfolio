var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var IO_exports = {};
__export(IO_exports, {
  GenIO: () => GenIO,
  IoURI: () => IoURI,
  chain: () => chain,
  chain_: () => chain_,
  gen: () => gen,
  map: () => map,
  map_: () => map_,
  run: () => run,
  succeed: () => succeed,
  succeedWith: () => succeedWith,
  suspend: () => suspend,
  tap: () => tap,
  tap_: () => tap_,
  unit: () => unit,
  zip: () => zip,
  zipWith: () => zipWith,
  zipWith_: () => zipWith_,
  zip_: () => zip_
});
var import_Operator = require("../Operator/index.js");
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var import_commons = require("../Effect/commons.js");
var import_Stack = require("../Stack/index.js");
var import_Utils = require("../Utils/index.js");
const IoURI = /* @__PURE__ */ Symbol();
class Base {
}
class Succeed extends Base {
  constructor(a) {
    super();
    this.a = a;
    this._iotag = "Succeed";
  }
}
class Suspend extends Base {
  constructor(f) {
    super();
    this.f = f;
    this._iotag = "Suspend";
  }
}
class FlatMap extends Base {
  constructor(value, cont) {
    super();
    this.value = value;
    this.cont = cont;
    this._iotag = "FlatMap";
  }
}
function run(self) {
  let stack = void 0;
  let a = void 0;
  let curIO = self;
  while (curIO != null) {
    switch (curIO._iotag) {
      case "FlatMap": {
        switch (curIO.value._iotag) {
          case "Succeed": {
            curIO = curIO.cont(curIO.value.a);
            break;
          }
          default: {
            stack = new import_Stack.Stack(curIO.cont, stack);
            curIO = curIO.value;
          }
        }
        break;
      }
      case "Suspend": {
        curIO = curIO.f();
        break;
      }
      case "Succeed": {
        a = curIO.a;
        if (stack) {
          curIO = stack.value(a);
          stack = stack.previous;
        } else {
          curIO = void 0;
        }
        break;
      }
    }
  }
  return a;
}
function chain(f) {
  return (self) => new FlatMap(self, f);
}
function chain_(self, f) {
  return new FlatMap(self, f);
}
function tap(f) {
  return (self) => tap_(self, f);
}
function tap_(self, f) {
  return chain_(self, (a) => map_(f(a), () => a));
}
function succeed(a) {
  return new Succeed(a);
}
function map_(self, f) {
  return chain_(self, (a) => succeed(f(a)));
}
function map(f) {
  return (self) => map_(self, f);
}
const unit = /* @__PURE__ */ new Succeed(void 0);
function zipWith(that, f) {
  return (self) => zipWith_(self, that, f);
}
function zipWith_(self, that, f) {
  return chain_(self, (a) => map_(that, (b) => f(a, b)));
}
function zip(that) {
  return (self) => zip_(self, that);
}
function zip_(self, that) {
  return zipWith_(self, that, Tp.tuple);
}
function suspend(f) {
  return new Suspend(f);
}
function succeedWith(f) {
  return suspend(() => succeed(f()));
}
class GenIO {
  constructor(effect) {
    this.effect = effect;
  }
  *[Symbol.iterator]() {
    return yield this;
  }
}
function adapter(_) {
  return new GenIO(_);
}
function run_(state, iterator) {
  if (state.done) {
    return succeed(state.value);
  }
  return chain_(state.value["effect"], (val) => {
    const next = iterator.next(val);
    return run_(next, iterator);
  });
}
function gen(f) {
  return suspend(() => {
    const iterator = f(adapter);
    const state = iterator.next();
    return run_(state, iterator);
  });
}
module.exports = __toCommonJS(IO_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GenIO,
  IoURI,
  chain,
  chain_,
  gen,
  map,
  map_,
  run,
  succeed,
  succeedWith,
  suspend,
  tap,
  tap_,
  unit,
  zip,
  zipWith,
  zipWith_,
  zip_
});
