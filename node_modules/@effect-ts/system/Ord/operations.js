var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var operations_exports = {};
__export(operations_exports, {
  between: () => between,
  clamp: () => clamp,
  contramap: () => contramap,
  contramap_: () => contramap_,
  getEqual: () => getEqual,
  gt: () => gt,
  inverted: () => inverted,
  leq: () => leq,
  lt: () => lt,
  makeOrd: () => makeOrd,
  max: () => max,
  min: () => min
});
var import_Equal = require("../Equal/index.js");
function makeOrd(compare) {
  return {
    compare
  };
}
function contramap(f) {
  return (fa) => contramap_(fa, f);
}
function contramap_(fa, f) {
  return makeOrd((x, y) => fa.compare(f(x), f(y)));
}
function gt(O) {
  return (x, y) => O.compare(x, y) === 1;
}
function leq(O) {
  return (x, y) => O.compare(x, y) !== 1;
}
function lt(O) {
  return (x, y) => O.compare(x, y) === -1;
}
function max(O) {
  return (x, y) => O.compare(x, y) === -1 ? y : x;
}
function min(O) {
  return (x, y) => O.compare(x, y) === 1 ? y : x;
}
function between(O) {
  const lessThanO = lt(O);
  const greaterThanO = gt(O);
  return (low, hi) => (x) => lessThanO(x, low) || greaterThanO(x, hi) ? false : true;
}
function clamp(O) {
  const minO = min(O);
  const maxO = max(O);
  return (low, hi) => (x) => maxO(minO(x, hi), low);
}
function inverted(O) {
  return makeOrd((x, y) => O.compare(y, x));
}
function getEqual(O) {
  return (0, import_Equal.makeEqual)((x, y) => O.compare(x, y) === 0);
}
module.exports = __toCommonJS(operations_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  between,
  clamp,
  contramap,
  contramap_,
  getEqual,
  gt,
  inverted,
  leq,
  lt,
  makeOrd,
  max,
  min
});
