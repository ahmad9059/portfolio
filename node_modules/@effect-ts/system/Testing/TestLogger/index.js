var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var TestLogger_exports = {};
__export(TestLogger_exports, {
  FromConsole: () => FromConsole,
  LoggerId: () => LoggerId,
  TestLogger: () => TestLogger,
  logLine: () => logLine
});
var T = __toESM(require("../../Effect/index.js"));
var import_Has = require("../../Has/index.js");
var L = __toESM(require("../../Layer/index.js"));
const LoggerId = /* @__PURE__ */ Symbol.for("@effect-ts/system/Test/TestLoggerId");
const TestLogger = /* @__PURE__ */ (0, import_Has.tag)(LoggerId);
const FromConsole = /* @__PURE__ */ L.fromEffect_(/* @__PURE__ */ T.succeedWith(() => ({
  serviceId: LoggerId,
  logLine: (msg) => T.succeedWith(() => {
    console.log(msg);
  })
})), TestLogger);
const {
  logLine
} = /* @__PURE__ */ T.deriveLifted(TestLogger)(["logLine"], [], []);
module.exports = __toCommonJS(TestLogger_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FromConsole,
  LoggerId,
  TestLogger,
  logLine
});
