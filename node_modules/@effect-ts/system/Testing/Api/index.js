var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Api_exports = {};
__export(Api_exports, {
  assert: () => assert,
  suite: () => suite,
  test: () => test,
  testM: () => testM
});
var List = __toESM(require("../../Collections/Immutable/List/index.js"));
var T = __toESM(require("../../Effect/index.js"));
var import_Fiber = require("../../Fiber/index.js");
var import_Function = require("../../Function/index.js");
var M = __toESM(require("../../Managed/index.js"));
var O = __toESM(require("../../Option/index.js"));
var makeAssertionValue = __toESM(require("../AssertionValue/makeAssertionValue.js"));
var sameAssertion_ = __toESM(require("../AssertionValue/sameAssertion.js"));
var BA = __toESM(require("../BoolAlgebra/index.js"));
var import_FailureDetails = require("../FailureDetails/index.js");
var Spec = __toESM(require("../Spec/index.js"));
var TA = __toESM(require("../TestAnnotation/index.js"));
var import_TestAnnotationMap = require("../TestAnnotationMap/index.js");
var TF = __toESM(require("../TestFailure/index.js"));
var TS = __toESM(require("../TestSuccess/index.js"));
function test(label, __trace) {
  return (assertion) => testM(label, __trace)(() => T.succeedWith(assertion));
}
function testM(label, __trace) {
  return (assertion) => Spec.annotate(TA.location, __trace ? List.of(new import_Fiber.SourceLocation(__trace)) : List.empty())(Spec.test(label, ZTest(assertion), import_TestAnnotationMap.TestAnnotationMap.empty));
}
function suite(label) {
  return (...tests) => Spec.suite(label, M.succeed(tests), O.none);
}
function ZTest(assertion) {
  return T.foldCauseM_(T.suspend(assertion), (c) => T.fail(TF.halt(c)), (r) => O.fold_(BA.failures(r), () => T.succeed(new TS.Succeeded(BA.unit)), (failures) => T.fail(TF.assertion(failures))));
}
function assert(value, expression = O.none, sourceLocation = O.none) {
  return (assertion) => traverseResult(() => value, assertion.run(() => value), assertion, expression, sourceLocation);
}
function traverseResult(value, assertResult, assertion, expression, sourceLocation) {
  return BA.chain((fragment) => {
    function loop(whole, failureDetails) {
      if (sameAssertion_.sameAssertion_(whole, failureDetails.assertion[0])) {
        return BA.success(failureDetails);
      }
      const fragment2 = whole.result();
      const result = BA.isSuccess(fragment2) ? fragment2 : fragment2["!"];
      return BA.chain_(result, (fragment3) => loop(fragment3, new import_FailureDetails.FailureDetails([whole, ...failureDetails.assertion])));
    }
    return loop(fragment, new import_FailureDetails.FailureDetails([makeAssertionValue.makeAssertionValue(assertion, value, () => assertResult, expression, sourceLocation)]));
  })(assertResult);
}
module.exports = __toCommonJS(Api_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assert,
  suite,
  test,
  testM
});
