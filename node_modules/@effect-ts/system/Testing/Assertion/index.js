var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Assertion_exports = {};
__export(Assertion_exports, {
  Assertion: () => Assertion,
  and: () => and,
  equalTo: () => equalTo,
  hasProperty: () => hasProperty,
  isAssertion: () => isAssertion,
  isEmptyString: () => isEmptyString,
  isFalse: () => isFalse,
  makeAssertion: () => makeAssertion,
  makeAssertionDirect: () => makeAssertionDirect,
  makeAssertionRec: () => makeAssertionRec,
  or: () => or
});
var L = __toESM(require("../../Collections/Immutable/List/index.js"));
var T = __toESM(require("../../Effect/index.js"));
var O = __toESM(require("../../Option/index.js"));
var ST = __toESM(require("../../Structural/index.js"));
var AD = __toESM(require("../AssertionData/index.js"));
var makeAssertionValue = __toESM(require("../AssertionValue/makeAssertionValue.js"));
var BA = __toESM(require("../BoolAlgebra/index.js"));
var BAM = __toESM(require("../BoolAlgebraM/index.js"));
var PR = __toESM(require("../Primitives/index.js"));
var R = __toESM(require("../Render/index.js"));
class Assertion {
  constructor(render, run) {
    this.render = render;
    this.run = run;
    this.runM = this.runM.bind(this);
    this.toString = this.toString.bind(this);
  }
  runM(a) {
    return new BAM.BoolAlgebraM(T.succeed(this.run(a)));
  }
  get stringify() {
    return this.render().toString();
  }
  toString() {
    return this.stringify;
  }
  [(PR._A, ST.equalsSym)](that) {
    if (isAssertion(that)) {
      return this.stringify === that.stringify;
    }
    return false;
  }
  get [ST.hashSym]() {
    return ST.hashString(this.stringify);
  }
}
function isAssertion(that) {
  return that instanceof Assertion;
}
function makeAssertion(name, ...params) {
  return (run) => {
    const assertion = makeAssertionDirect(name, ...params)((actual) => {
      const actualValue = actual();
      const result = () => run(() => actualValue) ? BA.success(makeAssertionValue.makeAssertionValue(assertion, () => actualValue, result)) : BA.failure(makeAssertionValue.makeAssertionValue(assertion, () => actualValue, result));
      return result();
    });
    return assertion;
  };
}
function makeAssertionDirect(name, ...params) {
  return (run) => new Assertion(() => R.function_(name, L.of(L.from(params))), run);
}
const isFalse = /* @__PURE__ */ makeAssertion("isFalse")((a) => !a());
const isEmptyString = /* @__PURE__ */ makeAssertion("isEmptyString")((a) => a().length === 0);
function equalTo(expected) {
  return makeAssertion("EqualTo", R.param(expected))((actual) => {
    const actualValue = actual();
    return ST.equals(expected, actualValue);
  });
}
function makeAssertionRec(name, ...params) {
  return (assertion) => {
    return (get, orElse = AD.asFailure) => {
      const resultAssertion = () => makeAssertionDirect(name, ...params)((a) => {
        const actualValue = a();
        return O.fold_(get(a), () => orElse(AD.makeAssertionData(resultAssertion(), actualValue)), (b) => {
          const innerResult = assertion.run(() => b);
          const result = () => BA.isSuccess(innerResult) ? BA.success(makeAssertionValue.makeAssertionValue(resultAssertion(), () => actualValue, result)) : BA.failure(makeAssertionValue.makeAssertionValue(resultAssertion(), () => b, () => innerResult));
          return result();
        });
      });
      return resultAssertion();
    };
  };
}
function hasProperty(name, proj, assertion) {
  return makeAssertionRec("hasField", R.param(R.quoted(name)), R.param(R.field(name)), R.param(assertion))(assertion)((actual) => {
    return O.some(proj(actual()));
  });
}
function and(self, that) {
  return new Assertion(() => R.infix(R.param(self), "&&", R.param(that)), (actual) => BA.and_(self.run(actual), that.run(actual)));
}
function or(self, that) {
  return new Assertion(() => R.infix(R.param(self), "||", R.param(that)), (actual) => BA.or_(self.run(actual), that.run(actual)));
}
module.exports = __toCommonJS(Assertion_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Assertion,
  and,
  equalTo,
  hasProperty,
  isAssertion,
  isEmptyString,
  isFalse,
  makeAssertion,
  makeAssertionDirect,
  makeAssertionRec,
  or
});
