var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var FibersPerTest_exports = {};
__export(FibersPerTest_exports, {
  fibersPerTest: () => fibersPerTest
});
var Chunk = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var SS = __toESM(require("../../Collections/Immutable/SortedSet/index.js"));
var T = __toESM(require("../../Effect/index.js"));
var E = __toESM(require("../../Either/index.js"));
var import_Fiber = require("../../Fiber/index.js");
var import_Function = require("../../Function/index.js");
var Supervisor = __toESM(require("../../Supervisor/index.js"));
var import_AtomicReference = require("../../Support/AtomicReference/index.js");
var Annotations = __toESM(require("../Annotations/index.js"));
var import_Int = require("../Int/index.js");
var import_TestAnnotation = require("../TestAnnotation/index.js");
function fibersPerTest(self) {
  const acquire = T.tap_(T.succeedWith(() => new import_AtomicReference.AtomicReference(SS.make((0, import_Fiber.runtimeOrd)()))), (ref) => Annotations.annotate(import_TestAnnotation.fibers, E.right(Chunk.single(ref))));
  const release = T.chain_(Annotations.get(import_TestAnnotation.fibers), (f) => {
    switch (f._tag) {
      case "Left":
        return T.unit;
      case "Right":
        return T.tap_(T.map_(T.map_(T.forEach_(f.right, (_) => T.succeedWith(() => _.get)), Chunk.reduce(SS.make((0, import_Fiber.runtimeOrd)()), SS.union_)), SS.size), (n) => Annotations.annotate(import_TestAnnotation.fibers, E.left((0, import_Int.Int)(n))));
    }
  });
  return T.bracket_(acquire, (ref) => T.chain_(Supervisor.fibersIn(ref), (supervisor) => T.supervised_(self, supervisor)), () => release);
}
module.exports = __toCommonJS(FibersPerTest_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fibersPerTest
});
