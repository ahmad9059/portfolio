var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var TestAnnotation_exports = {};
__export(TestAnnotation_exports, {
  TestAnnotation: () => TestAnnotation,
  fibers: () => fibers,
  location: () => location
});
var Chunk = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var List = __toESM(require("../../Collections/Immutable/List/index.js"));
var E = __toESM(require("../../Either/index.js"));
var St = __toESM(require("../../Structural/index.js"));
var import_Int = require("../Int/index.js");
class TestAnnotation {
  constructor(identifier, initial, combine) {
    this.identifier = identifier;
    this.initial = initial;
    this.combine = combine;
  }
  get [St.hashSym]() {
    return St.hash(this.identifier);
  }
  [St.equalsSym](that) {
    return that instanceof TestAnnotation && St.equals(this.identifier, that.identifier);
  }
}
const fibers = /* @__PURE__ */ new TestAnnotation("fibers", /* @__PURE__ */ E.leftW(0), compose);
function compose(left, right) {
  if (left._tag === "Left" && right._tag === "Left") {
    return E.left((0, import_Int.Int)(left.left + right.left));
  } else if (left._tag === "Right" && right._tag === "Right") {
    return E.right(Chunk.concat_(left.right, right.right));
  } else if (left._tag === "Right" && right._tag === "Left") {
    return E.left(right.left);
  } else {
    return E.right(right.right);
  }
}
const location = /* @__PURE__ */ new TestAnnotation("location", /* @__PURE__ */ List.empty(), List.concat_);
module.exports = __toCommonJS(TestAnnotation_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TestAnnotation,
  fibers,
  location
});
