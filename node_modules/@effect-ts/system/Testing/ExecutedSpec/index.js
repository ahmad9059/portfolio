var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var ExecutedSpec_exports = {};
__export(ExecutedSpec_exports, {
  ExecutedSpec: () => ExecutedSpec,
  ExecutedSpecCase: () => ExecutedSpecCase,
  ExecutedSpecCaseTypeId: () => ExecutedSpecCaseTypeId,
  ExecutedSuiteCase: () => ExecutedSuiteCase,
  ExecutedTestCase: () => ExecutedTestCase,
  SpecTypeId: () => SpecTypeId,
  concreteExecutedSpecCase: () => concreteExecutedSpecCase
});
var T = __toESM(require("../../Effect/index.js"));
var _a, _b;
const ExecutedSpecCaseTypeId = /* @__PURE__ */ Symbol.for("@effect-ts/system/Testing/ExecutedSpecCase");
class ExecutedSpecCase {
  constructor() {
    this[_a] = ExecutedSpecCaseTypeId;
  }
  map(f) {
    concreteExecutedSpecCase(this);
    switch (this._tag) {
      case "SuiteCase": {
        return new ExecutedSuiteCase(this.label, this.specs.map(f));
      }
      case "TestCase": {
        return new ExecutedTestCase(this.label, this.test, this.annotations);
      }
    }
  }
}
_a = ExecutedSpecCaseTypeId, T._E, T._A;
function concreteExecutedSpecCase(_) {
}
class ExecutedSuiteCase extends ExecutedSpecCase {
  constructor(label, specs) {
    super();
    this.label = label;
    this.specs = specs;
    this._tag = "SuiteCase";
  }
}
class ExecutedTestCase extends ExecutedSpecCase {
  constructor(label, test, annotations) {
    super();
    this.label = label;
    this.test = test;
    this.annotations = annotations;
    this._tag = "TestCase";
  }
}
const SpecTypeId = /* @__PURE__ */ Symbol.for("@effect-ts/system/Testing/Spec");
class ExecutedSpec {
  constructor(caseValue) {
    this.caseValue = caseValue;
    this[_b] = SpecTypeId;
  }
}
_b = SpecTypeId, T._E;
module.exports = __toCommonJS(ExecutedSpec_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ExecutedSpec,
  ExecutedSpecCase,
  ExecutedSpecCaseTypeId,
  ExecutedSuiteCase,
  ExecutedTestCase,
  SpecTypeId,
  concreteExecutedSpecCase
});
