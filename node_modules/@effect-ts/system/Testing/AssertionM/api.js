var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var api_exports = {};
__export(api_exports, {
  and: () => and,
  label: () => label,
  label_: () => label_,
  makeAssertionDirect: () => makeAssertionDirect,
  makeAssertionM: () => makeAssertionM,
  makeAssertionRecM: () => makeAssertionRecM,
  not: () => not,
  or: () => or
});
var L = __toESM(require("../../Collections/Immutable/List/index.js"));
var T = __toESM(require("../../Effect/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var AMD = __toESM(require("../AssertionMData/index.js"));
var makeAssertionValue = __toESM(require("../AssertionValue/makeAssertionValue.js"));
var BA = __toESM(require("../BoolAlgebra/index.js"));
var BAM = __toESM(require("../BoolAlgebraM/index.js"));
var R = __toESM(require("../Render/index.js"));
var import_apply = require("./apply.js");
var import_AssertionM = require("./AssertionM.js");
function and(self, that) {
  return new class extends import_AssertionM.AssertionM {
  }(() => R.infix(R.param(self), "&&", R.param(that)), (actual) => BAM.and_(self.runM(actual), that().runM(actual)));
}
function or(self, that) {
  return new class extends import_AssertionM.AssertionM {
  }(() => R.infix(R.param(self), "||", R.param(that)), (actual) => BAM.or_(self.runM(actual), that().runM(actual)));
}
function label_(self, str) {
  return (0, import_apply.apply)(() => R.infix(R.param(self), "??", R.param(R.quoted(str))), self.runM);
}
function label(str) {
  return (self) => label_(self, str);
}
function makeAssertionDirect(name, ...params) {
  return (run) => {
    return (0, import_apply.apply)(() => R.function_(name, L.of(L.from(params))), run);
  };
}
function makeAssertionM(name, ...params) {
  return (run) => {
    const assertion = makeAssertionDirect(name, ...params)((actual) => {
      const actualValue = actual();
      return BAM.chain((p) => {
        const result = () => p ? BA.success(makeAssertionValue.makeAssertionValue(assertion, () => actualValue, result)) : BA.failure(makeAssertionValue.makeAssertionValue(assertion, () => actualValue, result));
        return new BAM.BoolAlgebraM(T.succeed(result()));
      })(BAM.fromEffect(run(() => actualValue)));
    });
    return assertion;
  };
}
function makeAssertionRecM(name, ...params) {
  return (assertion) => (get, orElse = AMD.asFailureM) => {
    const resultAssertion = () => makeAssertionDirect(name, ...params)((a) => {
      const actualValue = a();
      return BAM.chain((p) => {
        return O.fold_(p, () => orElse(AMD.makeAssertionMData(resultAssertion(), () => actualValue)), (b) => {
          return new BAM.BoolAlgebraM(T.map_(assertion.runM(() => b).run, (p2) => {
            const result = () => BA.isSuccess(p2) ? BA.success(makeAssertionValue.makeAssertionValue(assertion, () => actualValue, result)) : BA.failure(makeAssertionValue.makeAssertionValue(assertion, () => b, () => p2));
            return result();
          }));
        });
      })(BAM.fromEffect(get(() => actualValue)));
    });
    return resultAssertion();
  };
}
function not(assertion) {
  return makeAssertionDirect("not", R.param(assertion))((_) => BAM.not(assertion.runM(_)));
}
module.exports = __toCommonJS(api_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  and,
  label,
  label_,
  makeAssertionDirect,
  makeAssertionM,
  makeAssertionRecM,
  not,
  or
});
