var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var BoolAlgebraM_exports = {};
__export(BoolAlgebraM_exports, {
  BoolAlgebraM: () => BoolAlgebraM,
  and: () => and,
  and_: () => and_,
  as: () => as,
  as_: () => as_,
  chain: () => chain,
  chain_: () => chain_,
  failure: () => failure,
  fromEffect: () => fromEffect,
  iff: () => iff,
  iff_: () => iff_,
  implies: () => implies,
  implies_: () => implies_,
  isSuccess: () => isSuccess,
  map_: () => map_,
  not: () => not,
  or: () => or,
  or_: () => or_,
  success: () => success
});
var T = __toESM(require("../../Effect/index.js"));
var import_Function = require("../../Function/index.js");
var BA = __toESM(require("../BoolAlgebra/index.js"));
class BoolAlgebraM {
  constructor(run) {
    this.run = run;
  }
}
T._R, T._E, T._A;
function and_(self, that) {
  return new BoolAlgebraM(T.zipWith_(self.run, that.run, BA.and_));
}
function and(that) {
  return (self) => and_(self, that);
}
function or_(self, that) {
  return new BoolAlgebraM(T.zipWith_(self.run, that.run, BA.or_));
}
function or(that) {
  return (self) => or_(self, that);
}
function implies_(self, that) {
  return new BoolAlgebraM(T.zipWith_(self.run, that.run, BA.implies_));
}
function implies(that) {
  return (self) => implies_(self, that);
}
function iff_(self, that) {
  return new BoolAlgebraM(T.zipWith_(self.run, that.run, BA.iff_));
}
function iff(that) {
  return (self) => iff_(self, that);
}
function not(self) {
  return new BoolAlgebraM(T.map_(self.run, BA.not));
}
function as_(self, b) {
  return map_(self, (_) => b);
}
function as(b) {
  return (self) => as_(self, b);
}
function chain_(self, f) {
  return new BoolAlgebraM(T.chain_(self.run, BA.chainM((_) => f(_).run)));
}
function chain(f) {
  return (self) => chain_(self, f);
}
function isSuccess(self) {
  return T.map_(self.run, BA.isSuccess);
}
function map_(self, f) {
  return chain_(self, (0, import_Function.flow)(f, success));
}
function failure(a) {
  return new BoolAlgebraM(T.succeed(BA.failure(a)));
}
function fromEffect(effect) {
  return new BoolAlgebraM(T.map_(effect, BA.success));
}
function success(a) {
  return new BoolAlgebraM(T.succeed(BA.success(a)));
}
module.exports = __toCommonJS(BoolAlgebraM_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BoolAlgebraM,
  and,
  and_,
  as,
  as_,
  chain,
  chain_,
  failure,
  fromEffect,
  iff,
  iff_,
  implies,
  implies_,
  isSuccess,
  map_,
  not,
  or,
  or_,
  success
});
