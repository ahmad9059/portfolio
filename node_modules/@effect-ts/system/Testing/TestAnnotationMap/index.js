var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var TestAnnotationMap_exports = {};
__export(TestAnnotationMap_exports, {
  TestAnnotationMap: () => TestAnnotationMap,
  annotate: () => annotate,
  concat: () => concat,
  get: () => get,
  overwrite: () => overwrite,
  update: () => update
});
var HashMap = __toESM(require("../../Collections/Immutable/HashMap/index.js"));
var L = __toESM(require("../../Collections/Immutable/List/index.js"));
var O = __toESM(require("../../Option/index.js"));
class TestAnnotationMap {
  constructor(map) {
    this.map = map;
  }
}
TestAnnotationMap.empty = /* @__PURE__ */ new TestAnnotationMap(/* @__PURE__ */ HashMap.make());
function concat(self, that) {
  const l = L.from(self.map);
  const r = L.from(that.map);
  return new TestAnnotationMap(L.reduce_(L.concat_(l, r), TestAnnotationMap.empty.map, (acc, [key, value]) => HashMap.set_(acc, key, O.fold_(HashMap.get_(acc, key), () => value, (x) => key.combine(x, value)))));
}
function get(key) {
  return (tam) => O.fold_(HashMap.get_(tam.map, key), () => key.initial, (a) => a);
}
function overwrite(key, value) {
  return (tam) => new TestAnnotationMap(HashMap.set_(tam.map, key, value));
}
function update(key, f) {
  return (tam) => overwrite(key, f(get(key)(tam)))(tam);
}
function annotate(key, value) {
  return (tam) => update(key, (_) => key.combine(_, value))(tam);
}
module.exports = __toCommonJS(TestAnnotationMap_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TestAnnotationMap,
  annotate,
  concat,
  get,
  overwrite,
  update
});
