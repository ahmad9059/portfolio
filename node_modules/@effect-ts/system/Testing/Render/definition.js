var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var definition_exports = {};
__export(definition_exports, {
  AssertionM: () => AssertionM,
  AssertionMTypeId: () => AssertionMTypeId,
  FunctionTypeId: () => FunctionTypeId,
  Function_: () => Function_,
  Infix: () => Infix,
  InfixTypeId: () => InfixTypeId,
  Value: () => Value,
  ValueTypeId: () => ValueTypeId
});
var L = __toESM(require("../../Collections/Immutable/List/index.js"));
const AssertionMTypeId = /* @__PURE__ */ Symbol();
class AssertionM {
  constructor(assertion) {
    this.assertion = assertion;
    this._typeId = AssertionMTypeId;
  }
  toString() {
    return this.assertion.toString();
  }
}
const ValueTypeId = /* @__PURE__ */ Symbol();
class Value {
  constructor(value) {
    this.value = value;
    this._typeId = ValueTypeId;
  }
  toString() {
    return this.value.toString();
  }
}
const FunctionTypeId = /* @__PURE__ */ Symbol();
class Function_ {
  constructor(name, paramLists) {
    this.name = name;
    this.paramLists = paramLists;
    this._typeId = FunctionTypeId;
  }
  toString() {
    const params = L.join_(L.map_(this.paramLists, (l) => L.join_(L.map_(l, (x) => x.toString()), ", ")), ", ");
    return `${this.name}(${params})`;
  }
}
const InfixTypeId = /* @__PURE__ */ Symbol();
class Infix {
  constructor(left, op, right) {
    this.left = left;
    this.op = op;
    this.right = right;
    this._typeId = InfixTypeId;
  }
  toString() {
    return `(${this.left.toString()} ${this.op} ${this.right.toString()})`;
  }
}
module.exports = __toCommonJS(definition_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AssertionM,
  AssertionMTypeId,
  FunctionTypeId,
  Function_,
  Infix,
  InfixTypeId,
  Value,
  ValueTypeId
});
