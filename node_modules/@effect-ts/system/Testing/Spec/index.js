var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Spec_exports = {};
__export(Spec_exports, {
  Spec: () => Spec,
  SpecCase: () => SpecCase,
  SpecCaseTypeId: () => SpecCaseTypeId,
  SpecTypeId: () => SpecTypeId,
  SuiteCase: () => SuiteCase,
  TestCase: () => TestCase,
  annotate: () => annotate,
  annotated: () => annotated,
  concreteSpecCase: () => concreteSpecCase,
  foldM: () => foldM,
  forEachExec: () => forEachExec,
  provideLayer: () => provideLayer,
  suite: () => suite,
  test: () => test,
  transform: () => transform
});
var Chunk = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Tuple = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../Effect/index.js"));
var import_Function = require("../../Function/index.js");
var M = __toESM(require("../../Managed/index.js"));
var O = __toESM(require("../../Option/index.js"));
var Annotations = __toESM(require("../Annotations/index.js"));
var TAM = __toESM(require("../TestAnnotationMap/index.js"));
var _a, _b;
const SpecCaseTypeId = /* @__PURE__ */ Symbol.for("@effect-ts/system/Testing/SpecCase");
class SpecCase {
  constructor() {
    this[_a] = SpecCaseTypeId;
  }
  map(f) {
    concreteSpecCase(this);
    switch (this._tag) {
      case "SuiteCase": {
        return new SuiteCase(this.label, M.map_(this.specs, (_) => _.map(f)), this.exec);
      }
      case "TestCase": {
        return new TestCase(this.label, this.test, this.annotations);
      }
    }
  }
}
_a = SpecCaseTypeId, T._R, T._E, T._T, T._A;
function concreteSpecCase(_) {
}
class SuiteCase extends SpecCase {
  constructor(label, specs, exec) {
    super();
    this.label = label;
    this.specs = specs;
    this.exec = exec;
    this._tag = "SuiteCase";
  }
}
class TestCase extends SpecCase {
  constructor(label, test2, annotations) {
    super();
    this.label = label;
    this.test = test2;
    this.annotations = annotations;
    this._tag = "TestCase";
  }
}
const SpecTypeId = /* @__PURE__ */ Symbol.for("@effect-ts/system/Testing/Spec");
class Spec {
  constructor(caseValue) {
    this.caseValue = caseValue;
    this[_b] = SpecTypeId;
  }
}
_b = SpecTypeId, T._R, T._E, T._T;
function suite(label, specs, exec) {
  return new Spec(new SuiteCase(label, specs, exec));
}
function test(label, test2, annotations) {
  return new Spec(new TestCase(label, test2, annotations));
}
function transform(f) {
  return (spec) => {
    concreteSpecCase(spec.caseValue);
    switch (spec.caseValue._tag) {
      case "SuiteCase": {
        return new Spec(f(new SuiteCase(spec.caseValue.label, M.map_(spec.caseValue.specs, (_) => _.map(transform(f))), spec.caseValue.exec)));
      }
      case "TestCase": {
        return new Spec(f(spec.caseValue));
      }
    }
  };
}
function annotate(key, value) {
  return (self) => transform((specCase) => {
    concreteSpecCase(specCase);
    switch (specCase._tag) {
      case "SuiteCase": {
        return specCase;
      }
      case "TestCase": {
        return new TestCase(specCase.label, specCase.test, TAM.annotate(key, value)(specCase.annotations));
      }
    }
  })(self);
}
function annotated(self) {
  return transform((specCase) => {
    concreteSpecCase(specCase);
    switch (specCase._tag) {
      case "SuiteCase": {
        return new SuiteCase(specCase.label, M.mapError_(specCase.specs, (_) => Tuple.tuple(_, TAM.TestAnnotationMap.empty)), specCase.exec);
      }
      case "TestCase": {
        return new TestCase(specCase.label, Annotations.withAnnotation(specCase.test), specCase.annotations);
      }
    }
  })(self);
}
function provideLayer(layer) {
  return (self) => transform((_) => {
    concreteSpecCase(_);
    switch (_._tag) {
      case "SuiteCase":
        return new SuiteCase(_.label, M.provideLayer_(_.specs, layer), _.exec);
      case "TestCase":
        return new TestCase(_.label, T.provideLayer_(_.test, layer), _.annotations);
    }
  })(self);
}
function forEachExec(defExec, failure, success) {
  return (self) => foldM(defExec)((_) => {
    concreteSpecCase(_);
    switch (_._tag) {
      case "SuiteCase": {
        const v = _;
        return M.foldCause_(v.specs, (e) => test(v.label, failure(e), TAM.TestAnnotationMap.empty), (t) => suite(v.label, M.succeed(t), v.exec));
      }
      case "TestCase": {
        const v = _;
        return T.toManaged(T.foldCause_(v.test, (e) => test(v.label, failure(e), v.annotations), (e) => test(v.label, success(e), v.annotations)));
      }
    }
  })(self);
}
function foldM(defExec) {
  return (f) => (self) => {
    concreteSpecCase(self.caseValue);
    switch (self.caseValue._tag) {
      case "SuiteCase": {
        const v = self.caseValue;
        return M.foldCauseM_(v.specs, (c) => f(new SuiteCase(v.label, M.halt(c), v.exec)), (_) => M.chain_(M.forEachExec_(_, O.getOrElse_(v.exec, () => defExec), (s) => M.release(foldM(defExec)(f)(s))), (z) => f(new SuiteCase(v.label, M.succeed(Chunk.toArray(z)), v.exec))));
      }
      case "TestCase":
        return f(self.caseValue);
    }
  };
}
module.exports = __toCommonJS(Spec_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Spec,
  SpecCase,
  SpecCaseTypeId,
  SpecTypeId,
  SuiteCase,
  TestCase,
  annotate,
  annotated,
  concreteSpecCase,
  foldM,
  forEachExec,
  provideLayer,
  suite,
  test,
  transform
});
