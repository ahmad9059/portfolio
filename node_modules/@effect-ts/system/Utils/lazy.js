var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var lazy_exports = {};
__export(lazy_exports, {
  LazyGetter: () => LazyGetter
});
function decorateNew(inp, setProto, makeNonConfigurable, resultSelector) {
  const out = Object.assign({}, inp);
  if (out.descriptor) {
    out.descriptor = Object.assign({}, out.descriptor);
  }
  const actualDesc = out.descriptor || out;
  const originalMethod = validateAndExtractMethodFromDescriptor(actualDesc);
  const isStatic = inp.placement === "static";
  actualDesc.get = function() {
    return getterCommon(isStatic ? this : Object.getPrototypeOf(this), out.key, isStatic, !!actualDesc.enumerable, originalMethod, this, arguments, setProto, makeNonConfigurable, resultSelector);
  };
  return out;
}
function decorateLegacy(target, key, descriptor, setProto, makeNonConfigurable, resultSelector) {
  if (!descriptor) {
    descriptor = Object.getOwnPropertyDescriptor(target, key);
    if (!descriptor) {
      const e = new Error("@LazyGetter is unable to determine the property descriptor");
      e.$target = target;
      e.$key = key;
      throw e;
    }
  }
  const originalMethod = validateAndExtractMethodFromDescriptor(descriptor);
  return Object.assign({}, descriptor, {
    get() {
      return getterCommon(target, key, Object.getPrototypeOf(target) === Function.prototype, !!descriptor.enumerable, originalMethod, this, arguments, setProto, makeNonConfigurable, resultSelector);
    }
  });
}
function defaultFilter() {
  return true;
}
function validateAndExtractMethodFromDescriptor(desc) {
  const originalMethod = desc.get;
  if (!originalMethod) {
    throw new Error("@LazyGetter can only decorate getters!");
  } else if (!desc.configurable) {
    throw new Error("@LazyGetter target must be configurable");
  }
  return originalMethod;
}
function getterCommon(target, key, isStatic, enumerable, originalMethod, thisArg, args, setProto, makeNonConfigurable, resultSelector) {
  const value = originalMethod.apply(thisArg, args);
  if (resultSelector(value)) {
    const newDescriptor = {
      configurable: !makeNonConfigurable,
      enumerable,
      value
    };
    if (isStatic || setProto) {
      Object.defineProperty(target, key, newDescriptor);
    }
    if (!isStatic) {
      Object.defineProperty(thisArg, key, newDescriptor);
    }
  }
  return value;
}
function LazyGetter(setProto = false, makeNonConfigurable = false, resultSelector = defaultFilter) {
  let desc;
  let prop;
  let args = null;
  let isLegacy;
  function decorator(targetOrDesc, key, descriptor) {
    args = arguments;
    if (key === void 0) {
      if (typeof desc === "undefined") {
        isLegacy = false;
        prop = targetOrDesc.key;
        desc = Object.assign({}, targetOrDesc.descriptor || targetOrDesc);
      }
      return decorateNew(targetOrDesc, setProto, makeNonConfigurable, resultSelector);
    } else {
      if (typeof desc === "undefined") {
        isLegacy = true;
        prop = key;
        desc = Object.assign({}, descriptor || Object.getOwnPropertyDescriptor(targetOrDesc, key));
      }
      return decorateLegacy(targetOrDesc, key, descriptor, setProto, makeNonConfigurable, resultSelector);
    }
  }
  decorator.reset = setProto ? thrower : (on) => {
    if (!on) {
      throw new Error("Unable to restore descriptor on an undefined target");
    }
    if (!desc) {
      throw new Error("Unable to restore descriptor. Did you remember to apply your decorator to a method?");
    }
    Object.defineProperty(on, prop, desc);
    const ret = decorator.apply(null, args);
    Object.defineProperty(on, prop, isLegacy ? ret : ret.descriptor || ret);
  };
  return decorator;
}
function thrower() {
  throw new Error("This decoration modifies the class prototype and cannot be reset.");
}
module.exports = __toCommonJS(lazy_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LazyGetter
});
