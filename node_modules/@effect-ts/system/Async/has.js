var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var has_exports = {};
__export(has_exports, {
  accessService: () => accessService,
  accessServiceM: () => accessServiceM,
  accessServices: () => accessServices,
  accessServicesM: () => accessServicesM,
  accessServicesT: () => accessServicesT,
  accessServicesTM: () => accessServicesTM,
  provideService: () => provideService,
  provideServiceM: () => provideServiceM,
  replaceService: () => replaceService,
  replaceServiceM: () => replaceServiceM,
  replaceServiceM_: () => replaceServiceM_,
  replaceService_: () => replaceService_,
  service: () => service
});
var A = __toESM(require("../Collections/Immutable/Array/index.js"));
var R = __toESM(require("../Collections/Immutable/Dictionary/index.js"));
var import_Has = require("../Has/index.js");
var As = __toESM(require("./core.js"));
function accessServicesM(s) {
  return (f) => As.accessM((r) => f(R.map_(s, (v) => r[v.key])));
}
const accessServicesTM = (...s) => (f) => As.accessM((r) => f(...A.map_(s, (v) => r[v.key])));
function accessServicesT(...s) {
  return (f) => As.access((r) => f(...A.map_(s, (v) => r[v.key])));
}
function accessServices(s) {
  return (f) => As.access((r) => f(R.map_(s, (v) => r[v.key])));
}
function accessServiceM(s) {
  return (f) => As.accessM((r) => f(r[s.key]));
}
function accessService(s) {
  return (f) => accessServiceM(s)((a) => As.succeed(f(a)));
}
function service(s) {
  return accessServiceM(s)((a) => As.succeed(a));
}
function provideServiceM(_) {
  return (f) => (ma) => As.accessM((r) => As.chain_(f, (t) => As.provideAll_(ma, (0, import_Has.mergeEnvironments)(_, r, t))));
}
function provideService(_) {
  return (f) => (ma) => provideServiceM(_)(As.succeed(f))(ma);
}
function replaceServiceM(_, f) {
  return (ma) => accessServiceM(_)((t) => provideServiceM(_)(f(t))(ma));
}
function replaceServiceM_(ma, _, f) {
  return accessServiceM(_)((t) => provideServiceM(_)(f(t))(ma));
}
function replaceService(_, f) {
  return (ma) => accessServiceM(_)((t) => provideServiceM(_)(As.succeed(f(t)))(ma));
}
function replaceService_(ma, _, f) {
  return accessServiceM(_)((t) => provideServiceM(_)(As.succeed(f(t)))(ma));
}
module.exports = __toCommonJS(has_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  accessService,
  accessServiceM,
  accessServices,
  accessServicesM,
  accessServicesT,
  accessServicesTM,
  provideService,
  provideServiceM,
  replaceService,
  replaceServiceM,
  replaceServiceM_,
  replaceService_,
  service
});
