var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Push_exports = {};
__export(Push_exports, {
  emit: () => emit,
  fail: () => fail,
  halt: () => halt,
  more: () => more,
  restartable: () => restartable
});
var import_Operator = require("../../Operator/index.js");
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var E = __toESM(require("../../Either/index.js"));
var import_Function = require("../../Function/index.js");
var T = __toESM(require("../_internal/effect.js"));
var M = __toESM(require("../_internal/managed.js"));
var R = __toESM(require("../_internal/ref.js"));
function emit(z, leftover) {
  return T.fail(Tp.tuple(E.right(z), leftover));
}
function fail(e, leftover) {
  return T.fail(Tp.tuple(E.left(e), leftover));
}
function halt(c) {
  return T.mapError_(T.halt(c), (e) => Tp.tuple(E.left(e), A.empty()));
}
const more = T.unit;
function restartable(sink) {
  return M.map_(M.bind_(M.bind_(M.bind_(M.do, "switchSink", () => M.switchable()), "initialSink", ({
    switchSink
  }) => T.toManaged(switchSink(sink))), "currSink", ({
    initialSink
  }) => T.toManaged(R.makeRef(initialSink))), ({
    currSink,
    switchSink
  }) => {
    const restart = T.chain_(switchSink(sink), currSink.set);
    const newPush = (input) => T.chain_(currSink.get, (f) => f(input));
    return Tp.tuple(newPush, restart);
  });
}
module.exports = __toCommonJS(Push_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  emit,
  fail,
  halt,
  more,
  restartable
});
