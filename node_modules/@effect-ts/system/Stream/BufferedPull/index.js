var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var BufferedPull_exports = {};
__export(BufferedPull_exports, {
  BufferedPull: () => BufferedPull,
  ifNotDone: () => ifNotDone,
  ifNotDone_: () => ifNotDone_,
  make: () => make,
  pullChunk: () => pullChunk,
  pullElement: () => pullElement,
  update: () => update
});
var import_Operator = require("../../Operator/index.js");
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var R = __toESM(require("../_internal/ref.js"));
var Pull = __toESM(require("../Pull/index.js"));
class BufferedPull {
  constructor(upstream, done, cursor) {
    this.upstream = upstream;
    this.done = done;
    this.cursor = cursor;
  }
}
function ifNotDone_(self, fa) {
  return T.chain_(self.done.get, (b) => b ? T.fail(O.none) : fa);
}
function ifNotDone(fa) {
  return (self) => ifNotDone_(self, fa);
}
function update(self) {
  return ifNotDone_(self, T.foldM_(self.upstream, O.fold(() => T.chain_(self.done.set(true), () => Pull.end), (e) => Pull.fail(e)), (a) => self.cursor.set(Tp.tuple(a, 0))));
}
function pullElement(self) {
  return ifNotDone_(self, T.flatten(R.modify_(self.cursor, ({
    tuple: [c, i]
  }) => {
    if (i >= A.size(c)) {
      return Tp.tuple(T.chain_(update(self), () => pullElement(self)), Tp.tuple(A.empty(), 0));
    } else {
      return Tp.tuple(T.succeed(A.unsafeGet_(c, i)), Tp.tuple(c, i + 1));
    }
  })));
}
function pullChunk(self) {
  return ifNotDone_(self, T.flatten(R.modify_(self.cursor, ({
    tuple: [chunk, idx]
  }) => {
    if (idx >= A.size(chunk)) {
      return Tp.tuple(T.chain_(update(self), () => pullChunk(self)), Tp.tuple(A.empty(), 0));
    } else {
      return Tp.tuple(T.succeed(A.drop_(chunk, idx)), Tp.tuple(A.empty(), 0));
    }
  })));
}
function make(pull) {
  return T.map_(T.bind_(T.bind_(T.do, "done", () => R.makeRef(false)), "cursor", () => R.makeRef(Tp.tuple(A.empty(), 0))), ({
    cursor,
    done
  }) => new BufferedPull(pull, done, cursor));
}
module.exports = __toCommonJS(BufferedPull_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BufferedPull,
  ifNotDone,
  ifNotDone_,
  make,
  pullChunk,
  pullElement,
  update
});
