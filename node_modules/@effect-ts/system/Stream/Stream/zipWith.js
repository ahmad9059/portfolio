var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipWith_exports = {};
__export(zipWith_exports, {
  zipWith: () => zipWith,
  zipWith_: () => zipWith_
});
var C = __toESM(require("../../Cause/index.js"));
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var E = __toESM(require("../../Either/index.js"));
var Ex = __toESM(require("../../Exit/api.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var import_utils = require("../_internal/utils.js");
var import_combineChunks = require("./combineChunks.js");
function zipWith_(self, that, f) {
  const handleSuccess = (leftUpd, rightUpd, excess) => {
    const [leftExcess, rightExcess] = E.fold_(excess, (l) => (0, import_Function.tuple)(l, A.empty()), (r) => (0, import_Function.tuple)(A.empty(), r));
    const [left, right] = [O.fold_(leftUpd, () => leftExcess, (upd) => A.concat_(leftExcess, upd)), O.fold_(rightUpd, () => rightExcess, (upd) => A.concat_(rightExcess, upd))];
    const [emit, newExcess] = (0, import_utils.zipChunks_)(left, right, f);
    if (O.isSome(leftUpd) && O.isSome(rightUpd)) {
      return Ex.succeed(Tp.tuple(emit, {
        _tag: "Running",
        excess: newExcess
      }));
    } else if (O.isNone(leftUpd) && O.isNone(rightUpd)) {
      return Ex.fail(O.none);
    } else {
      return Ex.succeed(Tp.tuple(emit, E.fold_(newExcess, (l) => !A.isEmpty(l) ? {
        _tag: "LeftDone",
        excessL: l
      } : {
        _tag: "End"
      }, (r) => !A.isEmpty(r) ? {
        _tag: "RightDone",
        excessR: r
      } : {
        _tag: "End"
      })));
    }
  };
  return (0, import_combineChunks.combineChunks_)(self, that, {
    _tag: "Running",
    excess: E.left(A.empty())
  }, (st, p1, p2) => {
    switch (st._tag) {
      case "End": {
        return T.succeed(Ex.fail(O.none));
      }
      case "Running": {
        return T.catchAllCause_(T.zipWithPar(T.optional(p2), (l, r) => handleSuccess(l, r, st.excess))(T.optional(p1)), (e) => T.succeed(Ex.halt(C.map(O.some)(e))));
      }
      case "LeftDone": {
        return T.catchAllCause_(T.map_(T.optional(p2), (r) => handleSuccess(O.none, r, E.left(st.excessL))), (e) => T.succeed(Ex.halt(C.map(O.some)(e))));
      }
      case "RightDone": {
        return T.catchAllCause_(T.map_(T.optional(p1), (l) => handleSuccess(l, O.none, E.right(st.excessR))), (e) => T.succeed(Ex.halt(C.map(O.some)(e))));
      }
    }
  });
}
function zipWith(that, f) {
  return (self) => zipWith_(self, that, f);
}
module.exports = __toCommonJS(zipWith_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipWith,
  zipWith_
});
