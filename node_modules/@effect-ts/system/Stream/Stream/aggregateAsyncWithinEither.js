var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var aggregateAsyncWithinEither_exports = {};
__export(aggregateAsyncWithinEither_exports, {
  aggregateAsyncWithinEither: () => aggregateAsyncWithinEither,
  aggregateAsyncWithinEither_: () => aggregateAsyncWithinEither_
});
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var E = __toESM(require("../../Either/index.js"));
var Ex = __toESM(require("../../Exit/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var SC = __toESM(require("../../Schedule/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var F = __toESM(require("../_internal/fiber.js"));
var M = __toESM(require("../_internal/managed.js"));
var R = __toESM(require("../_internal/ref.js"));
var Handoff = __toESM(require("../Handoff/index.js"));
var Take = __toESM(require("../Take/index.js"));
var import_definitions = require("./definitions.js");
var import_flattenTake = require("./flattenTake.js");
function aggregateAsyncWithinEither(transducer, schedule) {
  return (self) => aggregateAsyncWithinEither_(self, transducer, schedule);
}
function aggregateAsyncWithinEither_(self, transducer, schedule) {
  return (0, import_flattenTake.flattenTake)(((m) => new import_definitions.Stream(m))(M.map_(M.tap_(M.let_(M.let_(M.bind_(M.bind_(M.bind_(M.bind_(M.bind_(M.bind_(M.bind_(M.do, "pull", () => self.proc), "push", () => transducer.push), "handoff", () => M.fromEffect(Handoff.make())), "raceNextTime", () => R.makeManagedRef(false)), "waitingFiber", () => R.makeManagedRef(O.none)), "sdriver", () => M.fromEffect(SC.driver(schedule))), "lastChunk", () => R.makeManagedRef(A.empty())), "producer", ({
    handoff,
    pull
  }) => T.repeatWhileM_(Take.fromPull(pull), (take) => T.as_(Handoff.offer_(handoff, take), Ex.succeeded(take)))), "consumer", ({
    handoff,
    lastChunk,
    push,
    raceNextTime,
    sdriver,
    waitingFiber
  }) => {
    const updateSchedule = T.fold_(T.chain_(lastChunk.get, sdriver.next), (_) => O.none, O.some);
    const waitForProducer = T.chain_(R.getAndSet_(waitingFiber, O.none), O.fold(() => Handoff.take(handoff), (fiber) => F.join(fiber)));
    return T.onInterrupt_(T.chain_(raceNextTime.get, (x) => go(waitForProducer, push, lastChunk, raceNextTime, updateSchedule, sdriver, waitingFiber, x)), (_) => T.chain_(waitingFiber.get, (x) => O.getOrElse_(O.map_(x, F.interrupt), () => T.unit)));
  }), ({
    producer
  }) => T.forkManaged(producer)), ({
    consumer
  }) => consumer)));
}
function go(waitForProducer, push, lastChunk, raceNextTime, updateSchedule, sdriver, waitingFiber, race) {
  if (!race) {
    return T.zipLeft_(T.chain_(waitForProducer, (x) => handleTake(push, lastChunk, x)), raceNextTime.set(true));
  } else {
    return T.raceWith_(updateSchedule, waitForProducer, (scheduleDone, producerWaiting) => T.chain_(T.done(scheduleDone), O.fold(() => T.map_(T.tap_(T.tap_(T.bind_(T.let_(T.bind_(T.do, "lastQ", () => T.zipLeft_(T.zipRight_(lastChunk.set(A.empty()), T.orDie(sdriver.last)), sdriver.reset)), "scheduleResult", ({
      lastQ
    }) => Ex.succeed(A.single(E.left(lastQ)))), "take", () => T.tap_(Take.fromPull(T.asSomeError(push(O.none))), (x) => updateLastChunk(lastChunk, x))), () => raceNextTime.set(false)), () => waitingFiber.set(O.some(producerWaiting))), ({
      scheduleResult,
      take
    }) => A.from([scheduleResult, Take.map_(take, E.right)])), (_) => T.map_(T.tap_(T.tap_(T.bind_(T.do, "ps", () => T.tap_(Take.fromPull(T.asSomeError(push(O.none))), (x) => updateLastChunk(lastChunk, x))), () => raceNextTime.set(false)), () => waitingFiber.set(O.some(producerWaiting))), ({
      ps
    }) => A.from([Take.map_(ps, E.right)])))), (producerDone, scheduleWaiting) => T.zipRight_(F.interrupt(scheduleWaiting), handleTake(push, lastChunk, Ex.flatten(producerDone))));
  }
}
function handleTake(push, lastChunk, take) {
  return T.mapError_(Take.foldM(() => T.map_(push(O.none), (ps) => A.from([Take.chunk(A.map_(ps, E.right)), Take.end])), T.halt, (os) => T.chain_(Take.fromPull(T.asSomeError(push(O.some(os)))), (take2) => T.as_(updateLastChunk(lastChunk, take2), A.single(Take.map_(take2, E.right)))))(take), O.some);
}
function updateLastChunk(lastChunk, take) {
  return Take.tap_(take, lastChunk.set);
}
module.exports = __toCommonJS(aggregateAsyncWithinEither_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  aggregateAsyncWithinEither,
  aggregateAsyncWithinEither_
});
