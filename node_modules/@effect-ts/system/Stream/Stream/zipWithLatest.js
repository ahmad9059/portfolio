var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipWithLatest_exports = {};
__export(zipWithLatest_exports, {
  zipWithLatest: () => zipWithLatest,
  zipWithLatest_: () => zipWithLatest_
});
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var E = __toESM(require("../../Either/index.js"));
var import_Function = require("../../Function/index.js");
var T = __toESM(require("../_internal/effect.js"));
var F = __toESM(require("../_internal/fiber.js"));
var M = __toESM(require("../_internal/managed.js"));
var Ref = __toESM(require("../_internal/ref.js"));
var chain = __toESM(require("./chain.js"));
var concat = __toESM(require("./concat.js"));
var import_definitions = require("./definitions.js");
var import_fromChunk = require("./fromChunk.js");
var import_fromEffect = require("./fromEffect.js");
var import_fromEffectOption = require("./fromEffectOption.js");
var mapm = __toESM(require("./mapM.js"));
var merge = __toESM(require("./merge.js"));
var import_repeatEffectOption = require("./repeatEffectOption.js");
function pullNonEmpty(pull) {
  return T.chain_(pull, (chunk) => A.isEmpty(chunk) ? pullNonEmpty(pull) : T.succeed(chunk));
}
function zipWithLatest_(self, that, f) {
  return new import_definitions.Stream(M.map_(M.bind_(M.bind_(M.bind_(M.do, "left", () => M.map_(self.proc, pullNonEmpty)), "right", () => M.map_(that.proc, pullNonEmpty)), "pull", ({
    left,
    right
  }) => chain.chain(({
    tuple: [l, r, leftFirst]
  }) => chain.chain((latest) => concat.concat(chain.chain(import_fromChunk.fromChunk)(mapm.mapM(E.fold((leftChunk) => Ref.modify_(latest, ({
    tuple: [_, rightLatest]
  }) => Tp.tuple(A.map_(leftChunk, (_2) => f(_2, rightLatest)), Tp.tuple(A.unsafeGet_(leftChunk, A.size(leftChunk) - 1), rightLatest))), (rightChunk) => Ref.modify_(latest, ({
    tuple: [leftLatest, _]
  }) => Tp.tuple(A.map_(rightChunk, (_2) => f(leftLatest, _2)), Tp.tuple(leftLatest, A.unsafeGet_(rightChunk, A.size(rightChunk) - 1))))))(merge.mergeEither_((0, import_repeatEffectOption.repeatEffectOption)(left), (0, import_repeatEffectOption.repeatEffectOption)(right)))))((0, import_fromChunk.fromChunk)(leftFirst ? A.map_(r, (_) => f(A.unsafeGet_(l, A.size(l) - 1), _)) : A.map_(l, (_) => f(_, A.unsafeGet_(r, A.size(r) - 1))))))((0, import_fromEffect.fromEffect)(Ref.makeRef(Tp.tuple(A.unsafeGet_(l, A.size(l) - 1), A.unsafeGet_(r, A.size(r) - 1))))))((0, import_fromEffectOption.fromEffectOption)(T.raceWith_(left, right, (leftDone, rightFiber) => T.zipWith_(T.done(leftDone), F.join(rightFiber), (l, r) => Tp.tuple(l, r, true)), (rightDone, leftFiber) => T.zipWith_(T.done(rightDone), F.join(leftFiber), (r, l) => Tp.tuple(l, r, false))))).proc), ({
    pull
  }) => pull));
}
function zipWithLatest(that, f) {
  return (self) => zipWithLatest_(self, that, f);
}
module.exports = __toCommonJS(zipWithLatest_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipWithLatest,
  zipWithLatest_
});
