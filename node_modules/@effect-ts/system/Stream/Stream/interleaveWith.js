var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var interleaveWith_exports = {};
__export(interleaveWith_exports, {
  interleaveWith: () => interleaveWith,
  interleaveWith_: () => interleaveWith_
});
var C = __toESM(require("../../Cause/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var Ex = __toESM(require("../../Exit/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var BP = __toESM(require("../../Stream/BufferedPull/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var M = __toESM(require("../_internal/managed.js"));
var import_combine = require("./combine.js");
var import_definitions = require("./definitions.js");
function loop(leftDone, rightDone, s, left, right) {
  return T.foldCauseM_(s, (_) => O.fold_(C.sequenceCauseOption(_), () => T.succeed(Ex.fail(O.none)), (e) => T.succeed(Ex.halt(C.map_(e, O.some)))), (b) => {
    if (b && !leftDone) {
      return T.foldCauseM_(left, (_) => O.fold_(C.sequenceCauseOption(_), () => {
        if (rightDone) {
          return T.succeed(Ex.fail(O.none));
        } else {
          return loop(true, rightDone, s, left, right);
        }
      }, (e) => T.succeed(Ex.halt(C.map_(e, O.some)))), (a) => T.succeed(Ex.succeed(Tp.tuple(a, Tp.tuple(leftDone, rightDone, s)))));
    } else if (!b && !rightDone) {
      return T.foldCauseM_(right, (_) => O.fold_(C.sequenceCauseOption(_), () => {
        if (leftDone) {
          return T.succeed(Ex.fail(O.none));
        } else {
          return loop(leftDone, true, s, left, right);
        }
      }, (e) => T.succeed(Ex.halt(C.map_(e, O.some)))), (a) => T.succeed(Ex.succeed(Tp.tuple(a, Tp.tuple(leftDone, rightDone, s)))));
    } else {
      return loop(leftDone, rightDone, s, left, right);
    }
  });
}
function interleaveWith_(self, that, b) {
  return new import_definitions.Stream(M.map_(M.bind_(M.bind_(M.do, "sides", () => M.mapM_(b.proc, BP.make)), "result", ({
    sides
  }) => (0, import_combine.combine_)(self, that, Tp.tuple(false, false, BP.pullElement(sides)), ({
    tuple: [leftDone, rightDone, sides2]
  }, left, right) => {
    return loop(leftDone, rightDone, sides2, left, right);
  }).proc), ({
    result
  }) => result));
}
function interleaveWith(that, b) {
  return (self) => interleaveWith_(self, that, b);
}
module.exports = __toCommonJS(interleaveWith_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  interleaveWith,
  interleaveWith_
});
