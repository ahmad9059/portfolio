var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var throttleShapeM_exports = {};
__export(throttleShapeM_exports, {
  throttleShapeM: () => throttleShapeM,
  throttleShapeM_: () => throttleShapeM_
});
var CL = __toESM(require("../../Clock/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var M = __toESM(require("../_internal/managed.js"));
var Ref = __toESM(require("../_internal/ref.js"));
var import_definitions = require("./definitions.js");
function throttleShapeM_(self, costFn, units, duration, burst = 0) {
  return new import_definitions.Stream(M.map_(M.let_(M.bind_(M.bind_(M.bind_(M.do, "chunks", () => self.proc), "currentTime", () => T.toManaged(CL.currentTime)), "bucket", ({
    currentTime
  }) => T.toManaged(Ref.makeRef(Tp.tuple(units, currentTime)))), "pull", ({
    bucket,
    chunks
  }) => T.map_(T.tap_(T.bind_(T.bind_(T.bind_(T.bind_(T.do, "chunk", () => chunks), "weight", ({
    chunk
  }) => T.mapError_(costFn(chunk), O.some)), "current", () => CL.currentTime), "delay", ({
    current,
    weight
  }) => Ref.modify_(bucket, ({
    tuple: [tokens, timestamp]
  }) => {
    const elapsed = current - timestamp;
    const cycles = elapsed / duration;
    const available = (() => {
      const sum = tokens + cycles * units;
      const max = units + burst < 0 ? Number.MAX_VALUE : units + burst;
      return sum < 0 ? max : Math.min(sum, max);
    })();
    const remaining = available - weight;
    const waitCycles = remaining >= 0 ? 0 : -remaining / units;
    const delay = waitCycles * duration;
    return Tp.tuple(delay, Tp.tuple(remaining, current));
  })), ({
    delay
  }) => T.when_(CL.sleep(delay), () => delay > 0)), ({
    chunk
  }) => chunk)), ({
    pull
  }) => pull));
}
function throttleShapeM(costFn, units, duration, burst = 0) {
  return (self) => throttleShapeM_(self, costFn, units, duration, burst);
}
module.exports = __toCommonJS(throttleShapeM_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  throttleShapeM,
  throttleShapeM_
});
