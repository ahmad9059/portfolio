var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var rechunk_exports = {};
__export(rechunk_exports, {
  rechunk: () => rechunk,
  rechunk_: () => rechunk_
});
var C = __toESM(require("../../Cause/index.js"));
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var M = __toESM(require("../_internal/managed.js"));
var Ref = __toESM(require("../_internal/ref.js"));
var Pull = __toESM(require("../Pull/index.js"));
var import_definitions = require("./definitions.js");
var import_halt = require("./halt.js");
class State {
  constructor(buffer, done) {
    this.buffer = buffer;
    this.done = done;
  }
}
function emitOrAccumulate(buffer, done, ref, pull, n) {
  if (A.size(buffer) < n) {
    if (done) {
      if (A.isEmpty(buffer)) {
        return Pull.end;
      } else {
        return T.zipRight_(ref.set(new State(A.empty(), true)), Pull.emitChunk(buffer));
      }
    } else {
      return T.foldM_(pull, O.fold(() => emitOrAccumulate(buffer, true, ref, pull, n), Pull.fail), (ch) => emitOrAccumulate(A.concat_(buffer, ch), false, ref, pull, n));
    }
  } else {
    const {
      tuple: [chunk, leftover]
    } = A.splitAt_(buffer, n);
    return T.zipRight_(ref.set(new State(leftover, done)), Pull.emitChunk(chunk));
  }
}
function rechunk_(self, n) {
  if (n < 1) {
    return (0, import_halt.halt)(C.die(new C.IllegalArgumentException("chunkN: n must be at least 1")));
  } else {
    return new import_definitions.Stream(M.map_(M.let_(M.bind_(M.bind_(M.do, "ref", () => T.toManaged(Ref.makeRef(new State(A.empty(), false)))), "p", () => self.proc), "pull", ({
      p,
      ref
    }) => T.chain_(ref.get, (s) => emitOrAccumulate(s.buffer, s.done, ref, p, n))), ({
      pull
    }) => pull));
  }
}
function rechunk(n) {
  return (self) => rechunk_(self, n);
}
module.exports = __toCommonJS(rechunk_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rechunk,
  rechunk_
});
