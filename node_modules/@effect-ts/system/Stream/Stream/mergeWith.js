var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var mergeWith_exports = {};
__export(mergeWith_exports, {
  mergeWith: () => mergeWith,
  mergeWith_: () => mergeWith_
});
var C = __toESM(require("../../Cause/index.js"));
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var E = __toESM(require("../../Either/index.js"));
var Ex = __toESM(require("../../Exit/index.js"));
var F = __toESM(require("../../Fiber/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var RefM = __toESM(require("../../RefM/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var M = __toESM(require("../_internal/managed.js"));
var H = __toESM(require("../Handoff/index.js"));
var TK = __toESM(require("../Take/index.js"));
var import_definitions = require("./definitions.js");
function mergeWith(that, l, r, strategy = "Both") {
  return (self) => mergeWith_(self, that, l, r, strategy);
}
function mergeWith_(self, that, l, r, strategy = "Both") {
  return new import_definitions.Stream(M.map_(M.tap_(M.tap_(M.let_(M.bind_(M.bind_(M.bind_(M.bind_(M.do, "handoff", () => M.fromEffect(H.make())), "done", () => M.fromEffect(RefM.makeRefM(O.none))), "chunksL", () => self.proc), "chunksR", () => that.proc), "handler", ({
    done,
    handoff
  }) => (pull, terminate) => T.toManagedRelease_(T.interruptible(T.fork(T.repeatWhile_(T.chain_(done.get, (o) => {
    if (o._tag === "Some" && o.value) {
      return T.succeed(false);
    } else {
      return T.chain_(T.result(pull), (exit) => RefM.modify((o2) => {
        const causeOrChunk = Ex.fold_(exit, (c) => E.left(C.sequenceCauseOption(c)), E.right);
        if (o2._tag === "Some" && o2.value) {
          return T.succeed(Tp.tuple(false, o2));
        } else if (causeOrChunk._tag === "Right") {
          return T.as_(H.offer_(handoff, TK.chunk(causeOrChunk.right)), Tp.tuple(true, o2));
        } else if (causeOrChunk._tag === "Left" && causeOrChunk.left._tag === "Some") {
          return T.as_(H.offer_(handoff, TK.halt(causeOrChunk.left.value)), Tp.tuple(false, O.some(true)));
        } else if (causeOrChunk._tag === "Left" && causeOrChunk.left._tag === "None" && (terminate || o2._tag === "Some")) {
          return T.as_(H.offer_(handoff, TK.end), Tp.tuple(false, O.some(true)));
        } else {
          return T.succeed(Tp.tuple(false, O.some(false)));
        }
      })(done));
    }
  }), import_Function.identity))), F.interrupt)), ({
    chunksL,
    handler
  }) => handler(T.map_(chunksL, A.map(l)), strategy === "Left" || strategy === "Either")), ({
    chunksR,
    handler
  }) => handler(T.map_(chunksR, A.map(r)), strategy === "Right" || strategy === "Either")), ({
    done,
    handoff
  }) => T.map_(T.bind_(T.bind_(T.bind_(T.do, "done", () => done.get), "take", (s) => s.done._tag === "Some" && s.done.value ? T.some(H.poll(handoff)) : H.take(handoff)), "result", ({
    take
  }) => TK.done(take)), ({
    result
  }) => result)));
}
module.exports = __toCommonJS(mergeWith_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mergeWith,
  mergeWith_
});
