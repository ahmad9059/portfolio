var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var definitions_exports = {};
__export(definitions_exports, {
  Chain: () => Chain,
  DefaultChunkSize: () => DefaultChunkSize,
  Stream: () => Stream,
  StreamURI: () => StreamURI
});
var C = __toESM(require("../../Cause/core.js"));
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var Exit = __toESM(require("../../Exit/api.js"));
var import_Function = require("../../Function/index.js");
var Finalizer = __toESM(require("../../Managed/ReleaseMap/finalizer.js"));
var makeReleaseMap = __toESM(require("../../Managed/ReleaseMap/makeReleaseMap.js"));
var releaseAll = __toESM(require("../../Managed/ReleaseMap/releaseAll.js"));
var O = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var Ref = __toESM(require("../_internal/ref.js"));
var Pull = __toESM(require("../Pull/index.js"));
const StreamURI = "@matechs/core/Eff/StreamURI";
class Stream {
  constructor(proc) {
    this.proc = proc;
  }
}
T._U, T._E, T._A, T._R;
const DefaultChunkSize = 4096;
class Chain {
  constructor(f0, outerStream, currOuterChunk, currInnerStream, innerFinalizer) {
    this.f0 = f0;
    this.outerStream = outerStream;
    this.currOuterChunk = currOuterChunk;
    this.currInnerStream = currInnerStream;
    this.innerFinalizer = innerFinalizer;
    this.apply = this.apply.bind(this);
    this.closeInner = this.closeInner.bind(this);
    this.pullNonEmpty = this.pullNonEmpty.bind(this);
    this.pullOuter = this.pullOuter.bind(this);
  }
  closeInner() {
    return T.chain_(Ref.getAndSet_(this.innerFinalizer, Finalizer.noopFinalizer), (f) => f(Exit.unit));
  }
  pullNonEmpty(pull) {
    return T.chain_(pull, (os) => !A.isEmpty(os) ? T.succeed(os) : this.pullNonEmpty(pull));
  }
  pullOuter() {
    return T.chain_(T.flatten(Ref.modify_(this.currOuterChunk, ({
      tuple: [chunk, nextIdx]
    }) => {
      if (nextIdx < A.size(chunk)) {
        return Tp.tuple(T.succeed(A.unsafeGet_(chunk, nextIdx)), Tp.tuple(chunk, nextIdx + 1));
      } else {
        return Tp.tuple(T.map_(T.tap_(this.pullNonEmpty(this.outerStream), (os) => this.currOuterChunk.set(Tp.tuple(os, 1))), (os) => A.unsafeGet_(os, 0)), Tp.tuple(chunk, nextIdx));
      }
    })), (o) => T.uninterruptibleMask(({
      restore
    }) => T.asUnit(T.tap_(T.tap_(T.bind_(T.bind_(T.do, "releaseMap", () => makeReleaseMap.makeReleaseMap), "pull", ({
      releaseMap
    }) => restore(T.map_(T.provideSome_(this.f0(o).proc.effect, (_) => Tp.tuple(_, releaseMap)), (_) => _.get(1)))), ({
      pull
    }) => this.currInnerStream.set(pull)), ({
      releaseMap
    }) => this.innerFinalizer.set((e) => releaseAll.releaseAll(e, T.sequential)(releaseMap))))));
  }
  apply() {
    return T.catchAllCause_(T.flatten(this.currInnerStream.get), (c) => O.fold_(C.sequenceCauseOption(c), () => T.chain_(T.chain_(this.closeInner(), () => this.pullOuter()), () => new Chain(this.f0, this.outerStream, this.currOuterChunk, this.currInnerStream, this.innerFinalizer).apply()), Pull.halt));
  }
}
module.exports = __toCommonJS(definitions_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Chain,
  DefaultChunkSize,
  Stream,
  StreamURI
});
