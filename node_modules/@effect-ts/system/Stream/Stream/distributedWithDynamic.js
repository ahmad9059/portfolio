var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var distributedWithDynamic_exports = {};
__export(distributedWithDynamic_exports, {
  distributedWithDynamic: () => distributedWithDynamic,
  distributedWithDynamic_: () => distributedWithDynamic_
});
var C = __toESM(require("../../Cause/index.js"));
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Map = __toESM(require("../../Collections/Immutable/Map/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var Ex = __toESM(require("../../Exit/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var Q = __toESM(require("../../Queue/index.js"));
var SM = __toESM(require("../../Semaphore/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var M = __toESM(require("../_internal/managed.js"));
var R = __toESM(require("../_internal/ref.js"));
var forEach = __toESM(require("./forEach.js"));
function distributedWithDynamic(maximumLag, decide, done = (_) => T.unit) {
  return (stream) => distributedWithDynamic_(stream, maximumLag, decide, done);
}
function offer(o, queuesRef, decide) {
  return T.chain_(T.bind_(T.bind_(T.do, "shouldProcess", () => decide(o)), "queues", () => queuesRef.get), ({
    queues,
    shouldProcess
  }) => T.chain_(T.reduce_(queues, A.empty(), (acc, [id, queue]) => {
    if (shouldProcess(id)) {
      return T.foldCauseM_(Q.offer_(queue, Ex.succeed(o)), (c) => C.interrupted(c) ? T.succeed(A.concat_(A.single(id), acc)) : T.halt(c), () => T.succeed(acc));
    } else {
      return T.succeed(acc);
    }
  }), (ids) => !A.isEmpty(ids) ? R.update_(queuesRef, Map.removeMany(ids)) : T.unit));
}
function distributedWithDynamic_(self, maximumLag, decide, done = (_) => T.unit) {
  return M.map_(M.bind_(M.bind_(M.do, "queuesRef", () => ((acquire) => T.toManagedRelease_(acquire, (_) => T.chain_(_.get, (qs) => T.forEach_(qs.values(), Q.shutdown))))(R.makeRef(Map.empty))), "add", ({
    queuesRef
  }) => M.map_(M.tap_(M.let_(M.bind_(M.bind_(M.do, "queuesLock", () => T.toManaged(SM.makeSemaphore(1))), "newQueue", () => T.toManaged(R.makeRef(T.map_(T.tap_(T.bind_(T.bind_(T.do, "queue", () => Q.makeBounded(maximumLag)), "id", () => T.succeedWith(() => Symbol())), ({
    id,
    queue
  }) => R.update_(queuesRef, Map.insert(id, queue))), ({
    id,
    queue
  }) => Tp.tuple(id, queue))))), "finalize", ({
    newQueue,
    queuesLock
  }) => (endTake) => SM.withPermit_(T.asUnit(T.tap_(T.tap_(T.bind_(T.tap_(T.do, () => newQueue.set(T.map_(T.tap_(T.bind_(T.tap_(T.bind_(T.do, "queue", () => Q.makeBounded(1)), ({
    queue
  }) => Q.offer_(queue, endTake)), "id", () => T.succeedWith(() => Symbol())), ({
    id,
    queue
  }) => R.update_(queuesRef, Map.insert(id, queue))), ({
    id,
    queue
  }) => Tp.tuple(id, queue)))), "queues", () => T.map_(queuesRef.get, (m) => m.values())), ({
    queues
  }) => T.forEach_(queues, (queue) => T.catchSomeCause_(Q.offer_(queue, endTake), (c) => C.interrupted(c) ? O.some(T.unit) : O.none))), () => done(endTake))), queuesLock)), ({
    finalize
  }) => M.fork(M.foldCauseM_(forEach.forEachManaged((o) => offer(o, queuesRef, decide))(self), (cause) => T.toManaged(finalize(Ex.halt(C.map(O.some)(cause)))), () => T.toManaged(finalize(Ex.fail(O.none)))))), ({
    newQueue,
    queuesLock
  }) => SM.withPermit_(T.flatten(newQueue.get), queuesLock))), ({
    add
  }) => add);
}
module.exports = __toCommonJS(distributedWithDynamic_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  distributedWithDynamic,
  distributedWithDynamic_
});
