var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var bufferSignal_exports = {};
__export(bufferSignal_exports, {
  bufferSignal: () => bufferSignal
});
var Tp = __toESM(require("../../../Collections/Immutable/Tuple/index.js"));
var Ex = __toESM(require("../../../Exit/index.js"));
var import_Function = require("../../../Function/index.js");
var P = __toESM(require("../../../Promise/index.js"));
var Q = __toESM(require("../../../Queue/index.js"));
var T = __toESM(require("../../_internal/effect.js"));
var M = __toESM(require("../../_internal/managed.js"));
var Ref = __toESM(require("../../_internal/ref.js"));
var Pull = __toESM(require("../../Pull/index.js"));
var Take = __toESM(require("../../Take/index.js"));
function bufferSignal(self, queue) {
  return M.map_(M.let_(M.tap_(M.let_(M.bind_(M.bind_(M.tap_(M.bind_(M.bind_(M.do, "as", () => self.proc), "start", () => T.toManaged(P.make())), ({
    start
  }) => T.toManaged(P.succeed_(start, void 0))), "ref", ({
    start
  }) => T.toManaged(Ref.makeRef(start))), "done", () => T.toManaged(Ref.makeRef(false))), "upstream", ({
    as,
    ref
  }) => {
    const offer = (take) => Ex.fold_(take, (_) => T.asUnit(T.tap_(T.tap_(T.tap_(T.bind_(T.tap_(T.bind_(T.do, "latch", () => ref.get), ({
      latch
    }) => P.await(latch)), "p", () => P.make()), ({
      p
    }) => Q.offer_(queue, Tp.tuple(take, p))), ({
      p
    }) => ref.set(p)), ({
      p
    }) => P.await(p))), (_) => T.asUnit(T.tap_(T.bind_(T.bind_(T.do, "p", () => P.make()), "added", ({
      p
    }) => Q.offer_(queue, Tp.tuple(take, p))), ({
      added,
      p
    }) => T.when_(ref.set(p), () => added))));
    return T.asUnit(T.repeatWhile_(T.tap_(Take.fromPull(as), (take) => offer(take)), (_) => _ !== Take.end));
  }), ({
    upstream
  }) => M.fork(T.toManaged(upstream))), "pull", ({
    done
  }) => T.chain_(done.get, (_) => {
    if (_) {
      return Pull.end;
    } else {
      return T.chain_(Q.take(queue), ({
        tuple: [take, p]
      }) => T.zipRight_(T.zipRight_(P.succeed_(p, void 0), T.when_(done.set(true), () => take === Take.end)), Take.done(take)));
    }
  })), ({
    pull
  }) => pull);
}
module.exports = __toCommonJS(bufferSignal_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bufferSignal
});
