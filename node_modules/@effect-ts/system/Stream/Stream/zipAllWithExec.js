var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipAllWithExec_exports = {};
__export(zipAllWithExec_exports, {
  zipAllWithExec: () => zipAllWithExec,
  zipAllWithExec_: () => zipAllWithExec_
});
var C = __toESM(require("../../Cause/index.js"));
var A = __toESM(require("../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var E = __toESM(require("../../Either/index.js"));
var Ex = __toESM(require("../../Exit/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var import_utils = require("../_internal/utils.js");
var import_combineChunks = require("./combineChunks.js");
function zipAllWithExec_(self, that, exec, left, right, both) {
  class Running {
    constructor() {
      this._tag = "Running";
    }
  }
  class LeftDone {
    constructor() {
      this._tag = "LeftDone";
    }
  }
  class RightDone {
    constructor() {
      this._tag = "RightDone";
    }
  }
  class End {
    constructor() {
      this._tag = "End";
    }
  }
  const handleSuccess = (maybeO, maybeO2, excess) => {
    const [excessL, excessR] = E.fold_(excess, (l) => [l, A.empty()], (r) => [A.empty(), r]);
    const chunkL = O.fold_(maybeO, () => excessL, (upd) => A.concat_(excessL, upd));
    const chunkR = O.fold_(maybeO2, () => excessR, (upd) => A.concat_(excessR, upd));
    const [emit, newExcess] = (0, import_utils.zipChunks_)(chunkL, chunkR, both);
    const [fullEmit, status] = ((oDefined, o2Defined) => {
      if (oDefined && o2Defined) {
        return [emit, new Running()];
      }
      if (!oDefined && !o2Defined) {
        const leftover = E.fold_(newExcess, A.map(left), A.map(right));
        return [A.concat_(emit, leftover), new End()];
      }
      if (!oDefined && o2Defined) {
        return [emit, new LeftDone()];
      }
      return [emit, new RightDone()];
    })(O.isSome(maybeO), O.isSome(maybeO2));
    return Ex.succeed(Tp.tuple(fullEmit, Tp.tuple(status, newExcess)));
  };
  return (0, import_combineChunks.combineChunks_)(self, that, Tp.tuple(new Running(), E.left(A.empty)), ({
    tuple: [state, excess]
  }, pullL, pullR) => {
    switch (state._tag) {
      case "Running": {
        if (exec._tag === "Sequential") {
          return T.catchAllCause_(T.zipWith_(T.optional(pullL), T.optional(pullR), (a, b) => handleSuccess(a, b, excess)), (e) => T.succeed(Ex.halt(C.map_(e, O.some))));
        } else {
          return T.catchAllCause_(T.zipWithPar(T.optional(pullR), (a, b) => handleSuccess(a, b, excess))(T.optional(pullL)), (e) => T.succeed(Ex.halt(C.map_(e, O.some))));
        }
      }
      case "LeftDone": {
        return T.catchAllCause_(T.map_(T.optional(pullR), (_) => handleSuccess(O.none, _, excess)), (e) => T.succeed(Ex.halt(C.map_(e, O.some))));
      }
      case "RightDone": {
        return T.catchAllCause_(T.map_(T.optional(pullL), (_) => handleSuccess(_, O.none, excess)), (e) => T.succeed(Ex.halt(C.map_(e, O.some))));
      }
      case "End": {
        return T.succeed(Ex.fail(O.none));
      }
    }
  });
}
function zipAllWithExec(that, exec, left, right, both) {
  return (self) => zipAllWithExec_(self, that, exec, left, right, both);
}
module.exports = __toCommonJS(zipAllWithExec_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipAllWithExec,
  zipAllWithExec_
});
