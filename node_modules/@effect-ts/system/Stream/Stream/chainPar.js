var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var chainPar_exports = {};
__export(chainPar_exports, {
  chainPar: () => chainPar
});
var import_Function = require("../../Function/index.js");
var P = __toESM(require("../../Promise/index.js"));
var Q = __toESM(require("../../Queue/index.js"));
var SM = __toESM(require("../../Semaphore/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var F = __toESM(require("../_internal/fiber.js"));
var M = __toESM(require("../_internal/managed.js"));
var Pull = __toESM(require("../Pull/index.js"));
var chain = __toESM(require("./chain.js"));
var import_definitions = require("./definitions.js");
var forEach = __toESM(require("./forEach.js"));
var import_managed = require("./managed.js");
var tap = __toESM(require("./tap.js"));
function chainPar(n, outputBuffer = 16) {
  return (f) => (self) => {
    return new import_definitions.Stream(M.withChildren((getChildren) => M.map_(M.tap_(M.bind_(M.bind_(M.bind_(M.do, "out", () => T.toManagedRelease_(Q.makeBounded(outputBuffer), Q.shutdown)), "permits", () => T.toManaged(SM.makeSemaphore(n))), "innerFailure", () => T.toManaged(P.make())), ({
      innerFailure,
      out,
      permits
    }) => M.fork(M.foldCauseM_(forEach.forEachManaged_(self, (a) => T.asUnit(T.tap_(T.tap_(T.let_(T.bind_(T.do, "latch", () => P.make()), "innerStream", ({
      latch
    }) => T.foldCauseM_(forEach.forEachChunk((b) => T.asUnit(Q.offer_(out, T.succeed(b))))(chain.chain((_) => f(a))(tap.tap((_) => P.succeed_(latch, void 0))((0, import_managed.managed)(SM.withPermitManaged(permits))))), (cause) => T.asUnit(T.zipRight_(Q.offer_(out, Pull.halt(cause)), P.fail_(innerFailure, cause))), (_) => T.unit)), ({
      innerStream
    }) => T.fork(innerStream)), ({
      latch
    }) => P.await(latch)))), (cause) => T.toManaged(T.zipRight_(T.chain_(getChildren, (c) => F.interruptAll(c)), T.asUnit(Q.offer_(out, Pull.halt(cause))))), (_) => T.toManaged(T.raceWith_(T.interruptible(P.await(innerFailure)), SM.withPermits_(T.interruptible(T.unit), permits, n), (_2, permitsAcquisition) => T.zipRight_(T.chain_(getChildren, (c) => F.interruptAll(c)), T.asUnit(F.interrupt(permitsAcquisition))), (_2, failureAwait) => T.zipRight_(Q.offer_(out, Pull.end), T.asUnit(F.interrupt(failureAwait)))))))), ({
      out
    }) => T.flatten(Q.take(out)))));
  };
}
module.exports = __toCommonJS(chainPar_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  chainPar
});
