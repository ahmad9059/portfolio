var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var throttleEnforceM_exports = {};
__export(throttleEnforceM_exports, {
  throttleEnforceM: () => throttleEnforceM,
  throttleEnforceM_: () => throttleEnforceM_
});
var CL = __toESM(require("../../Clock/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var M = __toESM(require("../_internal/managed.js"));
var Ref = __toESM(require("../_internal/ref.js"));
var import_definitions = require("./definitions.js");
function throttleEnforceM(costFn, units, duration, burst = 0) {
  return (self) => throttleEnforceM_(self, costFn, units, duration, burst);
}
function throttleEnforceM_(self, costFn, units, duration, burst = 0) {
  return new import_definitions.Stream(M.map_(M.let_(M.bind_(M.bind_(M.bind_(M.do, "chunks", () => self.proc), "currentTime", () => T.toManaged(CL.currentTime)), "bucket", ({
    currentTime
  }) => T.toManaged(Ref.makeRef(Tp.tuple(units, currentTime)))), "pull", ({
    bucket,
    chunks
  }) => {
    const go = T.chain_(chunks, (chunk) => T.chain_(T.zip_(T.mapError_(costFn(chunk), O.some), CL.currentTime), ({
      tuple: [weight, current]
    }) => T.chain_(Ref.modify_(bucket, ({
      tuple: [tokens, timestamp]
    }) => {
      const elapsed = current - timestamp;
      const cycles = elapsed / duration;
      const available = (() => {
        const sum = tokens + cycles * units;
        const max = units + burst < 0 ? Number.MAX_VALUE : units + burst;
        return sum < 0 ? max : Math.min(sum, max);
      })();
      if (weight <= available) {
        return Tp.tuple(O.some(chunk), Tp.tuple(available - weight, current));
      } else {
        return Tp.tuple(O.none, Tp.tuple(available, current));
      }
    }), O.fold(() => go, (os) => T.succeed(os)))));
    return go;
  }), ({
    pull
  }) => pull));
}
module.exports = __toCommonJS(throttleEnforceM_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  throttleEnforceM,
  throttleEnforceM_
});
