var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var catchAllCause_exports = {};
__export(catchAllCause_exports, {
  catchAllCause: () => catchAllCause,
  catchAllCause_: () => catchAllCause_
});
var C = __toESM(require("../../Cause/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var Ex = __toESM(require("../../Exit/index.js"));
var import_Function = require("../../Function/index.js");
var Finalizer = __toESM(require("../../Managed/ReleaseMap/finalizer.js"));
var makeReleaseMap = __toESM(require("../../Managed/ReleaseMap/makeReleaseMap.js"));
var releaseAll = __toESM(require("../../Managed/ReleaseMap/releaseAll.js"));
var Option = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../_internal/effect.js"));
var M = __toESM(require("../_internal/managed.js"));
var Ref = __toESM(require("../_internal/ref.js"));
var import_definitions = require("./definitions.js");
function catchAllCause_(self, f) {
  return new import_definitions.Stream(M.map_(M.let_(M.bind_(M.bind_(M.do, "finalizerRef", () => M.finalizerRef(Finalizer.noopFinalizer)), "ref", () => T.toManaged(Ref.makeRef({
    _tag: "NotStarted"
  }))), "pull", ({
    finalizerRef,
    ref
  }) => {
    const closeCurrent = (cause) => T.uninterruptible(T.chain_(Ref.getAndSet_(finalizerRef, Finalizer.noopFinalizer), (f2) => f2(Ex.halt(cause))));
    const open = (stream) => (asState) => T.uninterruptibleMask(({
      restore
    }) => T.chain_(makeReleaseMap.makeReleaseMap, (releaseMap) => T.chain_(finalizerRef.set((exit) => releaseAll.releaseAll(exit, T.sequential)(releaseMap)), () => T.tap_(T.map_(T.provideSome_(restore(stream.proc.effect), (_) => Tp.tuple(_, releaseMap)), ({
      tuple: [_, __]
    }) => __), (pull) => ref.set(asState(pull))))));
    const failover = (cause) => Option.fold_(C.sequenceCauseOption(cause), () => T.fail(Option.none), (cause2) => T.flatten(T.chain_(closeCurrent(cause2), () => open(f(cause2))((pull) => ({
      _tag: "Other",
      pull
    })))));
    return T.chain_(ref.get, (s) => {
      switch (s._tag) {
        case "NotStarted": {
          return T.catchAllCause_(T.flatten(open(self)((pull) => ({
            _tag: "Self",
            pull
          }))), failover);
        }
        case "Self": {
          return T.catchAllCause_(s.pull, failover);
        }
        case "Other": {
          return s.pull;
        }
      }
    });
  }), ({
    pull
  }) => pull));
}
function catchAllCause(f) {
  return (self) => catchAllCause_(self, f);
}
module.exports = __toCommonJS(catchAllCause_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  catchAllCause,
  catchAllCause_
});
