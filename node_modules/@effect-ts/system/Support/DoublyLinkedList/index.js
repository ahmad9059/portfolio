var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var DoublyLinkedList_exports = {};
__export(DoublyLinkedList_exports, {
  DoublyLinkedList: () => DoublyLinkedList,
  LinkedListNode: () => LinkedListNode
});
var import_Operator = require("../../Operator/index.js");
class LinkedListNode {
  constructor(value) {
    this.value = value;
    this.removed = false;
    this.right = void 0;
    this.left = void 0;
  }
}
class DoublyLinkedList {
  constructor() {
    this.length = 0;
    this.headN = void 0;
    this.tailN = void 0;
  }
  get head() {
    return this.headN === void 0 ? void 0 : this.headN.value;
  }
  get isEmpty() {
    return this.length === 0;
  }
  get tail() {
    return this.tailN === void 0 ? void 0 : this.tailN.value;
  }
  forEach(f) {
    let current = this.headN;
    while (current !== void 0) {
      f(current.value);
      current = current.right;
    }
  }
  add(val) {
    const node = new LinkedListNode(val);
    if (this.length === 0) {
      this.headN = node;
    }
    if (this.tailN === void 0) {
      this.tailN = node;
    } else {
      this.tailN.right = node;
      node.left = this.tailN;
      this.tailN = node;
    }
    this.length += 1;
    return node;
  }
  empty() {
    this.length = 0;
    this.headN = this.tailN = void 0;
  }
  pop() {
    const h = this.tailN;
    if (h !== void 0) {
      this.remove(h);
      return h.value;
    }
    return void 0;
  }
  remove(n) {
    if (n.removed) {
      return;
    }
    n.removed = true;
    if (n.left !== void 0 && n.right !== void 0) {
      n.left.right = n.right;
      n.right.left = n.left;
    } else if (n.left !== void 0) {
      this.tailN = n.left;
      n.left.right = void 0;
    } else if (n.right !== void 0) {
      this.headN = n.right;
      n.right.left = void 0;
    } else {
      this.tailN = void 0;
      this.headN = void 0;
    }
    if (this.length > 0) {
      this.length -= 1;
    }
  }
  shift() {
    const h = this.headN;
    if (h !== void 0) {
      this.remove(h);
      return h.value;
    }
    return void 0;
  }
}
module.exports = __toCommonJS(DoublyLinkedList_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DoublyLinkedList,
  LinkedListNode
});
