var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var ImmutableQueue_exports = {};
__export(ImmutableQueue_exports, {
  ImmutableQueue: () => ImmutableQueue
});
var import_Operator = require("../../Operator/index.js");
var L = __toESM(require("../../Collections/Immutable/List/index.js"));
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var O = __toESM(require("../../Option/index.js"));
class ImmutableQueue {
  constructor(backing) {
    this.backing = backing;
  }
  push(a) {
    return new ImmutableQueue(L.append_(this.backing, a));
  }
  prepend(a) {
    return new ImmutableQueue(L.prepend_(this.backing, a));
  }
  get size() {
    return this.backing.length;
  }
  dequeue() {
    if (!L.isEmpty(this.backing)) {
      return O.some(Tp.tuple(L.unsafeFirst(this.backing), new ImmutableQueue(L.tail(this.backing))));
    } else {
      return O.none;
    }
  }
  find(f) {
    return L.find_(this.backing, f);
  }
  filter(f) {
    return new ImmutableQueue(L.filter_(this.backing, f));
  }
  static single(a) {
    return new ImmutableQueue(L.of(a));
  }
  [Symbol.iterator]() {
    return L.toArray(this.backing).values();
  }
}
module.exports = __toCommonJS(ImmutableQueue_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ImmutableQueue
});
