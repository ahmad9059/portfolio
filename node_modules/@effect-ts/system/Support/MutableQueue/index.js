var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var MutableQueue_exports = {};
__export(MutableQueue_exports, {
  Bounded: () => Bounded,
  Unbounded: () => Unbounded
});
var import_Operator = require("../../Operator/index.js");
var Chunk = __toESM(require("../../Collections/Immutable/Chunk/core.js"));
var import_DoublyLinkedList = require("../DoublyLinkedList/index.js");
class Unbounded {
  constructor() {
    this.queue = new import_DoublyLinkedList.DoublyLinkedList();
  }
  get size() {
    return this.queue.length;
  }
  get isEmpty() {
    return this.size === 0;
  }
  get isFull() {
    return false;
  }
  get capacity() {
    return Number.MAX_SAFE_INTEGER;
  }
  offer(a) {
    this.queue.add(a);
    return true;
  }
  offerAll(as) {
    for (const a of as) {
      this.offer(a);
    }
    return Chunk.empty();
  }
  poll(a) {
    if (this.isEmpty) {
      return a;
    }
    return this.queue.shift();
  }
  pollUpTo(n) {
    let result = Chunk.empty();
    let count = 0;
    while (count < n) {
      const elem = this.poll(void 0);
      if (elem === void 0) {
        break;
      }
      result = Chunk.append_(result, elem);
      count += 1;
    }
    return result;
  }
}
class Bounded {
  constructor(n) {
    this.queue = new import_DoublyLinkedList.DoublyLinkedList();
    this.n = n;
  }
  get size() {
    return this.queue.length;
  }
  get isEmpty() {
    return this.size === 0;
  }
  get isFull() {
    return this.size === this.capacity;
  }
  get capacity() {
    return this.n;
  }
  offer(a) {
    if (this.isFull) {
      return false;
    }
    this.queue.add(a);
    return true;
  }
  offerAll(as) {
    const it = as[Symbol.iterator]();
    let next;
    let rem = Chunk.empty();
    let offerig = true;
    while (offerig && (next = it.next()) && !next.done) {
      offerig = this.offer(next.value);
    }
    while (next && !next.done) {
      rem = Chunk.append_(rem, next.value);
      next = it.next();
    }
    return rem;
  }
  poll(a) {
    if (this.isEmpty) {
      return a;
    }
    return this.queue.shift();
  }
  pollUpTo(n) {
    let result = Chunk.empty();
    let count = 0;
    while (count < n) {
      const elem = this.poll(void 0);
      if (elem === void 0) {
        break;
      }
      result = Chunk.append_(result, elem);
      count += 1;
    }
    return result;
  }
}
module.exports = __toCommonJS(MutableQueue_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Bounded,
  Unbounded
});
