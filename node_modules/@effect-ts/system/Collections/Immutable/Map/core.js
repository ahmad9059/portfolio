var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var core_exports = {};
__export(core_exports, {
  compact: () => compact,
  copy: () => copy,
  empty: () => empty,
  filterMap: () => filterMap,
  filterMapWithIndex: () => filterMapWithIndex,
  filterMapWithIndex_: () => filterMapWithIndex_,
  filterMap_: () => filterMap_,
  filterWithIndex: () => filterWithIndex,
  filterWithIndex_: () => filterWithIndex_,
  fromMutable: () => fromMutable,
  insert: () => insert,
  insert_: () => insert_,
  isEmpty: () => isEmpty,
  lookup: () => lookup,
  lookup_: () => lookup_,
  make: () => make,
  map: () => map,
  mapWithIndex: () => mapWithIndex,
  mapWithIndex_: () => mapWithIndex_,
  map_: () => map_,
  remove: () => remove,
  removeMany: () => removeMany,
  removeMany_: () => removeMany_,
  remove_: () => remove_,
  singleton: () => singleton,
  size: () => size,
  toMutable: () => toMutable
});
var Op = __toESM(require("../../../Option/index.js"));
var import_Option = require("../../../Option/index.js");
var Tp = __toESM(require("../Tuple/index.js"));
function make(values) {
  const map2 = /* @__PURE__ */ new Map();
  for (const _ of values) {
    if (Tp.isTuple(_)) {
      map2.set(_.get(0), _.get(1));
    } else {
      map2.set(_[0], _[1]);
    }
  }
  return map2;
}
function compact(fa) {
  const m = /* @__PURE__ */ new Map();
  const entries = fa.entries();
  let e;
  while (!(e = entries.next()).done) {
    const [k, oa] = e.value;
    if (Op.isSome(oa)) {
      m.set(k, oa.value);
    }
  }
  return m;
}
const empty = /* @__PURE__ */ new Map();
function filterMap_(fa, f) {
  return filterMapWithIndex_(fa, (_, a) => f(a));
}
function filterMap(f) {
  return (fa) => filterMap_(fa, f);
}
function filterMapWithIndex_(fa, f) {
  const m = /* @__PURE__ */ new Map();
  const entries = fa.entries();
  let e;
  while (!(e = entries.next()).done) {
    const [k, a] = e.value;
    const o = f(k, a);
    if (Op.isSome(o)) {
      m.set(k, o.value);
    }
  }
  return m;
}
function filterMapWithIndex(f) {
  return (fa) => filterMapWithIndex_(fa, f);
}
function filterWithIndex_(fa, p) {
  const m = /* @__PURE__ */ new Map();
  const entries = fa.entries();
  let e;
  while (!(e = entries.next()).done) {
    const [k, a] = e.value;
    if (p(k, a)) {
      m.set(k, a);
    }
  }
  return m;
}
function filterWithIndex(p) {
  return (fa) => filterWithIndex_(fa, p);
}
function fromMutable(m) {
  return new Map(m);
}
function isEmpty(d) {
  return d.size === 0;
}
function map_(fa, f) {
  return mapWithIndex_(fa, (_, a) => f(a));
}
function map(f) {
  return (fa) => map_(fa, f);
}
function mapWithIndex_(fa, f) {
  const m = /* @__PURE__ */ new Map();
  const entries = fa.entries();
  let e;
  while (!(e = entries.next()).done) {
    const [key, a] = e.value;
    m.set(key, f(key, a));
  }
  return m;
}
function mapWithIndex(f) {
  return (fa) => mapWithIndex_(fa, f);
}
function singleton(k, a) {
  return /* @__PURE__ */ new Map([[k, a]]);
}
function size(d) {
  return d.size;
}
function toMutable(m) {
  return new Map(m);
}
function insert_(self, k, v) {
  const m = copy(self);
  m.set(k, v);
  return m;
}
function insert(k, v) {
  return (self) => insert_(self, k, v);
}
function remove_(self, k) {
  const m = copy(self);
  m.delete(k);
  return m;
}
function remove(k) {
  return (self) => remove_(self, k);
}
function removeMany_(self, ks) {
  const m = copy(self);
  for (const k of ks) {
    m.delete(k);
  }
  return m;
}
function removeMany(ks) {
  return (self) => removeMany_(self, ks);
}
function lookup_(m, k) {
  return (0, import_Option.fromNullable)(m.get(k));
}
function lookup(k) {
  return (m) => lookup_(m, k);
}
function copy(self) {
  const m = /* @__PURE__ */ new Map();
  self.forEach((v, k) => {
    m.set(k, v);
  });
  return m;
}
module.exports = __toCommonJS(core_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  compact,
  copy,
  empty,
  filterMap,
  filterMapWithIndex,
  filterMapWithIndex_,
  filterMap_,
  filterWithIndex,
  filterWithIndex_,
  fromMutable,
  insert,
  insert_,
  isEmpty,
  lookup,
  lookup_,
  make,
  map,
  mapWithIndex,
  mapWithIndex_,
  map_,
  remove,
  removeMany,
  removeMany_,
  remove_,
  singleton,
  size,
  toMutable
});
