var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Tuple_exports = {};
__export(Tuple_exports, {
  Tuple: () => Tuple,
  TupleSym: () => TupleSym,
  append: () => append,
  append_: () => append_,
  concat: () => concat,
  concat_: () => concat_,
  fromNative: () => fromNative,
  get: () => get,
  get_: () => get_,
  isTuple: () => isTuple,
  prepend: () => prepend,
  prepend_: () => prepend_,
  toNative: () => toNative,
  tuple: () => tuple,
  update: () => update,
  update_: () => update_
});
var Tp = __toESM(require("../../../Structural/index.js"));
const TupleSym = /* @__PURE__ */ Symbol.for("@effect-ts/system/Collections/Immutable/Tuple");
function isTuple(self) {
  return typeof self === "object" && self != null && TupleSym in self;
}
class Tuple {
  constructor(tuple2) {
    this.tuple = tuple2;
  }
  [TupleSym]() {
    return TupleSym;
  }
  [Symbol.iterator]() {
    return this.tuple[Symbol.iterator]();
  }
  get [Tp.hashSym]() {
    return Tp.hashArray(this.tuple);
  }
  [Tp.equalsSym](that) {
    if (isTuple(that)) {
      return this.tuple.length === that.tuple.length && this.tuple.every((v, i) => Tp.equals(v, that.tuple[i]));
    }
    return false;
  }
  get(i) {
    return this.tuple[i];
  }
}
function tuple(...args) {
  return new Tuple(args);
}
function get(i) {
  return (self) => self.get(i);
}
function get_(self, i) {
  return self.get(i);
}
function toNative(self) {
  return self.tuple;
}
function fromNative(self) {
  return new Tuple(self);
}
function update(i, f) {
  return (self) => update_(self, i, f);
}
function update_(self, i, f) {
  const len = self.tuple.length;
  const r = new Array(len);
  for (let k = 0; k < len; k++) {
    if (k === i) {
      r[k] = f(self.tuple[k]);
    } else {
      r[k] = self.tuple[k];
    }
  }
  return new Tuple(r);
}
function append(k) {
  return (self) => append_(self, k);
}
function append_(self, k) {
  return new Tuple([...self.tuple, k]);
}
function prepend(k) {
  return (self) => prepend_(self, k);
}
function prepend_(self, k) {
  return new Tuple([k, ...self.tuple]);
}
function concat(that) {
  return (self) => concat_(self, that);
}
function concat_(self, that) {
  return new Tuple([...self.tuple, ...that.tuple]);
}
module.exports = __toCommonJS(Tuple_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Tuple,
  TupleSym,
  append,
  append_,
  concat,
  concat_,
  fromNative,
  get,
  get_,
  isTuple,
  prepend,
  prepend_,
  toNative,
  tuple,
  update,
  update_
});
