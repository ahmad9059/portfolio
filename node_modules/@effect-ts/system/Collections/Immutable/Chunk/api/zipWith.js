var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipWith_exports = {};
__export(zipWith_exports, {
  zipWith: () => zipWith,
  zipWith_: () => zipWith_
});
var import_core = require("../core.js");
var import_definition = require("../definition.js");
function zipWith_(self, that, f) {
  const length = Math.min(self.length, that.length);
  if (length === 0) {
    return (0, import_core.empty)();
  }
  const leftIterator = self.arrayLikeIterator();
  const rightIterator = that.arrayLikeIterator();
  let i = 0;
  let j = 0;
  let k = 0;
  let leftLength = 0;
  let rightLength = 0;
  let left = void 0;
  let right = void 0;
  let leftNext;
  let rightNext;
  let builder = (0, import_core.empty)();
  while (i < length) {
    if (j < leftLength && k < rightLength) {
      builder = (0, import_core.append_)(builder, f(left[j], right[k]));
      i++;
      j++;
      k++;
    } else if (j === leftLength && (leftNext = leftIterator.next()) && !leftNext.done) {
      left = leftNext.value;
      leftLength = left.length;
      j = 0;
    } else if (k === rightLength && (rightNext = rightIterator.next()) && !rightNext.done) {
      right = rightNext.value;
      rightLength = right.length;
      k = 0;
    }
  }
  return builder;
}
function zipWith(that, f) {
  return (self) => zipWith_(self, that, f);
}
module.exports = __toCommonJS(zipWith_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipWith,
  zipWith_
});
