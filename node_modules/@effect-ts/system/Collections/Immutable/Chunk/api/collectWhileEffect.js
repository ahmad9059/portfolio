var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var collectWhileEffect_exports = {};
__export(collectWhileEffect_exports, {
  collectWhileEffect: () => collectWhileEffect,
  collectWhileEffect_: () => collectWhileEffect_
});
var core = __toESM(require("../../../../Effect/core.js"));
var map = __toESM(require("../../../../Effect/map.js"));
var zipWith = __toESM(require("../../../../Effect/zipWith.js"));
var O = __toESM(require("../../../../Option/index.js"));
var Chunk = __toESM(require("../core.js"));
var ChunkDef = __toESM(require("../definition.js"));
function collectWhileEffect_(self, f) {
  ;
  switch (self._typeId) {
    case ChunkDef.SingletonTypeId: {
      return O.fold_(f(self.a), () => core.succeed(Chunk.empty()), (b) => map.map_(b, Chunk.single));
    }
    case ChunkDef.ArrTypeId: {
      const array = self.arrayLike();
      let dest = core.succeed(Chunk.empty());
      for (let i = 0; i < array.length; i++) {
        const rhs = f(array[i]);
        if (O.isSome(rhs)) {
          dest = zipWith.zipWith_(dest, rhs.value, Chunk.append_);
        } else {
          return dest;
        }
      }
      return dest;
    }
    default: {
      return collectWhileEffect_(self.materialize(), f);
    }
  }
}
function collectWhileEffect(f) {
  return (self) => collectWhileEffect_(self, f);
}
module.exports = __toCommonJS(collectWhileEffect_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  collectWhileEffect,
  collectWhileEffect_
});
