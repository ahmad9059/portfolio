var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var partitionMap_exports = {};
__export(partitionMap_exports, {
  partitionMap: () => partitionMap,
  partitionMap_: () => partitionMap_
});
var Tp = __toESM(require("../../Tuple/index.js"));
var Chunk = __toESM(require("../core.js"));
var import_forEach = require("./forEach.js");
function partitionMap_(self, f) {
  let bs = Chunk.empty();
  let cs = Chunk.empty();
  (0, import_forEach.forEach_)(self, (a) => {
    const x = f(a);
    if (x._tag === "Left") {
      bs = Chunk.append_(bs, x.left);
    } else {
      cs = Chunk.append_(cs, x.right);
    }
  });
  return Tp.tuple(bs, cs);
}
function partitionMap(f) {
  return (self) => partitionMap_(self, f);
}
module.exports = __toCommonJS(partitionMap_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  partitionMap,
  partitionMap_
});
