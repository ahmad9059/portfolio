var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var reduceWhileEffect_exports = {};
__export(reduceWhileEffect_exports, {
  reduceWhileEffect: () => reduceWhileEffect,
  reduceWhileEffect_: () => reduceWhileEffect_
});
var core = __toESM(require("../../../../Effect/core.js"));
var import_definition = require("../definition.js");
function loop(s, iterator, array, i, length, pred, f) {
  if (i < length) {
    if (pred(s)) {
      return core.chain_(f(s, array[i]), (s1) => loop(s1, iterator, array, i + 1, length, pred, f));
    } else {
      return core.succeed(s);
    }
  } else {
    const next = iterator.next();
    if (next.done) {
      return core.succeed(s);
    } else {
      const arr = next.value;
      return core.suspend(() => loop(s, iterator, arr, 0, arr.length, pred, f));
    }
  }
}
function reduceWhileEffect_(self, s, pred, f) {
  const iterator = self.arrayLikeIterator();
  const next = iterator.next();
  if (next.done) {
    return core.succeed(s);
  } else {
    const array = next.value;
    const length = array.length;
    return loop(s, iterator, array, 0, length, pred, f);
  }
}
function reduceWhileEffect(s, pred, f) {
  return (self) => reduceWhileEffect_(self, s, pred, f);
}
module.exports = __toCommonJS(reduceWhileEffect_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  reduceWhileEffect,
  reduceWhileEffect_
});
