var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var NonEmptyArray_exports = {};
__export(NonEmptyArray_exports, {
  ap: () => ap,
  ap_: () => ap_,
  append: () => append,
  append_: () => append_,
  chain: () => chain,
  chain_: () => chain_,
  concat: () => concat,
  concat_: () => concat_,
  duplicate: () => duplicate,
  extend: () => extend,
  extend_: () => extend_,
  filter: () => filter,
  filterWithIndex: () => filterWithIndex,
  filterWithIndex_: () => filterWithIndex_,
  filter_: () => filter_,
  flatten: () => flatten,
  fromArray: () => fromArray,
  head: () => head,
  init: () => init,
  insertAt: () => insertAt,
  insertAt_: () => insertAt_,
  last: () => last,
  make: () => make,
  map: () => map,
  mapWithIndex: () => mapWithIndex,
  mapWithIndex_: () => mapWithIndex_,
  map_: () => map_,
  modifyAt: () => modifyAt,
  modifyAt_: () => modifyAt_,
  prepend: () => prepend,
  prepend_: () => prepend_,
  reduce: () => reduce,
  reduceRight: () => reduceRight,
  reduceRightWithIndex: () => reduceRightWithIndex,
  reduceRightWithIndex_: () => reduceRightWithIndex_,
  reduceRight_: () => reduceRight_,
  reduceWithIndex: () => reduceWithIndex,
  reduceWithIndex_: () => reduceWithIndex_,
  reduce_: () => reduce_,
  reverse: () => reverse,
  single: () => single,
  tail: () => tail,
  unzip: () => unzip,
  updateAt: () => updateAt,
  updateAt_: () => updateAt_,
  zip: () => zip,
  zipWith: () => zipWith,
  zipWith_: () => zipWith_,
  zip_: () => zip_
});
var import_Operator = require("../../../Operator/index.js");
var import_Option = require("../../../Option/index.js");
var A = __toESM(require("../Array/index.js"));
const prepend_ = A.prepend_;
const prepend = A.prepend;
const append_ = A.append_;
const append = A.append;
function fromArray(as) {
  return A.isNonEmpty(as) ? (0, import_Option.some)(as) : import_Option.none;
}
function head(nea) {
  return nea[0];
}
function tail(nea) {
  return nea.slice(1);
}
const reverse = A.reverse;
function last(nea) {
  return nea[nea.length - 1];
}
function init(nea) {
  return nea.slice(0, -1);
}
function insertAt(i, a) {
  return A.insertAt(i, a);
}
function insertAt_(nea, i, a) {
  return A.insertAt_(nea, i, a);
}
function updateAt(i, a) {
  return A.updateAt(i, a);
}
function updateAt_(nea, i, a) {
  return A.updateAt_(nea, i, a);
}
function modifyAt(i, f) {
  return A.modifyAt(i, f);
}
function modifyAt_(nea, i, f) {
  return A.modifyAt_(nea, i, f);
}
function filter(predicate) {
  return (nea) => filter_(nea, predicate);
}
function filter_(nea, predicate) {
  return fromArray(A.filter_(nea, predicate));
}
function filterWithIndex(predicate) {
  return (nea) => fromArray(nea.filter((a, i) => predicate(i, a)));
}
function filterWithIndex_(nea, predicate) {
  return fromArray(nea.filter((a, i) => predicate(i, a)));
}
const single = A.single;
function concat_(fx, fy) {
  return fx.concat(fy);
}
function concat(fy) {
  return (fx) => fx.concat(fy);
}
const zipWith_ = A.zipWith_;
const zipWith = A.zipWith;
const zip_ = A.zip_;
const zip = A.zip;
const unzip = A.unzip;
const ap = A.ap;
const ap_ = A.ap_;
const chain = A.chain;
const chain_ = A.chain_;
const duplicate = A.duplicate;
const extend = A.extend;
const extend_ = A.extend_;
const flatten = A.flatten;
const map = A.map;
const map_ = A.map_;
const mapWithIndex = A.mapWithIndex;
const mapWithIndex_ = A.mapWithIndex_;
const reduce = A.reduce;
const reduce_ = A.reduce_;
const reduceRight = A.reduceRight;
const reduceRight_ = A.reduceRight_;
const reduceRightWithIndex = A.reduceRightWithIndex;
const reduceRightWithIndex_ = A.reduceRightWithIndex_;
const reduceWithIndex = A.reduceWithIndex;
const reduceWithIndex_ = A.reduceWithIndex_;
function make(arr) {
  return arr;
}
module.exports = __toCommonJS(NonEmptyArray_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ap,
  ap_,
  append,
  append_,
  chain,
  chain_,
  concat,
  concat_,
  duplicate,
  extend,
  extend_,
  filter,
  filterWithIndex,
  filterWithIndex_,
  filter_,
  flatten,
  fromArray,
  head,
  init,
  insertAt,
  insertAt_,
  last,
  make,
  map,
  mapWithIndex,
  mapWithIndex_,
  map_,
  modifyAt,
  modifyAt_,
  prepend,
  prepend_,
  reduce,
  reduceRight,
  reduceRightWithIndex,
  reduceRightWithIndex_,
  reduceRight_,
  reduceWithIndex,
  reduceWithIndex_,
  reduce_,
  reverse,
  single,
  tail,
  unzip,
  updateAt,
  updateAt_,
  zip,
  zipWith,
  zipWith_,
  zip_
});
