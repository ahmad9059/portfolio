var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var HashMap_exports = {};
__export(HashMap_exports, {
  HashMap: () => HashMap,
  HashMapTypeId: () => HashMapTypeId,
  get: () => get,
  get_: () => get_,
  make: () => make,
  modify: () => modify,
  modify_: () => modify_,
  remove: () => remove,
  remove_: () => remove_,
  set: () => set,
  set_: () => set_,
  size: () => size,
  update: () => update,
  update_: () => update_
});
var I = __toESM(require("../../../Iterable/index.js"));
var O = __toESM(require("../../../Option/index.js"));
var St = __toESM(require("../../../Structural/index.js"));
var import_AtomicNumber = require("../../../Support/AtomicNumber/index.js");
const HashMapTypeId = /* @__PURE__ */ Symbol();
class Node {
  constructor(k, v, next) {
    this.k = k;
    this.v = v;
    this.next = next;
  }
  [Symbol.iterator]() {
    let c = this;
    let n = 0;
    return {
      next: () => {
        if (c) {
          const kv = [c.k, c.v];
          c = c.next;
          n++;
          return {
            value: kv,
            done: false
          };
        } else {
          return {
            value: n,
            done: true
          };
        }
      }
    };
  }
}
class HashMap {
  constructor() {
    this._typeId = HashMapTypeId;
    this.backingMap = /* @__PURE__ */ new Map();
    this.length = new import_AtomicNumber.AtomicNumber(0);
  }
  get(k) {
    const hash = St.hash(k);
    const arr = this.backingMap.get(hash);
    if (typeof arr === "undefined") {
      return O.none;
    }
    let c = arr;
    while (c) {
      if (St.equals(k, c.k)) {
        return O.some(c.v);
      }
      c = c.next;
    }
    return O.none;
  }
  remove(k) {
    const hash = St.hash(k);
    const arr = this.backingMap.get(hash);
    if (typeof arr === "undefined") {
      return this;
    }
    if (St.equals(k, arr.k)) {
      if (typeof arr.next !== "undefined") {
        this.backingMap.set(hash, arr.next);
      } else {
        this.backingMap.delete(hash);
      }
      this.length.decrementAndGet();
      return this;
    }
    let next = arr.next;
    let curr = arr;
    while (next) {
      if (St.equals(k, next.k)) {
        curr.next = next.next;
        this.length.decrementAndGet();
        return this;
      }
      curr = next;
      next = next.next;
    }
    return this;
  }
  set(k, v) {
    const hash = St.hash(k);
    const arr = this.backingMap.get(hash);
    if (typeof arr === "undefined") {
      this.backingMap.set(hash, new Node(k, v));
      this.length.incrementAndGet();
      return this;
    }
    let c = arr;
    let l = arr;
    while (c) {
      if (St.equals(k, c.k)) {
        c.v = v;
        return this;
      }
      l = c;
      c = c.next;
    }
    this.length.incrementAndGet();
    l.next = new Node(k, v);
    return this;
  }
  update(k, f) {
    const hash = St.hash(k);
    const arr = this.backingMap.get(hash);
    if (typeof arr === "undefined") {
      return this;
    }
    let c = arr;
    while (c) {
      if (St.equals(k, c.k)) {
        c.v = f(c.v);
        return this;
      }
      c = c.next;
    }
    return this;
  }
  [Symbol.iterator]() {
    return I.chain_(this.backingMap, ([, _]) => _)[Symbol.iterator]();
  }
}
function make() {
  return new HashMap();
}
function get_(map, key) {
  return map.get(key);
}
function get(key) {
  return (map) => get_(map, key);
}
function set_(map, key, value) {
  return map.set(key, value);
}
function set(key, value) {
  return (map) => set_(map, key, value);
}
function remove_(map, key) {
  return map.remove(key);
}
function remove(key) {
  return (map) => remove_(map, key);
}
function size(map) {
  return map.length.get;
}
function update_(map, key, f) {
  return map.update(key, f);
}
function update(key, f) {
  return (map) => update_(map, key, f);
}
function modify_(map, key, f) {
  const v = f(map.get(key));
  if (O.isSome(v)) {
    map.set(key, v.value);
  } else {
    map.remove(key);
  }
  return map;
}
function modify(key, f) {
  return (map) => modify_(map, key, f);
}
module.exports = __toCommonJS(HashMap_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HashMap,
  HashMapTypeId,
  get,
  get_,
  make,
  modify,
  modify_,
  remove,
  remove_,
  set,
  set_,
  size,
  update,
  update_
});
