var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var HashSet_exports = {};
__export(HashSet_exports, {
  HashSet: () => HashSet,
  add: () => add,
  add_: () => add_,
  contains: () => contains,
  contains_: () => contains_,
  isEmpty: () => isEmpty,
  make: () => make,
  remove: () => remove,
  remove_: () => remove_,
  size: () => size
});
var I = __toESM(require("../../../Iterable/index.js"));
var O = __toESM(require("../../../Option/index.js"));
var MHM = __toESM(require("../HashMap/index.js"));
class HashSet {
  constructor() {
    this.hashMap = MHM.make();
  }
  size() {
    return this.hashMap.length.get;
  }
  isEmpty() {
    return this.size() === 0;
  }
  contains(a) {
    return O.getOrElse_(this.hashMap.get(a), () => false);
  }
  add(a) {
    this.hashMap.set(a, true);
    return this.contains(a);
  }
  remove(a) {
    this.hashMap.remove(a);
    return !this.contains(a);
  }
  [Symbol.iterator]() {
    return I.map_(this.hashMap, ([a]) => a)[Symbol.iterator]();
  }
}
function make() {
  return new HashSet();
}
function size(self) {
  return self.size();
}
function isEmpty(self) {
  return self.isEmpty();
}
function contains_(self, a) {
  return self.contains(a);
}
function contains(a) {
  return (self) => contains_(self, a);
}
function add_(self, a) {
  return self.add(a);
}
function add(a) {
  return (self) => add_(self, a);
}
function remove_(self, a) {
  return self.remove(a);
}
function remove(a) {
  return (self) => remove_(self, a);
}
module.exports = __toCommonJS(HashSet_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HashSet,
  add,
  add_,
  contains,
  contains_,
  isEmpty,
  make,
  remove,
  remove_,
  size
});
