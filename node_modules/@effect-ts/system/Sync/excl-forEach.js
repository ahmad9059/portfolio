var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var excl_forEach_exports = {};
__export(excl_forEach_exports, {
  collectAll: () => collectAll,
  collectAllUnit: () => collectAllUnit,
  collectAllWith: () => collectAllWith,
  collectAllWith_: () => collectAllWith_,
  forEach: () => forEach,
  forEachUnit: () => forEachUnit,
  forEachUnit_: () => forEachUnit_,
  forEach_: () => forEach_
});
var ChunkCollect = __toESM(require("../Collections/Immutable/Chunk/api/collect.js"));
var Chunk = __toESM(require("../Collections/Immutable/Chunk/core.js"));
var import_Function = require("../Function/index.js");
var core = __toESM(require("./core.js"));
function forEach_(as, f) {
  return core.suspend(() => {
    const acc = [];
    return core.map_(forEachUnit_(as, (a) => core.map_(f(a), (b) => {
      acc.push(b);
    })), () => Chunk.from(acc));
  });
}
function forEach(f) {
  return (as) => forEach_(as, f);
}
function forEachUnitLoop(iterator, f) {
  const next = iterator.next();
  return next.done ? core.unit : core.chain_(f(next.value), () => forEachUnitLoop(iterator, f));
}
function forEachUnit_(as, f, __trace) {
  return core.suspend(() => forEachUnitLoop(as[Symbol.iterator](), f));
}
function forEachUnit(f, __trace) {
  return (as) => forEachUnit_(as, f);
}
function collectAll(as) {
  return forEach_(as, import_Function.identity);
}
function collectAllUnit(as, __trace) {
  return forEachUnit_(as, import_Function.identity);
}
function collectAllWith_(as, pf, __trace) {
  return core.map_(collectAll(as), ChunkCollect.collect(pf));
}
function collectAllWith(pf) {
  return (as) => collectAllWith_(as, pf);
}
module.exports = __toCommonJS(excl_forEach_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  collectAll,
  collectAllUnit,
  collectAllWith,
  collectAllWith_,
  forEach,
  forEachUnit,
  forEachUnit_,
  forEach_
});
