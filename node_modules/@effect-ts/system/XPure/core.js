var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var core_exports = {};
__export(core_exports, {
  XPureBase: () => XPureBase,
  access: () => access,
  accessM: () => accessM,
  bimap: () => bimap,
  bimap_: () => bimap_,
  catchAll: () => catchAll,
  catchAll_: () => catchAll_,
  chain: () => chain,
  chain_: () => chain_,
  contramapInput: () => contramapInput,
  either: () => either,
  environment: () => environment,
  fail: () => fail,
  fold: () => fold,
  foldM: () => foldM,
  foldM_: () => foldM_,
  fold_: () => fold_,
  log: () => log,
  logWith: () => logWith,
  map: () => map,
  mapError: () => mapError,
  mapError_: () => mapError_,
  map_: () => map_,
  modify: () => modify,
  orElseEither: () => orElseEither,
  orElseEither_: () => orElseEither_,
  provide: () => provide,
  provideAll: () => provideAll,
  provideAll_: () => provideAll_,
  provideSome: () => provideSome,
  run: () => run,
  runAll: () => runAll,
  runAll_: () => runAll_,
  runEither: () => runEither,
  runLog: () => runLog,
  runResult: () => runResult,
  runResult_: () => runResult_,
  runState: () => runState,
  runState_: () => runState_,
  set: () => set,
  succeed: () => succeed,
  succeedWith: () => succeedWith,
  suspend: () => suspend,
  tap: () => tap,
  tap_: () => tap_,
  tryCatch: () => tryCatch,
  unit: () => unit,
  update: () => update,
  zip: () => zip,
  zipWith: () => zipWith,
  zipWith_: () => zipWith_,
  zip_: () => zip_
});
var Chunk = __toESM(require("../Collections/Immutable/Chunk/core.js"));
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var import_commons = require("../Effect/commons.js");
var E = __toESM(require("../Either/core.js"));
var import_Stack = require("../Stack/index.js");
class XPureBase {
  constructor() {
    this._tag = "XPure";
  }
}
function concrete(_) {
}
class Succeed extends XPureBase {
  constructor(a) {
    super();
    this.a = a;
    this._xptag = "Succeed";
  }
}
class Log extends XPureBase {
  constructor(w) {
    super();
    this.w = w;
    this._xptag = "Log";
  }
}
class Suspend extends XPureBase {
  constructor(f) {
    super();
    this.f = f;
    this._xptag = "Suspend";
  }
}
class Fail extends XPureBase {
  constructor(e) {
    super();
    this.e = e;
    this._xptag = "Fail";
  }
}
class Modify extends XPureBase {
  constructor(run2) {
    super();
    this.run = run2;
    this._xptag = "Modify";
  }
}
class FlatMap extends XPureBase {
  constructor(value, cont) {
    super();
    this.value = value;
    this.cont = cont;
    this._xptag = "FlatMap";
  }
}
class Fold extends XPureBase {
  constructor(value, failure, success) {
    super();
    this.value = value;
    this.failure = failure;
    this.success = success;
    this._xptag = "Fold";
  }
}
class Access extends XPureBase {
  constructor(access2) {
    super();
    this.access = access2;
    this._xptag = "Access";
  }
}
class Provide extends XPureBase {
  constructor(r, cont) {
    super();
    this.r = r;
    this.cont = cont;
    this._xptag = "Provide";
  }
}
function chain(f) {
  return (self) => new FlatMap(self, f);
}
function chain_(self, f) {
  return new FlatMap(self, f);
}
function tap(f) {
  return (self) => tap_(self, f);
}
function tap_(self, f) {
  return chain_(self, (a) => map_(f(a), () => a));
}
function succeed(a) {
  return new Succeed(a);
}
function log(w) {
  return new Log(w);
}
function logWith(f) {
  return suspend(() => log(f()));
}
function fail(a) {
  return new Fail(a);
}
function map_(self, f) {
  return chain_(self, (a) => succeed(f(a)));
}
function map(f) {
  return (self) => chain_(self, (a) => succeed(f(a)));
}
function foldM_(self, failure, success) {
  return new Fold(self, failure, success);
}
function foldM(failure, success) {
  return (self) => foldM_(self, failure, success);
}
function fold(failure, success) {
  return (self) => fold_(self, failure, success);
}
function fold_(self, failure, success) {
  return foldM_(self, (e) => succeed(failure(e)), (a) => succeed(success(a)));
}
function catchAll(failure) {
  return (self) => catchAll_(self, failure);
}
function catchAll_(self, failure) {
  return foldM_(self, failure, (a) => succeed(a));
}
function bimap(f, g) {
  return (self) => bimap_(self, f, g);
}
function bimap_(self, f, g) {
  return foldM_(self, (e) => fail(f(e)), (a) => succeed(g(a)));
}
function mapError(f) {
  return (self) => mapError_(self, f);
}
function mapError_(self, f) {
  return catchAll_(self, (e) => fail(f(e)));
}
function modify(f) {
  return new Modify(f);
}
function set(s) {
  return modify(() => Tp.tuple(s, void 0));
}
function update(f) {
  return modify((s) => Tp.tuple(f(s), void 0));
}
const unit = /* @__PURE__ */ succeed(void 0);
function contramapInput(f) {
  return (self) => chain_(update(f), () => self);
}
function provideSome(f) {
  return (self) => accessM((r) => provideAll(f(r))(self));
}
function provideAll(r) {
  return (self) => new Provide(r, self);
}
function provideAll_(self, r) {
  return new Provide(r, self);
}
function provide(r) {
  return (next) => provideSome((r0) => __spreadValues(__spreadValues({}, r0), r))(next);
}
function accessM(f) {
  return new Access(f);
}
function access(f) {
  return accessM((r) => succeed(f(r)));
}
function environment() {
  return accessM((r) => succeed(r));
}
function either(self) {
  return fold_(self, E.left, E.right);
}
function orElseEither(that) {
  return (self) => orElseEither_(self, that);
}
function orElseEither_(self, that) {
  return foldM_(self, () => map_(that(), (a) => E.right(a)), (a) => succeed(E.left(a)));
}
function zipWith(that, f) {
  return (self) => zipWith_(self, that, f);
}
function zipWith_(self, that, f) {
  return chain_(self, (a) => map_(that, (b) => f(a, b)));
}
function zip(that) {
  return (self) => zip_(self, that);
}
function zip_(self, that) {
  return zipWith_(self, that, Tp.tuple);
}
function suspend(f) {
  return new Suspend(f);
}
function succeedWith(f) {
  return suspend(() => succeed(f()));
}
function tryCatch(onThrow) {
  return (f) => suspend(() => {
    try {
      return succeed(f());
    } catch (u) {
      return fail(onThrow(u));
    }
  });
}
class FoldFrame {
  constructor(failure, apply) {
    this.failure = failure;
    this.apply = apply;
    this._xptag = "FoldFrame";
  }
}
class ApplyFrame {
  constructor(apply) {
    this.apply = apply;
    this._xptag = "ApplyFrame";
  }
}
class Runtime {
  constructor() {
    this.stack = void 0;
  }
  pop() {
    var _a;
    const nextInstr = this.stack;
    if (nextInstr) {
      this.stack = (_a = this.stack) === null || _a === void 0 ? void 0 : _a.previous;
    }
    return nextInstr === null || nextInstr === void 0 ? void 0 : nextInstr.value;
  }
  push(cont) {
    this.stack = new import_Stack.Stack(cont, this.stack);
  }
  findNextErrorHandler() {
    let unwinding = true;
    while (unwinding) {
      const nextInstr = this.pop();
      if (nextInstr == null) {
        unwinding = false;
      } else {
        if (nextInstr._xptag === "FoldFrame") {
          unwinding = false;
          this.push(new ApplyFrame(nextInstr.failure));
        }
      }
    }
  }
  runAll(self, s) {
    let s0 = s;
    let a = void 0;
    let environments = void 0;
    let failed = false;
    let curXPure = self;
    let logs = Chunk.empty();
    while (curXPure != null) {
      ;
      const xp = curXPure;
      switch (xp._xptag) {
        case "FlatMap": {
          ;
          const nested = xp.value;
          const continuation = xp.cont;
          switch (nested._xptag) {
            case "Succeed": {
              curXPure = continuation(nested.a);
              break;
            }
            case "Modify": {
              const updated = nested.run(s0);
              s0 = updated.get(0);
              a = updated.get(1);
              curXPure = continuation(a);
              break;
            }
            default: {
              curXPure = nested;
              this.push(new ApplyFrame(continuation));
            }
          }
          break;
        }
        case "Log": {
          logs = Chunk.append_(logs, xp.w);
          a = void 0;
          const nextInstr = this.pop();
          curXPure = nextInstr === null || nextInstr === void 0 ? void 0 : nextInstr.apply(a);
          break;
        }
        case "Suspend": {
          curXPure = xp.f();
          break;
        }
        case "Succeed": {
          a = xp.a;
          const nextInstr = this.pop();
          if (nextInstr) {
            curXPure = nextInstr.apply(a);
          } else {
            curXPure = void 0;
          }
          break;
        }
        case "Fail": {
          this.findNextErrorHandler();
          const nextInst = this.pop();
          if (nextInst) {
            curXPure = nextInst.apply(xp.e);
          } else {
            failed = true;
            a = xp.e;
            curXPure = void 0;
          }
          break;
        }
        case "Fold": {
          const state = s0;
          this.push(new FoldFrame((c) => chain_(set(state), () => xp.failure(c)), xp.success));
          curXPure = xp.value;
          break;
        }
        case "Access": {
          curXPure = xp.access((environments === null || environments === void 0 ? void 0 : environments.value) || {});
          break;
        }
        case "Provide": {
          environments = new import_Stack.Stack(xp.r, environments);
          curXPure = foldM_(xp.cont, (e) => chain_(succeedWith(() => {
            environments = environments === null || environments === void 0 ? void 0 : environments.previous;
          }), () => fail(e)), (a2) => chain_(succeedWith(() => {
            environments = environments === null || environments === void 0 ? void 0 : environments.previous;
          }), () => succeed(a2)));
          break;
        }
        case "Modify": {
          const updated = xp.run(s0);
          s0 = updated.get(0);
          a = updated.get(1);
          const nextInst = this.pop();
          if (nextInst) {
            curXPure = nextInst.apply(a);
          } else {
            curXPure = void 0;
          }
          break;
        }
      }
    }
    if (failed) {
      return Tp.tuple(logs, E.left(a));
    }
    return Tp.tuple(logs, E.right(Tp.tuple(s0, a)));
  }
}
function runAll_(self, s) {
  return new Runtime().runAll(self, s);
}
function runAll(s) {
  return (self) => runAll_(self, s);
}
function run(self) {
  return runState_(self, void 0).get(1);
}
function runState_(self, s) {
  const result = new Runtime().runAll(self, s).get(1);
  if (result._tag === "Left") {
    throw result.left;
  }
  return result.right;
}
function runState(s) {
  return (self) => runState_(self, s);
}
function runEither(self) {
  return E.map_(new Runtime().runAll(self, void 0).get(1), (x) => x.get(1));
}
function runLog(self) {
  const result = new Runtime().runAll(self, void 0);
  const e = result.get(1);
  if (e._tag === "Left") {
    throw e.left;
  }
  return Tp.tuple(result.get(0), e.right.get(1));
}
function runResult_(self, s) {
  return runState_(self, s)[1];
}
function runResult(s) {
  return (self) => runResult_(self, s);
}
module.exports = __toCommonJS(core_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  XPureBase,
  access,
  accessM,
  bimap,
  bimap_,
  catchAll,
  catchAll_,
  chain,
  chain_,
  contramapInput,
  either,
  environment,
  fail,
  fold,
  foldM,
  foldM_,
  fold_,
  log,
  logWith,
  map,
  mapError,
  mapError_,
  map_,
  modify,
  orElseEither,
  orElseEither_,
  provide,
  provideAll,
  provideAll_,
  provideSome,
  run,
  runAll,
  runAll_,
  runEither,
  runLog,
  runResult,
  runResult_,
  runState,
  runState_,
  set,
  succeed,
  succeedWith,
  suspend,
  tap,
  tap_,
  tryCatch,
  unit,
  update,
  zip,
  zipWith,
  zipWith_,
  zip_
});
