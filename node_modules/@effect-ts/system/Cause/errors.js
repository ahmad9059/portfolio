var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var errors_exports = {};
__export(errors_exports, {
  FiberFailure: () => FiberFailure,
  FiberFailureSymbol: () => FiberFailureSymbol,
  IllegalArgumentException: () => IllegalArgumentException,
  IllegalArgumentSymbol: () => IllegalArgumentSymbol,
  IllegalStateException: () => IllegalStateException,
  IllegalStateSymbol: () => IllegalStateSymbol,
  InterruptedException: () => InterruptedException,
  InterruptedSymbol: () => InterruptedSymbol,
  RuntimeError: () => RuntimeError,
  RuntimeSymbol: () => RuntimeSymbol,
  Untraced: () => Untraced,
  UntracedSymbol: () => UntracedSymbol,
  isFiberFailure: () => isFiberFailure,
  isIllegalArgumentException: () => isIllegalArgumentException,
  isIllegalStateException: () => isIllegalStateException,
  isInterruptedException: () => isInterruptedException,
  isRuntime: () => isRuntime,
  isUntraced: () => isUntraced
});
var import_Pretty = require("./Pretty/index.js");
var _a, _b, _c, _d, _e, _f;
const FiberFailureSymbol = /* @__PURE__ */ Symbol.for("@matechs/core/symbols/errors/FiberFailure");
class FiberFailure extends Error {
  constructor(cause) {
    super();
    this.cause = cause;
    this[_a] = "FiberFailure";
    this.pretty = (0, import_Pretty.pretty)(this.cause);
    this.name = this[FiberFailureSymbol];
    delete this.stack;
  }
}
_a = FiberFailureSymbol;
const isFiberFailure = (u) => u instanceof Error && u[FiberFailureSymbol] === "FiberFailure";
const UntracedSymbol = /* @__PURE__ */ Symbol.for("@matechs/core/symbols/errors/Untraced");
class Untraced extends Error {
  constructor(message) {
    super(message);
    this[_b] = "Untraced";
    delete this.stack;
    this.name = this[UntracedSymbol];
  }
}
_b = UntracedSymbol;
const isUntraced = (u) => u instanceof Error && u[UntracedSymbol] === "Untraced";
const RuntimeSymbol = /* @__PURE__ */ Symbol.for("@matechs/core/symbols/errors/Runtime");
class RuntimeError {
  constructor(message) {
    this.message = message;
    this[_c] = "RuntimeError";
  }
}
_c = RuntimeSymbol;
const isRuntime = (u) => u instanceof RuntimeError && u[RuntimeSymbol] === "RuntimeError";
const InterruptedSymbol = /* @__PURE__ */ Symbol.for("@matechs/core/symbols/errors/Interrupted");
class InterruptedException extends Error {
  constructor(message) {
    super(message);
    this[_d] = "InterruptedException";
    this.name = this[InterruptedSymbol];
  }
}
_d = InterruptedSymbol;
const isInterruptedException = (u) => u instanceof Error && u[InterruptedSymbol] === "InterruptedException";
const IllegalStateSymbol = /* @__PURE__ */ Symbol.for("@matechs/core/symbols/errors/IllegalState");
class IllegalStateException extends Error {
  constructor(message) {
    super(message);
    this[_e] = "IllegalStateException";
    this.name = this[IllegalStateSymbol];
  }
}
_e = IllegalStateSymbol;
const isIllegalStateException = (u) => u instanceof Error && u[IllegalStateSymbol] === "IllegalStateException";
const IllegalArgumentSymbol = /* @__PURE__ */ Symbol.for("@matechs/core/symbols/errors/IllegalArgument");
class IllegalArgumentException extends Error {
  constructor(message) {
    super(message);
    this[_f] = "IllegalArgumentException";
    this.name = this[IllegalArgumentSymbol];
  }
}
_f = IllegalArgumentSymbol;
const isIllegalArgumentException = (u) => u instanceof Error && u[IllegalArgumentSymbol] === "IllegalArgumentException";
module.exports = __toCommonJS(errors_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FiberFailure,
  FiberFailureSymbol,
  IllegalArgumentException,
  IllegalArgumentSymbol,
  IllegalStateException,
  IllegalStateSymbol,
  InterruptedException,
  InterruptedSymbol,
  RuntimeError,
  RuntimeSymbol,
  Untraced,
  UntracedSymbol,
  isFiberFailure,
  isIllegalArgumentException,
  isIllegalStateException,
  isInterruptedException,
  isRuntime,
  isUntraced
});
