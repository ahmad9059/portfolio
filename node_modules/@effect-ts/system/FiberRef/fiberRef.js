var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var fiberRef_exports = {};
__export(fiberRef_exports, {
  Derived: () => Derived,
  DerivedAll: () => DerivedAll,
  Runtime: () => Runtime,
  TypeId: () => TypeId,
  concrete: () => concrete
});
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var E = __toESM(require("../Either/index.js"));
var import_Function = require("../Function/index.js");
var T = __toESM(require("./excl-effect.js"));
const TypeId = /* @__PURE__ */ Symbol();
class Runtime {
  constructor(initial, fork = import_Function.identity, join = (_, a) => a) {
    this.initial = initial;
    this.fork = fork;
    this.join = join;
    this._tag = "Runtime";
    this._typeId = TypeId;
  }
  fold(_ea, _eb, ca, bd) {
    return new Derived((f) => f(this, bd, ca));
  }
  foldAll(_ea, _eb, _ec, ca, bd) {
    return new DerivedAll((f) => f(this, (s) => bd(s), (c) => (s) => ca(c)(s)));
  }
  modify(f) {
    return new T.IFiberRefModify(this, f);
  }
  get get() {
    return this.modify((v) => Tp.tuple(v, v));
  }
  locally(a, use) {
    return T.chain_(this.get, (oldValue) => T.bracket_(this.set(a), () => use, () => this.set(oldValue)));
  }
  set(value) {
    return this.modify(() => Tp.tuple(void 0, value));
  }
}
class Derived {
  constructor(use) {
    this.use = use;
    this._tag = "Derived";
    this._typeId = TypeId;
  }
  fold(ea, eb, ca, bd) {
    return this.use((value, getEither, setEither) => new Derived((f) => f(value, (s) => E.fold_(getEither(s), (e) => E.left(eb(e)), bd), (c) => E.chain_(ca(c), (a) => E.fold_(setEither(a), (e) => E.left(ea(e)), E.right)))));
  }
  foldAll(ea, eb, ec, ca, _bd) {
    return this.use((value, getEither, setEither) => new DerivedAll((f) => f(value, (s) => E.fold_(getEither(s), (e) => E.left(eb(e)), E.right), (c) => (s) => E.chain_(E.fold_(getEither(s), (e) => E.left(ec(e)), ca(c)), (a) => E.fold_(setEither(a), (e) => E.left(ea(e)), E.right)))));
  }
  get get() {
    return this.use((value, getEither) => T.chain_(value.get, (s) => E.fold_(getEither(s), T.fail, T.succeed)));
  }
  locally(a, use) {
    return this.use((value, _getEither, setEither) => T.chain_(value.get, (old) => E.fold_(setEither(a), (e) => T.fail(e), (s) => T.bracket_(value.set(s), () => use, () => value.set(old)))));
  }
  set(a) {
    return this.use((value, _getEither, setEither) => E.fold_(setEither(a), T.fail, (s) => value.set(s)));
  }
}
class DerivedAll {
  constructor(use) {
    this.use = use;
    this._tag = "DerivedAll";
    this._typeId = TypeId;
  }
  fold(ea, eb, ca, bd) {
    return this.use((value, getEither, setEither) => new DerivedAll((f) => f(value, (s) => E.fold_(getEither(s), (e) => E.left(eb(e)), bd), (c) => (s) => E.chain_(ca(c), (a) => E.fold_(setEither(a)(s), (e) => E.left(ea(e)), E.right)))));
  }
  foldAll(ea, eb, ec, ca, bd) {
    return this.use((value, getEither, setEither) => new DerivedAll((f) => f(value, (s) => E.fold_(getEither(s), (e) => E.left(eb(e)), bd), (c) => (s) => E.chain_(E.fold_(getEither(s), (e) => E.left(ec(e)), ca(c)), (a) => E.fold_(setEither(a)(s), (e) => E.left(ea(e)), E.right)))));
  }
  get get() {
    return this.use((value, getEither) => T.chain_(value.get, (s) => E.fold_(getEither(s), T.fail, T.succeed)));
  }
  locally(a, use) {
    return this.use((value, _getEither, setEither) => T.chain_(value.get, (old) => E.fold_(setEither(a)(old), (e) => T.fail(e), (s) => T.bracket_(value.set(s), () => use, () => value.set(old)))));
  }
  set(a) {
    return this.use((value, _getEither, setEither) => T.absolve(value.modify((s) => E.fold_(setEither(a)(s), (e) => Tp.tuple(E.leftW(e), s), (s2) => Tp.tuple(E.right(void 0), s2)))));
  }
}
function concrete(_) {
  return _;
}
module.exports = __toCommonJS(fiberRef_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Derived,
  DerivedAll,
  Runtime,
  TypeId,
  concrete
});
