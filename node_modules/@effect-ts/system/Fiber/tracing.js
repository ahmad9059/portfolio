var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var tracing_exports = {};
__export(tracing_exports, {
  NoLocation: () => NoLocation,
  SourceLocation: () => SourceLocation,
  Trace: () => Trace,
  ancestryLength: () => ancestryLength,
  ancestryLengthSafe: () => ancestryLengthSafe,
  parents: () => parents,
  prettyTrace: () => prettyTrace,
  prettyTraceSafe: () => prettyTraceSafe,
  traceLocation: () => traceLocation,
  truncatedParentTrace: () => truncatedParentTrace
});
var L = __toESM(require("../Collections/Immutable/List/core.js"));
var O = __toESM(require("../Option/index.js"));
var S = __toESM(require("../Sync/index.js"));
var import_id = require("./id.js");
class NoLocation {
  constructor() {
    this._tag = "NoLocation";
  }
}
class SourceLocation {
  constructor(location) {
    this.location = location;
    this._tag = "SourceLocation";
  }
}
function traceLocation(k) {
  if (k) {
    return new SourceLocation(k);
  }
  return new NoLocation();
}
class Trace {
  constructor(fiberId, executionTrace, stackTrace, parentTrace) {
    this.fiberId = fiberId;
    this.executionTrace = executionTrace;
    this.stackTrace = stackTrace;
    this.parentTrace = parentTrace;
  }
}
function ancestryLengthSafe(trace, i) {
  const parent = trace.parentTrace;
  if (parent._tag === "None") {
    return S.succeed(i);
  } else {
    return S.suspend(() => ancestryLengthSafe(parent.value, i + 1));
  }
}
function ancestryLength(trace) {
  return S.run(ancestryLengthSafe(trace, 0));
}
function parents(trace) {
  const pushable = L.emptyPushable();
  let parent = O.toUndefined(trace.parentTrace);
  while (parent != null) {
    L.push_(pushable, parent);
    parent = O.toUndefined(parent.parentTrace);
  }
  return pushable;
}
function truncatedParentTrace(trace, maxAncestors) {
  if (ancestryLength(trace) > maxAncestors) {
    return L.reduceRight_(L.take_(parents(trace), maxAncestors), O.none, (trace2, parent) => O.some(new Trace(trace2.fiberId, trace2.executionTrace, trace2.stackTrace, parent)));
  } else {
    return trace.parentTrace;
  }
}
function prettyTrace(trace) {
  return S.run(prettyTraceSafe(trace));
}
function prettyTraceSafe(trace) {
  return S.gen(function* ($) {
    const execution = L.filter_(trace.executionTrace, (_) => _._tag === "SourceLocation");
    const stack = L.filter_(trace.stackTrace, (_) => _._tag === "SourceLocation");
    const execTrace = !L.isEmpty(execution);
    const stackTrace = !L.isEmpty(stack);
    const execPrint = execTrace ? [`Fiber: ${(0, import_id.prettyFiberId)(trace.fiberId)} Execution trace:`, "", ...L.toArray(L.map_(execution, (a) => `  ${a.location}`))] : [`Fiber: ${(0, import_id.prettyFiberId)(trace.fiberId)} Execution trace: <empty trace>`];
    const stackPrint = stackTrace ? [`Fiber: ${(0, import_id.prettyFiberId)(trace.fiberId)} was supposed to continue to:`, "", ...L.toArray(L.map_(stack, (e) => `  a future continuation at ${e.location}`))] : [`Fiber: ${(0, import_id.prettyFiberId)(trace.fiberId)} was supposed to continue to: <empty trace>`];
    const parent = trace.parentTrace;
    const ancestry = parent._tag === "None" ? [`Fiber: ${(0, import_id.prettyFiberId)(trace.fiberId)} was spawned by: <empty trace>`] : [`Fiber: ${(0, import_id.prettyFiberId)(trace.fiberId)} was spawned by:`, yield* $(prettyTraceSafe(parent.value))];
    return ["", ...stackPrint, "", ...execPrint, "", ...ancestry].join("\n");
  });
}
module.exports = __toCommonJS(tracing_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NoLocation,
  SourceLocation,
  Trace,
  ancestryLength,
  ancestryLengthSafe,
  parents,
  prettyTrace,
  prettyTraceSafe,
  traceLocation,
  truncatedParentTrace
});
