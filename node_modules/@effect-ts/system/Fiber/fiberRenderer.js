var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var fiberRenderer_exports = {};
__export(fiberRenderer_exports, {
  collectTraces: () => collectTraces,
  dump: () => dump,
  dumpFibers: () => dumpFibers,
  dumpStr: () => dumpStr,
  prettyPrint: () => prettyPrint,
  prettyPrintM: () => prettyPrintM,
  renderHierarchy: () => renderHierarchy,
  renderOne: () => renderOne,
  renderStatus: () => renderStatus
});
var import_Function = require("../Function/index.js");
var IT = __toESM(require("../Iterable/index.js"));
var import_Option = require("../Option/index.js");
var import_parse_ms = require("../Utils/parse-ms.js");
var T = __toESM(require("./_internal/effect-api.js"));
var import_dump = require("./dump.js");
var import_fiberName = require("./fiberName.js");
function dump(fiber) {
  return T.map_(T.zipPar_(fiber.getRef(import_fiberName.fiberName), fiber.status), ({
    tuple: [name, status]
  }) => (0, import_dump.FiberDump)(fiber.id, name, status));
}
function dumpFibers(fibers) {
  return T.forEach_(fibers, dump);
}
function dumpStr(fibers, withTrace) {
  const du = T.forEach_(fibers, dump);
  const now = T.succeedWith(() => new Date().getTime());
  return T.map_(T.zipWith_(du, now, import_Function.tuple), ([dumps, now2]) => {
    const tree = renderHierarchy(dumps);
    const dumpStrings = withTrace ? collectTraces(dumps, now2) : [];
    return IT.reduce_(dumpStrings, tree, (acc, v) => acc + "\n" + v);
  });
}
function prettyPrintM(dump2) {
  return T.succeed(prettyPrint(dump2, new Date().getTime()));
}
function prettyPrint(dump2, now) {
  const {
    days,
    hours,
    milliseconds,
    minutes,
    seconds
  } = (0, import_parse_ms.parseMs)(now - dump2.fiberId.startTimeMillis);
  const name = (0, import_Option.fold_)(dump2.fiberName, (0, import_Function.constant)(""), (n) => `"${n}" `);
  const lifeMsg = (days === 0 ? "" : `${days}d`) + (days === 0 && hours === 0 ? "" : `${hours}h`) + (days === 0 && hours === 0 && minutes === 0 ? "" : `${minutes}m`) + (days === 0 && hours === 0 && minutes === 0 && seconds === 0 ? "" : `${seconds}s`) + `${milliseconds}ms`;
  const waitMsg = function(status) {
    switch (status._tag) {
      case "Suspended":
        return status.blockingOn.length > 0 ? `waiting on ` + status.blockingOn.map((id) => `${id.seqNumber}`).join(", ") : "";
      default:
        return "";
    }
  }(dump2.status);
  const statMsg = renderStatus(dump2.status);
  return [`${name}#${dump2.fiberId.seqNumber} (${lifeMsg}) ${waitMsg}`, `   Status: ${statMsg}`].join("\n");
}
function renderOne(tree) {
  const prefix = "";
  const name = (0, import_Option.fold_)(tree.fiberName, (0, import_Function.constant)(""), (n) => '"' + n + '" ');
  const statusMsg = renderStatus(tree.status);
  return `${prefix}+---${name}#${tree.fiberId.seqNumber} Status: ${statusMsg}
`;
}
function renderStatus(status) {
  switch (status._tag) {
    case "Done":
      return "Done";
    case "Finishing":
      return `Finishing(${status.interrupting ? "interrupting" : ""})`;
    case "Running":
      return `Running(${status.interrupting ? "interrupting" : ""})`;
    case "Suspended": {
      const inter = status.interruptible ? "interruptible" : "uninterruptible";
      const ep = `${status.epoch} asyncs`;
      return `Suspended(${inter}, ${ep})`;
    }
  }
}
function renderHierarchy(trees) {
  return IT.reduce_(IT.map_(trees, renderOne), "", (acc, str) => acc + str);
}
function collectTraces(dumps, now) {
  return IT.map_(dumps, (d) => prettyPrint(d, now));
}
module.exports = __toCommonJS(fiberRenderer_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  collectTraces,
  dump,
  dumpFibers,
  dumpStr,
  prettyPrint,
  prettyPrintM,
  renderHierarchy,
  renderOne,
  renderStatus
});
