var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var state_exports = {};
__export(state_exports, {
  FiberStateDone: () => FiberStateDone,
  FiberStateExecuting: () => FiberStateExecuting,
  initial: () => initial,
  interrupting: () => interrupting
});
var C = __toESM(require("../Cause/index.js"));
var import_status = require("./status.js");
class FiberStateExecuting {
  constructor(status, observers, interrupted) {
    this.status = status;
    this.observers = observers;
    this.interrupted = interrupted;
    this._tag = "Executing";
  }
}
class FiberStateDone {
  constructor(value) {
    this.value = value;
    this._tag = "Done";
    this.interrupted = C.empty;
    this.status = new import_status.Done();
  }
}
function initial() {
  return new FiberStateExecuting(new import_status.Running(false), [], C.empty);
}
function interrupting(state) {
  let current = state.status;
  while (current) {
    switch (current._tag) {
      case "Running": {
        return current.interrupting;
      }
      case "Finishing": {
        return current.interrupting;
      }
      case "Done": {
        return false;
      }
      case "Suspended": {
        current = current.previous;
      }
    }
  }
  throw new Error("BUG: should never end up here");
}
module.exports = __toCommonJS(state_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FiberStateDone,
  FiberStateExecuting,
  initial,
  interrupting
});
