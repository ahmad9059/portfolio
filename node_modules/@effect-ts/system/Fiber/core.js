var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var core_exports = {};
__export(core_exports, {
  Descriptor: () => Descriptor,
  FiberID: () => import_id.FiberID,
  InterruptStatus: () => InterruptStatus,
  None: () => import_id.None,
  Synthetic: () => Synthetic,
  equalsFiberID: () => import_id.equalsFiberID,
  interruptStatus: () => interruptStatus,
  interruptible: () => interruptible,
  join: () => join,
  newFiberId: () => import_id.newFiberId,
  uninterruptible: () => uninterruptible
});
var import_core = require("../Effect/core.js");
var import_done = require("../Effect/done.js");
var import_tap = require("../Effect/tap.js");
var import_id = require("./id.js");
class Descriptor {
  constructor(id, status, interruptors, interruptStatus2, scope) {
    this.id = id;
    this.status = status;
    this.interruptors = interruptors;
    this.interruptStatus = interruptStatus2;
    this.scope = scope;
  }
}
class Synthetic {
  constructor(_await, getRef, inheritRefs, interruptAs, poll) {
    this.getRef = getRef;
    this.inheritRefs = inheritRefs;
    this.interruptAs = interruptAs;
    this.poll = poll;
    this._tag = "SyntheticFiber";
    this.await = _await;
  }
}
class InterruptStatus {
  constructor(isInterruptible) {
    this.isInterruptible = isInterruptible;
  }
  get isUninteruptible() {
    return !this.isInterruptible;
  }
  get toBoolean() {
    return this.isInterruptible;
  }
}
const interruptible = /* @__PURE__ */ new InterruptStatus(true);
const uninterruptible = /* @__PURE__ */ new InterruptStatus(false);
const interruptStatus = (b) => b ? interruptible : uninterruptible;
function join(fiber) {
  return (0, import_tap.tap_)((0, import_core.chain_)(fiber.await, import_done.done), () => fiber.inheritRefs);
}
module.exports = __toCommonJS(core_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Descriptor,
  FiberID,
  InterruptStatus,
  None,
  Synthetic,
  equalsFiberID,
  interruptStatus,
  interruptible,
  join,
  newFiberId,
  uninterruptible
});
