var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Strategy_exports = {};
__export(Strategy_exports, {
  None: () => None,
  StrategyBase: () => StrategyBase,
  TimeToLive: () => TimeToLive
});
var CL = __toESM(require("../Clock/index.js"));
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../Effect/index.js"));
var import_Function = require("../Function/index.js");
var Ref = __toESM(require("../Ref/index.js"));
class StrategyBase {
}
T._R, T._E, T._A;
class None extends StrategyBase {
  initial() {
    return T.unit;
  }
  track(_state) {
    return (_attempted) => T.unit;
  }
  run(_state, _getExcess, _shrink) {
    return T.unit;
  }
}
class TimeToLive extends StrategyBase {
  constructor(timeToLive) {
    super();
    this.timeToLive = timeToLive;
    this.initial = this.initial.bind(this);
    this.track = this.track.bind(this);
    this.run = this.run.bind(this);
  }
  initial() {
    return T.map_(T.bind_(T.bind_(T.bind_(T.do, "clock", () => T.service(CL.HasClock)), "now", ({
      clock
    }) => clock.currentTime), "ref", ({
      now
    }) => Ref.makeRef(now)), ({
      clock,
      ref
    }) => Tp.tuple(clock, ref));
  }
  track(state) {
    return (_attempted) => {
      const {
        tuple: [clock, ref]
      } = state;
      return T.asUnit(T.tap_(T.bind_(T.do, "now", () => clock.currentTime), ({
        now
      }) => ref.set(now)));
    };
  }
  run(state, getExcess, shrink) {
    const {
      tuple: [clock, ref]
    } = state;
    return T.chain_(getExcess, (excess) => {
      if (excess <= 0) {
        return T.zipRight_(clock.sleep(this.timeToLive), this.run(state, getExcess, shrink));
      } else {
        return T.chain_(T.zip_(ref.get, clock.currentTime), ({
          tuple: [start, end]
        }) => {
          const duration = end - start;
          if (duration >= this.timeToLive) {
            return T.zipRight_(shrink, this.run(state, getExcess, shrink));
          } else {
            return T.zipRight_(clock.sleep(this.timeToLive), this.run(state, getExcess, shrink));
          }
        });
      }
    });
  }
}
module.exports = __toCommonJS(Strategy_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  None,
  StrategyBase,
  TimeToLive
});
