var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Layer_exports = {};
__export(Layer_exports, {
  Empty: () => import_core.Empty,
  Layer: () => import_core.Layer,
  MemoMap: () => import_core.MemoMap,
  all: () => import_core.all,
  allSeq: () => import_core.allSeq,
  and: () => import_core.and,
  andSeq: () => import_core.andSeq,
  andSeq_: () => import_core.andSeq_,
  and_: () => import_core.and_,
  build: () => import_core.build,
  catchAll: () => import_core.catchAll,
  chain: () => import_core.chain,
  chain_: () => import_core.chain_,
  compose: () => import_core.compose,
  compose_: () => import_core.compose_,
  fail: () => import_core.fail,
  first: () => import_core.first,
  flatten: () => import_core.flatten,
  fold: () => import_core.fold,
  fresh: () => import_core.fresh,
  fromEffect: () => import_core.fromEffect,
  fromEffect_: () => import_core.fromEffect_,
  fromFunction: () => import_core.fromFunction,
  fromManaged: () => import_core.fromManaged,
  fromManaged_: () => import_core.fromManaged_,
  fromRawEffect: () => import_core.fromRawEffect,
  fromRawFunction: () => import_core.fromRawFunction,
  fromRawFunctionM: () => import_core.fromRawFunctionM,
  fromRawManaged: () => import_core.fromRawManaged,
  fromValue: () => import_core.fromValue,
  identity: () => import_core.identity,
  launch: () => import_core.launch,
  main: () => import_core.main,
  makeMemoMap: () => import_core.makeMemoMap,
  map: () => import_core.map,
  mapError: () => import_core.mapError,
  map_: () => import_core.map_,
  orDie: () => import_core.orDie,
  orElse: () => import_core.orElse,
  restrict: () => import_core.restrict,
  retry: () => import_core.retry,
  scope: () => import_core.scope,
  second: () => import_core.second,
  succeed: () => import_core.succeed,
  suspend: () => import_core.suspend,
  toRuntime: () => import_core.toRuntime,
  using: () => import_core.using,
  usingAnd: () => import_core.usingAnd,
  zip: () => import_core.zip,
  zipPar: () => import_core.zipPar,
  zipPar_: () => import_core.zipPar_,
  zipWithPar: () => import_core.zipWithPar,
  zipWithPar_: () => import_core.zipWithPar_,
  zip_: () => import_core.zip_
});
var import_Operator = require("../Operator/index.js");
var import_core = require("./core.js");
__reExport(Layer_exports, require("./unsafe.js"));
module.exports = __toCommonJS(Layer_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Empty,
  Layer,
  MemoMap,
  all,
  allSeq,
  and,
  andSeq,
  andSeq_,
  and_,
  build,
  catchAll,
  chain,
  chain_,
  compose,
  compose_,
  fail,
  first,
  flatten,
  fold,
  fresh,
  fromEffect,
  fromEffect_,
  fromFunction,
  fromManaged,
  fromManaged_,
  fromRawEffect,
  fromRawFunction,
  fromRawFunctionM,
  fromRawManaged,
  fromValue,
  identity,
  launch,
  main,
  makeMemoMap,
  map,
  mapError,
  map_,
  orDie,
  orElse,
  restrict,
  retry,
  scope,
  second,
  succeed,
  suspend,
  toRuntime,
  using,
  usingAnd,
  zip,
  zipPar,
  zipPar_,
  zipWithPar,
  zipWithPar_,
  zip_
});
