var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var definitions_exports = {};
__export(definitions_exports, {
  Empty: () => Empty,
  Layer: () => Layer,
  LayerAllPar: () => LayerAllPar,
  LayerAllSeq: () => LayerAllSeq,
  LayerChain: () => LayerChain,
  LayerFold: () => LayerFold,
  LayerFresh: () => LayerFresh,
  LayerManaged: () => LayerManaged,
  LayerMap: () => LayerMap,
  LayerSuspend: () => LayerSuspend,
  LayerZipWithPar: () => LayerZipWithPar,
  LayerZipWithSeq: () => LayerZipWithSeq,
  MemoMap: () => MemoMap,
  and: () => and,
  and_: () => and_,
  build: () => build,
  compose: () => compose,
  compose_: () => compose_,
  fold: () => fold,
  fromRawEffect: () => fromRawEffect,
  fromRawFunction: () => fromRawFunction,
  fromRawFunctionM: () => fromRawFunctionM,
  fromRawManaged: () => fromRawManaged,
  hashSym: () => hashSym,
  identity: () => identity,
  makeMemoMap: () => makeMemoMap,
  provideLayer: () => provideLayer,
  provideLayer_: () => provideLayer_,
  provideSomeLayer: () => provideSomeLayer,
  provideSomeLayer_: () => provideSomeLayer_,
  scope: () => scope,
  using: () => using,
  usingAnd: () => usingAnd
});
var import_reduce = require("../Collections/Immutable/Chunk/api/reduce.js");
var import_Map = require("../Collections/Immutable/Map/index.js");
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var import_commons = require("../Effect/commons.js");
var import_ExecutionStrategy = require("../Effect/ExecutionStrategy.js");
var import_Function = require("../Function/index.js");
var import_core = require("../Managed/core.js");
var import_do = require("../Managed/do.js");
var import_forEach = require("../Managed/forEach.js");
var import_fromEffect = require("../Managed/fromEffect.js");
var import_managed = require("../Managed/managed.js");
var import_environment = require("../Managed/methods/environment.js");
var add = __toESM(require("../Managed/ReleaseMap/add.js"));
var Finalizer = __toESM(require("../Managed/ReleaseMap/finalizer.js"));
var makeReleaseMap = __toESM(require("../Managed/ReleaseMap/makeReleaseMap.js"));
var releaseAll = __toESM(require("../Managed/ReleaseMap/releaseAll.js"));
var import_succeed = require("../Managed/succeed.js");
var import_use = require("../Managed/use.js");
var import_await = require("../Promise/await.js");
var import_halt = require("../Promise/halt.js");
var import_make = require("../Promise/make.js");
var import_succeed2 = require("../Promise/succeed.js");
var R = __toESM(require("../Ref/index.js"));
var RM = __toESM(require("../RefM/index.js"));
var import_AtomicReference = require("../Support/AtomicReference/index.js");
var T = __toESM(require("./deps-effect.js"));
var _a;
function fromRawEffect(resource) {
  return new LayerManaged((0, import_fromEffect.fromEffect)(resource));
}
function fromRawFunction(f) {
  return fromRawEffect(T.access(f));
}
function fromRawFunctionM(f) {
  return fromRawEffect(T.accessM(f));
}
function fromRawManaged(resource) {
  return new LayerManaged(resource);
}
function identity() {
  return fromRawManaged((0, import_environment.environment)());
}
function and_(self, that) {
  return new LayerZipWithPar(self, that, (l, r) => __spreadValues(__spreadValues({}, l), r));
}
function and(that) {
  return (self) => new LayerZipWithPar(self, that, (l, r) => __spreadValues(__spreadValues({}, l), r));
}
function fold(self) {
  return (failure) => (success) => new LayerFold(self, failure, success);
}
function using(from) {
  return (to) => compose_(from["+++"](identity()), to);
}
function usingAnd(from) {
  return (to) => compose_(from["+++"](identity()), to["+++"](identity()));
}
function compose_(from, to) {
  return fold(from)(fromRawFunctionM((_) => T.halt(_.get(1))))(to);
}
function compose(to) {
  return (from) => compose_(from, to);
}
const hashSym = /* @__PURE__ */ Symbol();
class Layer {
  constructor() {
    this[_a] = new import_AtomicReference.AtomicReference(Symbol());
  }
  setKey(hash) {
    this[hashSym].set(hash);
    return this;
  }
  [(_a = hashSym, "_I")]() {
    return this;
  }
  ["<=<"](that) {
    return that[">=>"](this);
  }
  [">=>"](that) {
    return compose_(this, that);
  }
  ["<<<"](that) {
    return that[">>>"](this);
  }
  [">>>"](that) {
    return this["+++"](identity())[">=>"](that);
  }
  [">+>"](that) {
    return this[">>>"](that["+++"](identity()));
  }
  ["<+<"](that) {
    return that[">+>"](this);
  }
  ["+++"](from) {
    return and_(from, this);
  }
  use(effect) {
    return provideSomeLayer(this)(effect);
  }
  useAll(effect) {
    return provideLayer(this)(effect);
  }
  get useForever() {
    return provideLayer(this)(T.never);
  }
}
function provideSomeLayer(layer) {
  return (self) => provideLayer_(self, layer["+++"](identity()));
}
function provideSomeLayer_(self, layer) {
  return provideLayer_(self, layer["+++"](identity()));
}
function provideLayer_(self, layer) {
  return (0, import_use.use_)(build(layer), (p) => T.provideAll_(self, p));
}
function provideLayer(layer) {
  return (self) => provideLayer_(self, layer);
}
class LayerFold extends Layer {
  constructor(self, failure, success) {
    super();
    this.self = self;
    this.failure = failure;
    this.success = success;
    this._tag = "LayerFold";
  }
}
class LayerMap extends Layer {
  constructor(self, f) {
    super();
    this.self = self;
    this.f = f;
    this._tag = "LayerMap";
  }
}
class LayerChain extends Layer {
  constructor(self, f) {
    super();
    this.self = self;
    this.f = f;
    this._tag = "LayerChain";
  }
}
class LayerFresh extends Layer {
  constructor(self) {
    super();
    this.self = self;
    this._tag = "LayerFresh";
  }
}
class LayerManaged extends Layer {
  constructor(self) {
    super();
    this.self = self;
    this._tag = "LayerManaged";
  }
}
class LayerSuspend extends Layer {
  constructor(self) {
    super();
    this.self = self;
    this._tag = "LayerSuspend";
  }
}
class LayerZipWithPar extends Layer {
  constructor(self, that, f) {
    super();
    this.self = self;
    this.that = that;
    this.f = f;
    this._tag = "LayerZipWithPar";
  }
}
class LayerAllPar extends Layer {
  constructor(layers) {
    super();
    this.layers = layers;
    this._tag = "LayerAllPar";
  }
}
class LayerAllSeq extends Layer {
  constructor(layers) {
    super();
    this.layers = layers;
    this._tag = "LayerAllSeq";
  }
}
class LayerZipWithSeq extends Layer {
  constructor(self, that, f) {
    super();
    this.self = self;
    this.that = that;
    this.f = f;
    this._tag = "LayerZipWithSeq";
  }
}
function scope(_) {
  const I = _._I();
  switch (I._tag) {
    case "LayerFresh": {
      return (0, import_succeed.succeed)(() => build(I.self));
    }
    case "LayerManaged": {
      return (0, import_succeed.succeed)(() => I.self);
    }
    case "LayerSuspend": {
      return (0, import_succeed.succeed)((memo) => memo.getOrElseMemoize(I.self()));
    }
    case "LayerMap": {
      return (0, import_succeed.succeed)((memo) => (0, import_core.map_)(memo.getOrElseMemoize(I.self), I.f));
    }
    case "LayerChain": {
      return (0, import_succeed.succeed)((memo) => (0, import_core.chain_)(memo.getOrElseMemoize(I.self), (a) => memo.getOrElseMemoize(I.f(a))));
    }
    case "LayerZipWithPar": {
      return (0, import_succeed.succeed)((memo) => (0, import_core.zipWithPar_)(memo.getOrElseMemoize(I.self), memo.getOrElseMemoize(I.that), I.f));
    }
    case "LayerZipWithSeq": {
      return (0, import_succeed.succeed)((memo) => (0, import_core.zipWith_)(memo.getOrElseMemoize(I.self), memo.getOrElseMemoize(I.that), I.f));
    }
    case "LayerAllPar": {
      return (0, import_succeed.succeed)((memo) => {
        return (0, import_core.map)((0, import_reduce.reduce)({}, (b, a) => __spreadValues(__spreadValues({}, b), a)))((0, import_forEach.forEachPar_)(I.layers, memo.getOrElseMemoize));
      });
    }
    case "LayerAllSeq": {
      return (0, import_succeed.succeed)((memo) => {
        return (0, import_core.map)((0, import_reduce.reduce)({}, (b, a) => __spreadValues(__spreadValues({}, b), a)))((0, import_forEach.forEach_)(I.layers, memo.getOrElseMemoize));
      });
    }
    case "LayerFold": {
      return (0, import_succeed.succeed)((memo) => (0, import_core.foldCauseM_)(memo.getOrElseMemoize(I.self), (e) => (0, import_core.chain)((r) => (0, import_core.provideSome_)(memo.getOrElseMemoize(I.failure), () => Tp.tuple(r, e)))((0, import_fromEffect.fromEffect)(T.environment())), (r) => (0, import_core.provideAll_)(memo.getOrElseMemoize(I.success), r)));
    }
  }
}
function build(_) {
  return (0, import_core.map)(({
    value
  }) => value)((0, import_do.bind)("value", ({
    memoMap,
    run
  }) => run(memoMap))((0, import_do.bind)("run", () => scope(_))((0, import_do.bind)("memoMap", () => (0, import_fromEffect.fromEffect)(makeMemoMap()))(import_do.do))));
}
function makeMemoMap() {
  return T.chain_(RM.makeRefM(/* @__PURE__ */ new Map()), (r) => T.succeedWith(() => new MemoMap(r)));
}
class MemoMap {
  constructor(ref) {
    this.ref = ref;
    this.getOrElseMemoize = (layer) => {
      return (0, import_managed.managedApply)(T.flatten(RM.modify((m) => {
        const inMap = m.get(layer[hashSym].get);
        if (inMap) {
          const {
            tuple: [acquire, release]
          } = inMap;
          const cached = T.accessM(({
            tuple: [_, rm]
          }) => T.map_(T.onExit_(acquire, (ex) => {
            switch (ex._tag) {
              case "Success": {
                return add.add(release)(rm);
              }
              case "Failure": {
                return T.unit;
              }
            }
          }), (x) => Tp.tuple(release, x)));
          return T.succeed(Tp.tuple(cached, m));
        } else {
          return T.map_(T.let_(T.let_(T.bind_(T.bind_(T.bind_(T.do, "observers", () => R.makeRef(0)), "promise", () => (0, import_make.make)()), "finalizerRef", () => R.makeRef(Finalizer.noopFinalizer)), "resource", ({
            finalizerRef,
            observers,
            promise
          }) => T.uninterruptibleMask(({
            restore
          }) => T.map_(T.bind_(T.bind_(T.let_(T.let_(T.bind_(T.do, "env", () => T.environment()), "a", ({
            env: {
              tuple: [a]
            }
          }) => a), "outerReleaseMap", ({
            env: {
              tuple: [_, outerReleaseMap]
            }
          }) => outerReleaseMap), "innerReleaseMap", () => makeReleaseMap.makeReleaseMap), "tp", ({
            a,
            innerReleaseMap,
            outerReleaseMap
          }) => restore(T.chain_(T.result(T.provideAll_((0, import_core.chain)((_) => _(this))(scope(layer)).effect, Tp.tuple(a, innerReleaseMap))), (e) => {
            switch (e._tag) {
              case "Failure": {
                return T.chain_(T.chain_((0, import_halt.halt)(e.cause)(promise), () => releaseAll.releaseAll(e, import_ExecutionStrategy.sequential)(innerReleaseMap)), () => T.halt(e.cause));
              }
              case "Success": {
                return T.map_(T.tap_(T.bind_(T.tap_(T.tap_(T.do, () => finalizerRef.set((e2) => T.whenM_(releaseAll.releaseAll(e2, import_ExecutionStrategy.sequential)(innerReleaseMap), R.modify_(observers, (n) => Tp.tuple(n === 1, n - 1))))), () => R.update_(observers, (n) => n + 1)), "outerFinalizer", () => add.add((e2) => T.chain_(finalizerRef.get, (f) => f(e2)))(outerReleaseMap)), () => (0, import_succeed2.succeed)(e.value.get(1))(promise)), ({
                  outerFinalizer
                }) => Tp.tuple(outerFinalizer, e.value.get(1)));
              }
            }
          }))), ({
            tp
          }) => tp))), "memoized", ({
            finalizerRef,
            observers,
            promise
          }) => Tp.tuple(T.onExit_((0, import_await.await)(promise), (e) => {
            switch (e._tag) {
              case "Failure": {
                return T.unit;
              }
              case "Success": {
                return R.update_(observers, (n) => n + 1);
              }
            }
          }), (e) => T.chain_(finalizerRef.get, (f) => f(e)))), ({
            memoized,
            resource
          }) => Tp.tuple(resource, (0, import_Map.insert)(layer[hashSym].get, memoized)(m)));
        }
      })(this.ref)));
    };
  }
}
const Empty = /* @__PURE__ */ new LayerSuspend(() => identity());
module.exports = __toCommonJS(definitions_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Empty,
  Layer,
  LayerAllPar,
  LayerAllSeq,
  LayerChain,
  LayerFold,
  LayerFresh,
  LayerManaged,
  LayerMap,
  LayerSuspend,
  LayerZipWithPar,
  LayerZipWithSeq,
  MemoMap,
  and,
  and_,
  build,
  compose,
  compose_,
  fold,
  fromRawEffect,
  fromRawFunction,
  fromRawFunctionM,
  fromRawManaged,
  hashSym,
  identity,
  makeMemoMap,
  provideLayer,
  provideLayer_,
  provideSomeLayer,
  provideSomeLayer_,
  scope,
  using,
  usingAnd
});
