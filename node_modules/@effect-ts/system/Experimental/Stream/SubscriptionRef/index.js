var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var SubscriptionRef_exports = {};
__export(SubscriptionRef_exports, {
  SubscriptionRef: () => SubscriptionRef,
  make: () => make
});
var A = __toESM(require("../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../Effect/index.js"));
var import_Function = require("../../../Function/index.js");
var H = __toESM(require("../../../Hub/index.js"));
var M = __toESM(require("../../../Managed/index.js"));
var RefM = __toESM(require("../../../RefM/index.js"));
var S = __toESM(require("../index.js"));
class SubscriptionRef {
  constructor(ref, changes) {
    this.ref = ref;
    this.changes = changes;
  }
}
function make(a) {
  return T.map_(T.let_(T.bind_(T.bind_(T.do, "ref", () => RefM.makeRefM(a)), "hub", () => H.makeUnbounded()), "changes", ({
    hub,
    ref
  }) => S.unwrapManaged(M.managedApply(T.uninterruptible(RefM.modify_(ref, (a2) => T.zipWith_(T.succeed(a2), H.subscribe(hub).effect, (a3, {
    tuple: [finalizer, queue]
  }) => Tp.tuple(Tp.tuple(finalizer, S.concat_(S.fromChunk(A.single(a3)), S.fromQueue()(queue))), a3))))))), ({
    changes,
    hub,
    ref
  }) => new SubscriptionRef(RefM.tapInput_(ref, (_) => H.publish_(hub, _)), changes));
}
module.exports = __toCommonJS(SubscriptionRef_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SubscriptionRef,
  make
});
