var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var mergeWith_exports = {};
__export(mergeWith_exports, {
  mergeWith: () => mergeWith,
  mergeWith_: () => mergeWith_
});
var T = __toESM(require("../../../../Effect/index.js"));
var E = __toESM(require("../../../../Either/index.js"));
var Ex = __toESM(require("../../../../Exit/index.js"));
var F = __toESM(require("../../../../Fiber/index.js"));
var import_Function = require("../../../../Function/index.js");
var M = __toESM(require("../../../../Managed/index.js"));
var MH = __toESM(require("../_internal/mergeHelpers.js"));
var C = __toESM(require("../core.js"));
var FromInput = __toESM(require("./fromInput.js"));
var ToPull = __toESM(require("./toPull.js"));
var Unwrap = __toESM(require("./unwrap.js"));
var UnwrapManaged = __toESM(require("./unwrapManaged.js"));
var ZipRight = __toESM(require("./zipRight.js"));
function mergeWith_(self, that, leftDone, rightDone) {
  const m = M.map_(M.chain_(M.bind_(M.bind_(M.let_(M.bind_(M.do, "input", () => T.toManaged(C.makeSingleProducerAsyncInput())), "queueReader", ({
    input
  }) => FromInput.fromInput(input)), "pullL", ({
    queueReader
  }) => ToPull.toPull(queueReader[">>>"](self))), "pullR", ({
    queueReader
  }) => ToPull.toPull(queueReader[">>>"](that))), ({
    input,
    pullL,
    pullR,
    queueReader
  }) => T.toManaged(T.transplant((graft) => T.succeed({
    input,
    pullL: graft(pullL),
    pullR: graft(pullR),
    queueReader
  })))), ({
    input,
    pullL,
    pullR
  }) => {
    const handleSide = (exit, fiber, pull) => (done, both, single) => {
      const onDecision = (decision) => {
        MH.concrete(decision);
        if (decision._typeId === MH.DoneTypeId) {
          return T.succeed(C.fromEffect(T.zipRight_(F.interrupt(fiber), decision.io)));
        } else {
          return T.map_(fiber.await, Ex.fold((cause) => C.fromEffect(decision.f(Ex.halt(cause))), E.fold((z) => C.fromEffect(decision.f(Ex.succeed(z))), (elem) => ZipRight.zipRight_(C.write(elem), go(single(decision.f))))));
        }
      };
      return Ex.fold_(exit, (failure) => onDecision(done(Ex.halt(failure))), E.fold((z) => onDecision(done(Ex.succeed(z))), (elem) => T.map_(T.forkDaemon(pull), (leftFiber) => ZipRight.zipRight_(C.write(elem), go(both(leftFiber, fiber))))));
    };
    const go = (state) => {
      if (state._typeId === MH.BothRunningTypeId) {
        const lj = F.join(state.left);
        const rj = F.join(state.right);
        return Unwrap.unwrap(T.raceWith_(lj, rj, (leftEx, _) => handleSide(leftEx, state.right, pullL)(leftDone, (l, r) => new MH.BothRunning(l, r), (_2) => new MH.LeftDone(_2)), (rightEx, _) => handleSide(rightEx, state.left, pullR)(rightDone, (l, r) => new MH.BothRunning(r, l), (_2) => new MH.RightDone(_2))));
      } else if (state._typeId === MH.LeftDoneTypeId) {
        return Unwrap.unwrap(T.map_(T.result(pullR), Ex.fold((cause) => C.fromEffect(state.f(Ex.halt(cause))), E.fold((z) => C.fromEffect(state.f(Ex.succeed(z))), (elem) => ZipRight.zipRight_(C.write(elem), go(new MH.LeftDone(state.f)))))));
      } else {
        return Unwrap.unwrap(T.map_(T.result(pullL), Ex.fold((cause) => C.fromEffect(state.f(Ex.halt(cause))), E.fold((z) => C.fromEffect(state.f(Ex.succeed(z))), (elem) => ZipRight.zipRight_(C.write(elem), go(new MH.RightDone(state.f)))))));
      }
    };
    return C.embedInput_(C.chain_(C.fromEffect(T.zipWith_(T.forkDaemon(pullL), T.forkDaemon(pullR), (a, b) => new MH.BothRunning(a, b))), go), input);
  });
  return UnwrapManaged.unwrapManaged(m);
}
function mergeWith(that, leftDone, rightDone) {
  return (self) => mergeWith_(self, that, leftDone, rightDone);
}
module.exports = __toCommonJS(mergeWith_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mergeWith,
  mergeWith_
});
