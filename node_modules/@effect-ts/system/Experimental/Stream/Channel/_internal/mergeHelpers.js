var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var mergeHelpers_exports = {};
__export(mergeHelpers_exports, {
  Await: () => Await,
  AwaitTypeId: () => AwaitTypeId,
  BothRunning: () => BothRunning,
  BothRunningTypeId: () => BothRunningTypeId,
  Done: () => Done,
  DoneTypeId: () => DoneTypeId,
  LeftDone: () => LeftDone,
  LeftDoneTypeId: () => LeftDoneTypeId,
  MergeDecision: () => MergeDecision,
  MergeDecisionTypeId: () => MergeDecisionTypeId,
  RightDone: () => RightDone,
  RightDoneTypeId: () => RightDoneTypeId,
  _E: () => _E,
  _E0: () => _E0,
  _R: () => _R,
  _Z: () => _Z,
  _Z0: () => _Z0,
  awaitConst: () => awaitConst,
  await_: () => await_,
  concrete: () => concrete,
  done: () => done
});
const BothRunningTypeId = /* @__PURE__ */ Symbol();
class BothRunning {
  constructor(left, right) {
    this.left = left;
    this.right = right;
    this._typeId = BothRunningTypeId;
  }
}
const LeftDoneTypeId = /* @__PURE__ */ Symbol();
class LeftDone {
  constructor(f) {
    this.f = f;
    this._typeId = LeftDoneTypeId;
  }
}
const RightDoneTypeId = /* @__PURE__ */ Symbol();
class RightDone {
  constructor(f) {
    this.f = f;
    this._typeId = RightDoneTypeId;
  }
}
const _R = "_R";
const _E0 = "_E0";
const _Z0 = "_Z0";
const _E = "_E";
const _Z = "_Z";
const MergeDecisionTypeId = /* @__PURE__ */ Symbol();
class MergeDecision {
  constructor() {
    this._mergeDecisionTypeId = MergeDecisionTypeId;
  }
}
function concrete(decision) {
}
const DoneTypeId = /* @__PURE__ */ Symbol();
class Done extends MergeDecision {
  constructor(io) {
    super();
    this.io = io;
    this._typeId = DoneTypeId;
  }
}
const AwaitTypeId = /* @__PURE__ */ Symbol();
class Await extends MergeDecision {
  constructor(f) {
    super();
    this.f = f;
    this._typeId = AwaitTypeId;
  }
}
function done(io) {
  return new Done(io);
}
function await_(f) {
  return new Await(f);
}
function awaitConst(io) {
  return new Await((_) => io);
}
module.exports = __toCommonJS(mergeHelpers_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Await,
  AwaitTypeId,
  BothRunning,
  BothRunningTypeId,
  Done,
  DoneTypeId,
  LeftDone,
  LeftDoneTypeId,
  MergeDecision,
  MergeDecisionTypeId,
  RightDone,
  RightDoneTypeId,
  _E,
  _E0,
  _R,
  _Z,
  _Z0,
  awaitConst,
  await_,
  concrete,
  done
});
