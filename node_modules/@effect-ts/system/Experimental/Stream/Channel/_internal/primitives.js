var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var primitives_exports = {};
__export(primitives_exports, {
  BracketOut: () => BracketOut,
  BracketOutTypeId: () => BracketOutTypeId,
  Bridge: () => Bridge,
  BridgeTypeId: () => BridgeTypeId,
  Channel: () => Channel,
  ConcatAll: () => ConcatAll,
  ConcatAllTypeId: () => ConcatAllTypeId,
  Continuation: () => Continuation,
  ContinuationFinalizer: () => ContinuationFinalizer,
  ContinuationFinalizerTypeId: () => ContinuationFinalizerTypeId,
  ContinuationK: () => ContinuationK,
  ContinuationKTypeId: () => ContinuationKTypeId,
  Done: () => Done,
  DoneTypeId: () => DoneTypeId,
  Effect: () => Effect,
  EffectSuspendTotal: () => EffectSuspendTotal,
  EffectSuspendTotalTypeId: () => EffectSuspendTotalTypeId,
  EffectTotal: () => EffectTotal,
  EffectTotalTypeId: () => EffectTotalTypeId,
  EffectTypeId: () => EffectTypeId,
  Emit: () => Emit,
  EmitTypeId: () => EmitTypeId,
  Ensuring: () => Ensuring,
  EnsuringTypeId: () => EnsuringTypeId,
  Fold: () => Fold,
  FoldTypeId: () => FoldTypeId,
  Halt: () => Halt,
  HaltTypeId: () => HaltTypeId,
  PipeTo: () => PipeTo,
  PipeToTypeId: () => PipeToTypeId,
  Provide: () => Provide,
  ProvideTypeId: () => ProvideTypeId,
  Read: () => Read,
  ReadTypeId: () => ReadTypeId,
  concrete: () => concrete,
  concreteContinuation: () => concreteContinuation
});
var import_Operator = require("../../../../Operator/index.js");
var import_symbols = require("./symbols.js");
class Channel {
  constructor() {
    this[">>>"] = (that) => new PipeTo(() => this, () => that);
  }
}
class Continuation {
}
function concreteContinuation(_) {
}
const ContinuationKTypeId = /* @__PURE__ */ Symbol();
class ContinuationK extends Continuation {
  constructor(onSuccess, onHalt) {
    super();
    this.onSuccess = onSuccess;
    this.onHalt = onHalt;
    this._typeId = ContinuationKTypeId;
  }
  onExit(exit) {
    switch (exit._tag) {
      case "Failure": {
        return this.onHalt(exit.cause);
      }
      case "Success": {
        return this.onSuccess(exit.value);
      }
    }
  }
}
const ContinuationFinalizerTypeId = /* @__PURE__ */ Symbol();
class ContinuationFinalizer extends Continuation {
  constructor(finalizer) {
    super();
    this.finalizer = finalizer;
    this._typeId = ContinuationFinalizerTypeId;
  }
}
function concrete(_) {
}
const PipeToTypeId = /* @__PURE__ */ Symbol();
class PipeTo extends Channel {
  constructor(left, right) {
    super();
    this.left = left;
    this.right = right;
    this._typeId = PipeToTypeId;
  }
}
const ReadTypeId = /* @__PURE__ */ Symbol();
class Read extends Channel {
  constructor(more, done) {
    super();
    this.more = more;
    this.done = done;
    this._typeId = ReadTypeId;
  }
}
const DoneTypeId = /* @__PURE__ */ Symbol();
class Done extends Channel {
  constructor(terminal) {
    super();
    this.terminal = terminal;
    this._typeId = DoneTypeId;
  }
}
const HaltTypeId = /* @__PURE__ */ Symbol();
class Halt extends Channel {
  constructor(error) {
    super();
    this.error = error;
    this._typeId = HaltTypeId;
  }
}
const EffectTypeId = /* @__PURE__ */ Symbol();
class Effect extends Channel {
  constructor(effect) {
    super();
    this.effect = effect;
    this._typeId = EffectTypeId;
  }
}
const EmitTypeId = /* @__PURE__ */ Symbol();
class Emit extends Channel {
  constructor(out) {
    super();
    this.out = out;
    this._typeId = EmitTypeId;
  }
}
const EnsuringTypeId = /* @__PURE__ */ Symbol();
class Ensuring extends Channel {
  constructor(channel, finalizer) {
    super();
    this.channel = channel;
    this.finalizer = finalizer;
    this._typeId = EnsuringTypeId;
  }
}
const ConcatAllTypeId = /* @__PURE__ */ Symbol();
class ConcatAll extends Channel {
  constructor(combineInners, combineAll, value, k) {
    super();
    this.combineInners = combineInners;
    this.combineAll = combineAll;
    this.value = value;
    this.k = k;
    this._typeId = ConcatAllTypeId;
  }
}
const FoldTypeId = /* @__PURE__ */ Symbol();
class Fold extends Channel {
  constructor(value, k) {
    super();
    this.value = value;
    this.k = k;
    this._typeId = FoldTypeId;
  }
}
const BridgeTypeId = /* @__PURE__ */ Symbol();
class Bridge extends Channel {
  constructor(input, channel) {
    super();
    this.input = input;
    this.channel = channel;
    this._typeId = BridgeTypeId;
  }
}
const BracketOutTypeId = /* @__PURE__ */ Symbol();
class BracketOut extends Channel {
  constructor(acquire, finalizer) {
    super();
    this.acquire = acquire;
    this.finalizer = finalizer;
    this._typeId = BracketOutTypeId;
  }
}
const ProvideTypeId = /* @__PURE__ */ Symbol();
class Provide extends Channel {
  constructor(env, channel) {
    super();
    this.env = env;
    this.channel = channel;
    this._typeId = ProvideTypeId;
  }
}
const EffectTotalTypeId = /* @__PURE__ */ Symbol();
class EffectTotal extends Channel {
  constructor(effect) {
    super();
    this.effect = effect;
    this._typeId = EffectTotalTypeId;
  }
}
const EffectSuspendTotalTypeId = /* @__PURE__ */ Symbol();
class EffectSuspendTotal extends Channel {
  constructor(effect) {
    super();
    this.effect = effect;
    this._typeId = EffectSuspendTotalTypeId;
  }
}
module.exports = __toCommonJS(primitives_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BracketOut,
  BracketOutTypeId,
  Bridge,
  BridgeTypeId,
  Channel,
  ConcatAll,
  ConcatAllTypeId,
  Continuation,
  ContinuationFinalizer,
  ContinuationFinalizerTypeId,
  ContinuationK,
  ContinuationKTypeId,
  Done,
  DoneTypeId,
  Effect,
  EffectSuspendTotal,
  EffectSuspendTotalTypeId,
  EffectTotal,
  EffectTotalTypeId,
  EffectTypeId,
  Emit,
  EmitTypeId,
  Ensuring,
  EnsuringTypeId,
  Fold,
  FoldTypeId,
  Halt,
  HaltTypeId,
  PipeTo,
  PipeToTypeId,
  Provide,
  ProvideTypeId,
  Read,
  ReadTypeId,
  concrete,
  concreteContinuation
});
