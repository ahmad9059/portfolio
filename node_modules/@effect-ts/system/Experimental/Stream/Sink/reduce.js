var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var reduce_exports = {};
__export(reduce_exports, {
  reduce: () => reduce
});
var CK = __toESM(require("../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../Collections/Immutable/Tuple/index.js"));
var CH = __toESM(require("../Channel/index.js"));
var C = __toESM(require("./core.js"));
function reduce(z, cont, f) {
  const reduceChunkSplit = (z2, chunk) => (cont2) => (f2) => {
    const reduce2 = (s, chunk2, idx, len) => {
      if (idx === len) {
        return Tp.tuple(s, CK.empty());
      } else {
        const s1 = f2(s, CK.unsafeGet_(chunk2, idx));
        if (cont2(s1)) {
          return reduce2(s1, chunk2, idx + 1, len);
        } else {
          return Tp.tuple(s1, CK.drop_(chunk2, idx + 1));
        }
      }
    };
    return reduce2(z2, chunk, 0, CK.size(chunk));
  };
  const reader = (s) => {
    if (!cont(s)) {
      return CH.end(s);
    } else {
      return CH.readWith((_in) => {
        const {
          tuple: [nextS, leftovers]
        } = reduceChunkSplit(s, _in)(cont)(f);
        if (!CK.isEmpty(leftovers)) {
          return CH.as_(CH.write(leftovers), nextS);
        } else {
          return reader(nextS);
        }
      }, (err) => CH.fail(err), (_) => CH.end(s));
    }
  };
  return new C.Sink(reader(z));
}
module.exports = __toCommonJS(reduce_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  reduce
});
