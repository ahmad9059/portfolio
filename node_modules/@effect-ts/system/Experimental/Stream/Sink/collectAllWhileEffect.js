var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var collectAllWhileEffect_exports = {};
__export(collectAllWhileEffect_exports, {
  collectAllWhileEffect: () => collectAllWhileEffect
});
var CK = __toESM(require("../../../Collections/Immutable/Chunk/index.js"));
var L = __toESM(require("../../../Collections/Immutable/List/index.js"));
var Tp = __toESM(require("../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../Effect/index.js"));
var import_Function = require("../../../Function/index.js");
var FoldEffect = __toESM(require("./foldEffect.js"));
var Map = __toESM(require("./map.js"));
function collectAllWhileEffect(p) {
  return Map.map_(FoldEffect.foldEffect(Tp.tuple(L.empty(), true), Tp.get(1), ({
    tuple: [as, _]
  }, a) => T.map_(p(a), (_2) => {
    if (_2) {
      return Tp.tuple(L.prepend_(as, a), true);
    } else {
      return Tp.tuple(as, false);
    }
  })), ({
    tuple: [is, _]
  }) => CK.from(L.reverse(is)));
}
module.exports = __toCommonJS(collectAllWhileEffect_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  collectAllWhileEffect
});
