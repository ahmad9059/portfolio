var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var foldWeightedDecomposeEffect_exports = {};
__export(foldWeightedDecomposeEffect_exports, {
  foldWeightedDecomposeEffect: () => foldWeightedDecomposeEffect
});
var CK = __toESM(require("../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../Effect/index.js"));
var import_Function = require("../../../Function/index.js");
var CH = __toESM(require("../Channel/index.js"));
var C = __toESM(require("./core.js"));
function foldWeightedDecomposeEffect(z, costFn, max, decompose, f) {
  const go = (s, cost, dirty) => CH.readWith((in_) => {
    const fold = (in_2, s2, dirty2, cost2, idx) => {
      if (idx === CK.size(in_2)) {
        return T.succeed(Tp.tuple(s2, cost2, dirty2, CK.empty()));
      } else {
        const elem = CK.unsafeGet_(in_2, idx);
        return T.chain_(T.map_(costFn(s2, elem), (_) => cost2 + _), (total) => {
          if (total <= max) {
            return T.chain_(f(s2, elem), (_) => fold(in_2, _, true, total, idx + 1));
          } else {
            return T.chain_(decompose(elem), (decomposed) => {
              if (CK.size(decomposed) <= 1 && !dirty2) {
                return T.map_(f(s2, elem), (_) => Tp.tuple(_, total, true, CK.drop_(in_2, idx + 1)));
              } else if (CK.size(decomposed) <= 1 && dirty2) {
                return T.succeed(Tp.tuple(s2, cost2, dirty2, CK.drop_(in_2, idx)));
              } else {
                return fold(CK.concat_(decomposed, CK.drop_(in_2, idx + 1)), s2, dirty2, cost2, 0);
              }
            });
          }
        });
      }
    };
    return CH.chain_(CH.fromEffect(fold(in_, s, dirty, cost, 0)), ({
      tuple: [nextS, nextCost, nextDirty, leftovers]
    }) => {
      if (!CK.isEmpty(leftovers)) {
        return CH.zipRight_(CH.write(leftovers), CH.end(nextS));
      } else if (cost > max) {
        return CH.end(nextS);
      } else {
        return go(nextS, nextCost, nextDirty);
      }
    });
  }, (err) => CH.fail(err), (_) => CH.end(s));
  return new C.Sink(go(z, 0, false));
}
module.exports = __toCommonJS(foldWeightedDecomposeEffect_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  foldWeightedDecomposeEffect
});
