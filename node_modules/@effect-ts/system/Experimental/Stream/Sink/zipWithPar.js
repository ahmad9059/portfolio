var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipWithPar_exports = {};
__export(zipWithPar_exports, {
  zipWithPar: () => zipWithPar,
  zipWithPar_: () => zipWithPar_
});
var T = __toESM(require("../../../Effect/index.js"));
var Ex = __toESM(require("../../../Exit/index.js"));
var import_Function = require("../../../Function/index.js");
var H = __toESM(require("../../../Hub/index.js"));
var M = __toESM(require("../../../Managed/index.js"));
var MH = __toESM(require("../Channel/_internal/mergeHelpers.js"));
var CH = __toESM(require("../Channel/index.js"));
var C = __toESM(require("./core.js"));
function zipWithPar_(self, that, f, capacity = 16) {
  const channel = CH.unwrapManaged(M.map_(M.let_(M.let_(M.let_(M.let_(M.bind_(M.bind_(M.bind_(M.do, "hub", () => T.toManaged(H.makeBounded(capacity))), "left", ({
    hub
  }) => CH.fromHubManaged(hub)), "right", ({
    hub
  }) => CH.fromHubManaged(hub)), "reader", ({
    hub
  }) => CH.toHub(hub)), "c1", ({
    left
  }) => left[">>>"](self.channel)), "c2", ({
    right
  }) => right[">>>"](that.channel)), "writer", ({
    c1,
    c2
  }) => CH.mergeWith_(c1, c2, Ex.fold((err) => MH.done(T.halt(err)), (lz) => MH.await_(Ex.fold((cause) => T.halt(cause), (rz) => T.succeed(f(lz, rz))))), Ex.fold((err) => MH.done(T.halt(err)), (rz) => MH.await_(Ex.fold((cause) => T.halt(cause), (lz) => T.succeed(f(lz, rz))))))), ({
    reader,
    writer
  }) => CH.mergeWith_(reader, writer, (_) => MH.await_(Ex.fold((cause) => T.halt(cause), (z) => T.succeed(z))), Ex.fold((cause) => MH.done(T.halt(cause)), (z) => MH.done(T.succeed(z))))));
  return new C.Sink(channel);
}
function zipWithPar(that, f, capacity = 16) {
  return (self) => zipWithPar_(self, that, f, capacity);
}
module.exports = __toCommonJS(zipWithPar_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipWithPar,
  zipWithPar_
});
