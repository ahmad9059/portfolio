var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var collectAllWhileWith_exports = {};
__export(collectAllWhileWith_exports, {
  collectAllWhileWith: () => collectAllWhileWith,
  collectAllWhileWith_: () => collectAllWhileWith_
});
var CK = __toESM(require("../../../Collections/Immutable/Chunk/index.js"));
var T = __toESM(require("../../../Effect/index.js"));
var import_Function = require("../../../Function/index.js");
var Ref = __toESM(require("../../../Ref/index.js"));
var CH = __toESM(require("../Channel/index.js"));
var C = __toESM(require("./core.js"));
function collectAllWhileWith_(self, z, p, f) {
  return new C.Sink(CH.chain_(CH.fromEffect(T.zip_(Ref.makeRef(CK.empty()), Ref.makeRef(false))), ({
    tuple: [leftoversRef, upstreamDoneRef]
  }) => {
    const upstreamMarker = CH.readWith((in_) => CH.zipRight_(CH.write(in_), upstreamMarker), (_) => CH.fail(_), (x) => CH.as_(CH.fromEffect(upstreamDoneRef.set(true)), x));
    const loop = (currentResult) => CH.foldChannel_(CH.doneCollect(self.channel), (_) => CH.fail(_), ({
      tuple: [leftovers, doneValue]
    }) => {
      if (p(doneValue)) {
        return CH.map_(CH.bind("result", ({
          accumulatedResult,
          upstreamDone
        }) => upstreamDone ? CH.as_(CH.write(CK.flatten(leftovers)), currentResult) : loop(accumulatedResult))(CH.let("accumulatedResult", () => f(currentResult, doneValue))(CH.bind("upstreamDone", () => CH.fromEffect(upstreamDoneRef.get))(CH.fromEffect(leftoversRef.set(CK.flatten(leftovers)))))), ({
          result
        }) => result);
      } else {
        return CH.as_(CH.write(CK.flatten(leftovers)), currentResult);
      }
    });
    return upstreamMarker[">>>"](CH.bufferChunk(leftoversRef))[">>>"](loop(z));
  }));
}
function collectAllWhileWith(z, p, f) {
  return (self) => collectAllWhileWith_(self, z, p, f);
}
module.exports = __toCommonJS(collectAllWhileWith_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  collectAllWhileWith,
  collectAllWhileWith_
});
