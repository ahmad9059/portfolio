var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var sliding_exports = {};
__export(sliding_exports, {
  sliding: () => sliding,
  sliding_: () => sliding_
});
var CS = __toESM(require("../../../../Cause/index.js"));
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var import_Function = require("../../../../Function/index.js");
var O = __toESM(require("../../../../Option/index.js"));
var import_RingBufferNew = require("../../../../Support/RingBufferNew/index.js");
var CH = __toESM(require("../../Channel/index.js"));
var C = __toESM(require("../core.js"));
var Chain = __toESM(require("./chain.js"));
var Die = __toESM(require("./die.js"));
var SucceedWith = __toESM(require("./succeedWith.js"));
function sliding_(self, chunkSize, stepSize = 1) {
  if (chunkSize <= 0 || stepSize <= 0) {
    return Die.die(new CS.IllegalArgumentException("invalid bounds. `chunkSize` and `stepSize` must be greater than zero"));
  }
  return Chain.chain_(SucceedWith.succeedWith(() => new import_RingBufferNew.RingBufferNew(chunkSize)), (queue) => {
    const emitOnStreamEnd = (queueSize, channelEnd) => {
      if (queueSize < chunkSize) {
        const items = queue.toChunk();
        const result = CK.isEmpty(items) ? CK.empty() : CK.single(items);
        return CH.zipRight_(CH.write(result), channelEnd);
      } else {
        const lastEmitIndex = queueSize - (queueSize - chunkSize) % stepSize;
        if (lastEmitIndex === queueSize) {
          return channelEnd;
        } else {
          const leftovers = queueSize - (lastEmitIndex - chunkSize + stepSize);
          const lastItems = CK.takeRight_(queue.toChunk(), leftovers);
          const result = CK.isEmpty(lastItems) ? CK.empty() : CK.single(lastItems);
          return CH.zipRight_(CH.write(result), channelEnd);
        }
      }
    };
    const reader = (queueSize) => CH.readWithCause((in_) => CH.zipRight_(CH.write(CK.collect_(CK.zipWithIndex(in_), ({
      tuple: [i, idx]
    }) => {
      queue.put(i);
      const currentIndex = queueSize + idx + 1;
      if (currentIndex < chunkSize || (currentIndex - chunkSize) % stepSize > 0) {
        return O.none;
      } else {
        return O.some(queue.toChunk());
      }
    })), reader(queueSize + CK.size(in_))), (cause) => emitOnStreamEnd(queueSize, CH.failCause(cause)), (_) => emitOnStreamEnd(queueSize, CH.unit));
    return new C.Stream(self.channel[">>>"](reader(0)));
  });
}
function sliding(chunkSize, stepSize = 1) {
  return (self) => sliding_(self, chunkSize, stepSize);
}
module.exports = __toCommonJS(sliding_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  sliding,
  sliding_
});
