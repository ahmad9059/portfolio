var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var splitLines_exports = {};
__export(splitLines_exports, {
  splitLines: () => splitLines
});
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var import_Function = require("../../../../Function/index.js");
var O = __toESM(require("../../../../Option/index.js"));
var CH = __toESM(require("../../Channel/index.js"));
var C = __toESM(require("../core.js"));
function splitLines(self) {
  const next = (leftover, wasSplitCRLF) => CH.readWithCause((incomingChunk) => {
    const buffer = CK.builder();
    let inCRLF = wasSplitCRLF;
    let carry = O.getOrElse_(leftover, () => "");
    CK.forEach_(incomingChunk, (string) => {
      const concatenated = carry + string;
      if (string.length > 0) {
        const continueFrom = inCRLF && carry.length > 0 ? carry.length - 1 : carry.length;
        return (({
          tuple: [sliceStart, _, midCRLF]
        }) => {
          carry = concatenated.slice(sliceStart);
          inCRLF = midCRLF;
        })(CK.reduce_(CK.drop_(CK.zipWithIndex(CK.from(concatenated)), continueFrom), Tp.tuple(0, false, inCRLF), ({
          tuple: [sliceStart, skipNext, midCRLF]
        }, {
          tuple: [char, index]
        }) => {
          if (skipNext) {
            return Tp.tuple(sliceStart, false, false);
          } else {
            switch (char) {
              case "\n": {
                buffer.append(concatenated.slice(sliceStart, index));
                return Tp.tuple(index + 1, false, midCRLF);
              }
              case "\r": {
                if (index + 1 < concatenated.length && concatenated[index + 1] === "\n") {
                  buffer.append(concatenated.slice(sliceStart, index));
                  return Tp.tuple(index + 2, true, false);
                } else if (index === concatenated.length - 1) {
                  return Tp.tuple(sliceStart, false, true);
                } else {
                  return Tp.tuple(index, false, false);
                }
              }
              default: {
                return Tp.tuple(sliceStart, false, midCRLF);
              }
            }
          }
        }));
      }
    });
    return CH.zipRight_(CH.write(buffer.build()), next(carry.length > 0 ? O.some(carry) : O.none, inCRLF));
  }, (halt) => O.fold_(leftover, () => CH.failCause(halt), (value) => CH.zipRight_(CH.write(CK.single(value)), CH.failCause(halt))), (done) => O.fold_(leftover, () => CH.end(done), (value) => CH.zipRight_(CH.write(CK.single(value)), CH.end(done))));
  return new C.Stream(self.channel[">>>"](next(O.none, false)));
}
module.exports = __toCommonJS(splitLines_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  splitLines
});
