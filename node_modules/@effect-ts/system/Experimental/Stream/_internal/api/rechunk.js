var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var rechunk_exports = {};
__export(rechunk_exports, {
  rechunk: () => rechunk,
  rechunk_: () => rechunk_
});
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var L = __toESM(require("../../../../Collections/Immutable/List/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var CH = __toESM(require("../../Channel/index.js"));
var C = __toESM(require("../core.js"));
var Unwrap = __toESM(require("./unwrap.js"));
class Rechunker {
  constructor(n) {
    this.n = n;
    this.builder = CK.builder();
    this.pos = 0;
  }
  write(elem) {
    this.builder.append(elem);
    this.pos += 1;
    if (this.pos === this.n) {
      const result = this.builder.build();
      this.builder = CK.builder();
      this.pos = 0;
      return result;
    }
    return null;
  }
  emitOfNotEmpty() {
    if (this.pos !== 0) {
      return CH.write(this.builder.build());
    } else {
      return CH.unit;
    }
  }
}
function rechunk_(self, n) {
  return Unwrap.unwrap(T.succeedWith(() => {
    const rechunker = new Rechunker(n);
    const process = CH.readWithCause((chunk) => {
      const chunkSize = CK.size(chunk);
      if (chunkSize > 0) {
        let chunks = L.empty();
        let result = null;
        let i = 0;
        while (i < chunkSize) {
          while (i < chunkSize && result === null) {
            result = rechunker.write(CK.unsafeGet_(chunk, i));
            i += 1;
          }
          if (result !== null) {
            chunks = L.prepend_(chunks, result);
            result = null;
          }
        }
        return CH.zipRight_(CH.writeAll(...L.toArray(L.reverse(chunks))), process);
      }
      return process;
    }, (cause) => CH.zipRight_(rechunker.emitOfNotEmpty(), CH.failCause(cause)), (_) => rechunker.emitOfNotEmpty());
    return new C.Stream(self.channel[">>>"](process));
  }));
}
function rechunk(n) {
  return (self) => rechunk_(self, n);
}
module.exports = __toCommonJS(rechunk_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rechunk,
  rechunk_
});
