var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var peel_exports = {};
__export(peel_exports, {
  Emit: () => Emit,
  End: () => End,
  Halt: () => Halt,
  peel: () => peel,
  peel_: () => peel_
});
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var import_Function = require("../../../../Function/index.js");
var M = __toESM(require("../../../../Managed/index.js"));
var P = __toESM(require("../../../../Promise/index.js"));
var CH = __toESM(require("../../Channel/index.js"));
var SK = __toESM(require("../../Sink/index.js"));
var C = __toESM(require("../core.js"));
var HO = __toESM(require("../Handoff.js"));
var RunManaged = __toESM(require("./runManaged.js"));
const SignalTypeId = /* @__PURE__ */ Symbol();
const EmitTypeId = /* @__PURE__ */ Symbol();
class Emit {
  constructor(els) {
    this.els = els;
    this._signalTypeId = SignalTypeId;
    this._typeId = EmitTypeId;
  }
}
const HaltTypeId = /* @__PURE__ */ Symbol();
class Halt {
  constructor(cause) {
    this.cause = cause;
    this._signalTypeId = SignalTypeId;
    this._typeId = HaltTypeId;
  }
}
const EndTypeId = /* @__PURE__ */ Symbol();
class End {
  constructor() {
    this._signalTypeId = SignalTypeId;
    this._typeId = EndTypeId;
  }
}
function peel_(self, sink) {
  return M.flatten(M.map_(M.bind_(M.bind_(M.do, "p", () => T.toManaged(P.make())), "handoff", () => T.toManaged(HO.make())), ({
    handoff,
    p
  }) => {
    const consumer = SK.foldSink_(SK.exposeLeftover(sink), (e) => SK.zipRight_(SK.fromEffect(P.fail_(p, e)), SK.fail(e)), ({
      tuple: [z1, leftovers]
    }) => {
      const loop = CH.readWithCause((in_) => CH.zipRight_(CH.fromEffect(HO.offer(handoff, new Emit(in_))), loop), (e) => CH.zipRight_(CH.fromEffect(HO.offer(handoff, new Halt(e))), CH.failCause(e)), (_) => CH.zipRight_(CH.fromEffect(HO.offer(handoff, new End())), CH.unit));
      return new SK.Sink(CH.zipRight_(CH.zipRight_(CH.fromEffect(P.succeed_(p, z1)), CH.fromEffect(HO.offer(handoff, new Emit(leftovers)))), loop));
    });
    const producer = CH.unwrap(T.map_(HO.take(handoff), (sig) => {
      switch (sig._typeId) {
        case EmitTypeId:
          return CH.zipRight_(CH.write(sig.els), producer);
        case HaltTypeId:
          return CH.failCause(sig.cause);
        default:
          return CH.unit;
      }
    }));
    return M.map_(M.chain_(M.fork(RunManaged.runManaged_(self, consumer)), (_) => T.toManaged(P.await(p))), (z) => Tp.tuple(z, new C.Stream(producer)));
  }));
}
function peel(sink) {
  return (self) => peel_(self, sink);
}
module.exports = __toCommonJS(peel_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Emit,
  End,
  Halt,
  peel,
  peel_
});
