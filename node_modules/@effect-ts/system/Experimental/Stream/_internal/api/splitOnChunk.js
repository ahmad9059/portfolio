var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var splitOnChunk_exports = {};
__export(splitOnChunk_exports, {
  splitOnChunk: () => splitOnChunk,
  splitOnChunk_: () => splitOnChunk_
});
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var O = __toESM(require("../../../../Option/index.js"));
var CH = __toESM(require("../../Channel/index.js"));
var C = __toESM(require("../core.js"));
function splitOnChunk_(self, delimiter) {
  const next = (leftover, delimiterIndex) => CH.readWithCause((inputChunk) => {
    const buffer = CK.builder();
    const {
      tuple: [carry, delimiterCursor]
    } = CK.reduce_(inputChunk, Tp.tuple(O.getOrElse_(leftover, () => CK.empty()), delimiterIndex), ({
      tuple: [carry2, delimiterCursor2]
    }, a) => {
      const concatenated = CK.append_(carry2, a);
      if (delimiterCursor2 < CK.size(delimiter) && a === CK.unsafeGet_(delimiter, delimiterCursor2)) {
        if (delimiterCursor2 + 1 === CK.size(delimiter)) {
          buffer.append(CK.take_(concatenated, CK.size(concatenated) - CK.size(delimiter)));
          return Tp.tuple(CK.empty(), 0);
        } else {
          return Tp.tuple(concatenated, delimiterCursor2 + 1);
        }
      } else {
        return Tp.tuple(concatenated, a === CK.unsafeGet_(delimiter, 0) ? 1 : 0);
      }
    });
    return CH.zipRight_(CH.write(buffer.build()), next(!CK.isEmpty(carry) ? O.some(carry) : O.none, delimiterCursor));
  }, (halt) => O.fold_(leftover, () => CH.failCause(halt), (chunk) => CH.zipRight_(CH.write(CK.single(chunk)), CH.failCause(halt))), (done) => O.fold_(leftover, () => CH.succeed(done), (chunk) => CH.zipRight_(CH.write(CK.single(chunk)), CH.succeed(done))));
  return new C.Stream(self.channel[">>>"](next(O.none, 0)));
}
function splitOnChunk(delimiter) {
  return (self) => splitOnChunk_(self, delimiter);
}
module.exports = __toCommonJS(splitOnChunk_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  splitOnChunk,
  splitOnChunk_
});
