var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var throttleShapeEffect_exports = {};
__export(throttleShapeEffect_exports, {
  throttleShapeEffect: () => throttleShapeEffect,
  throttleShapeEffect_: () => throttleShapeEffect_
});
var CL = __toESM(require("../../../../Clock/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var import_Function = require("../../../../Function/index.js");
var CH = __toESM(require("../../Channel/index.js"));
var C = __toESM(require("../core.js"));
function throttleShapeEffect_(self, units, duration, costFn, burst = 0) {
  const loop = (tokens, timestamp) => CH.readWith((in_) => CH.unwrap(T.map_(T.bind_(T.bind_(T.do, "weight", () => costFn(in_)), "current", () => CL.currentTime), ({
    current,
    weight
  }) => {
    const elapsed = current - timestamp;
    const cycles = elapsed - duration;
    const available = (() => {
      const sum = Math.floor(tokens + cycles * units);
      const max = units + burst < 0 ? Number.MAX_SAFE_INTEGER : units + burst;
      return sum < 0 ? max : Math.min(sum, max);
    })();
    const remaining = available - weight;
    const waitCycles = remaining >= 0 ? 0 : -remaining / units;
    const delay = Math.floor(waitCycles * duration);
    if (delay > 0) {
      return CH.zipRight_(CH.zipRight_(CH.fromEffect(CL.sleep(delay)), CH.write(in_)), loop(remaining, current));
    } else {
      return CH.zipRight_(CH.write(in_), loop(remaining, current));
    }
  })), (e) => CH.fail(e), (_) => CH.unit);
  return new C.Stream(CH.chain_(CH.fromEffect(CL.currentTime), (_) => self.channel[">>>"](loop(units, _))));
}
function throttleShapeEffect(units, duration, costFn, burst = 0) {
  return (self) => throttleShapeEffect_(self, units, duration, costFn, burst);
}
module.exports = __toCommonJS(throttleShapeEffect_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  throttleShapeEffect,
  throttleShapeEffect_
});
