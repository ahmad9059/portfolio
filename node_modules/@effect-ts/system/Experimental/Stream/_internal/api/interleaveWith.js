var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var interleaveWith_exports = {};
__export(interleaveWith_exports, {
  interleaveWith: () => interleaveWith,
  interleaveWith_: () => interleaveWith_
});
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var import_Function = require("../../../../Function/index.js");
var M = __toESM(require("../../../../Managed/index.js"));
var CH = __toESM(require("../../Channel/index.js"));
var TK = __toESM(require("../../Take/index.js"));
var C = __toESM(require("../core.js"));
var HO = __toESM(require("../Handoff.js"));
function interleaveWith_(self, that, b) {
  const producer = (handoff) => CH.readWithCause((value) => CH.zipRight_(CH.fromEffect(HO.offer(handoff, TK.single(value))), producer(handoff)), (cause) => CH.fromEffect(HO.offer(handoff, TK.failCause(cause))), (_) => CH.fromEffect(HO.offer(handoff, TK.end)));
  return new C.Stream(CH.managed_(M.map_(M.tap_(M.tap_(M.bind_(M.bind_(M.do, "left", () => T.toManaged(HO.make())), "right", () => T.toManaged(HO.make())), ({
    left
  }) => M.fork(CH.runManaged(CH.concatMap_(self.channel, (_) => CH.writeChunk(_))[">>>"](producer(left))))), ({
    right
  }) => M.fork(CH.runManaged(CH.concatMap_(that.channel, (_) => CH.writeChunk(_))[">>>"](producer(right))))), ({
    left,
    right
  }) => Tp.tuple(left, right)), ({
    tuple: [left, right]
  }) => {
    const process = (leftDone, rightDone) => CH.readWithCause((bool) => {
      if (bool && !leftDone) {
        return CH.chain_(CH.fromEffect(HO.take(left)), TK.fold(rightDone ? CH.unit : process(true, rightDone), (cause) => CH.failCause(cause), (chunk) => CH.zipRight_(CH.write(chunk), process(leftDone, rightDone))));
      }
      if (!bool && !rightDone) {
        return CH.chain_(CH.fromEffect(HO.take(right)), TK.fold(leftDone ? CH.unit : process(leftDone, true), (cause) => CH.failCause(cause), (chunk) => CH.zipRight_(CH.write(chunk), process(leftDone, rightDone))));
      }
      return process(leftDone, rightDone);
    }, (cause) => CH.failCause(cause), (_) => CH.unit);
    return CH.concatMap_(b.channel, (_) => CH.writeChunk(_))[">>>"](process(false, false));
  }));
}
function interleaveWith(that, b) {
  return (self) => interleaveWith_(self, that, b);
}
module.exports = __toCommonJS(interleaveWith_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  interleaveWith,
  interleaveWith_
});
