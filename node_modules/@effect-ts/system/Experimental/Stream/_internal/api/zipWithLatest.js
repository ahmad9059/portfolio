var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipWithLatest_exports = {};
__export(zipWithLatest_exports, {
  zipWithLatest: () => zipWithLatest,
  zipWithLatest_: () => zipWithLatest_
});
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var E = __toESM(require("../../../../Either/index.js"));
var F = __toESM(require("../../../../Fiber/index.js"));
var import_Function = require("../../../../Function/index.js");
var M = __toESM(require("../../../../Managed/index.js"));
var Ref = __toESM(require("../../../../Ref/index.js"));
var Chain = __toESM(require("./chain.js"));
var Concat = __toESM(require("./concat.js"));
var FromChunk = __toESM(require("./fromChunk.js"));
var FromEffect = __toESM(require("./fromEffect.js"));
var FromEffectOption = __toESM(require("./fromEffectOption.js"));
var FromPull = __toESM(require("./fromPull.js"));
var MapEffect = __toESM(require("./mapEffect.js"));
var MergeEither = __toESM(require("./mergeEither.js"));
var RepeatEffectOption = __toESM(require("./repeatEffectOption.js"));
var ToPull = __toESM(require("./toPull.js"));
function zipWithLatest_(self, that, f) {
  const pullNonEmpty = (pull) => T.chain_(pull, (chunk) => CK.isEmpty(chunk) ? pullNonEmpty(pull) : T.succeed(chunk));
  return FromPull.fromPull(M.map_(M.bind_(M.chain_(M.bindAll_(M.do, () => ({
    left: M.map_(ToPull.toPull(self), pullNonEmpty),
    right: M.map_(ToPull.toPull(that), pullNonEmpty)
  })), ({
    left,
    right
  }) => M.fromEffect(T.transplant((graft) => T.succeed({
    left: graft(left),
    right: graft(right)
  })))), "pull", ({
    left,
    right
  }) => ToPull.toPull(Chain.chain_(FromEffectOption.fromEffectOption(T.raceWith_(left, right, (leftDone, rightFiber) => T.zipWith_(T.done(leftDone), F.join(rightFiber), (l, r) => Tp.tuple(l, r, true)), (rightDone, leftFiber) => T.zipWith_(T.done(rightDone), F.join(leftFiber), (r, l) => Tp.tuple(l, r, false)))), ({
    tuple: [l, r, leftFirst]
  }) => Chain.chain_(FromEffect.fromEffect(Ref.makeRef(Tp.tuple(CK.unsafeGet_(l, CK.size(l) - 1), CK.unsafeGet_(r, CK.size(r) - 1)))), (latest) => Concat.concat_(FromChunk.fromChunk(leftFirst ? CK.map_(r, (_) => f(CK.unsafeGet_(l, CK.size(l) - 1), _)) : CK.map_(l, (_) => f(_, CK.unsafeGet_(r, CK.size(r) - 1)))), Chain.chain_(MapEffect.mapEffect_(MergeEither.mergeEither_(RepeatEffectOption.repeatEffectOption(left), RepeatEffectOption.repeatEffectOption(right)), E.fold((leftChunk) => Ref.modify_(latest, ({
    tuple: [_, rightLatest]
  }) => Tp.tuple(CK.map_(leftChunk, (_2) => f(_2, rightLatest)), Tp.tuple(CK.unsafeGet_(leftChunk, CK.size(leftChunk) - 1), rightLatest))), (rightChunk) => Ref.modify_(latest, ({
    tuple: [leftLatest, _]
  }) => Tp.tuple(CK.map_(rightChunk, (_2) => f(leftLatest, _2)), Tp.tuple(leftLatest, CK.unsafeGet_(rightChunk, CK.size(rightChunk) - 1)))))), FromChunk.fromChunk)))))), ({
    pull
  }) => pull));
}
function zipWithLatest(that, f) {
  return (self) => zipWithLatest_(self, that, f);
}
module.exports = __toCommonJS(zipWithLatest_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipWithLatest,
  zipWithLatest_
});
