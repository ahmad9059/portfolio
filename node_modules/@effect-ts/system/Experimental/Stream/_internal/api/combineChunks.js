var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var combineChunks_exports = {};
__export(combineChunks_exports, {
  combineChunks: () => combineChunks,
  combineChunks_: () => combineChunks_
});
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var import_Function = require("../../../../Function/index.js");
var M = __toESM(require("../../../../Managed/index.js"));
var CH = __toESM(require("../../Channel/index.js"));
var TK = __toESM(require("../../Take/index.js"));
var C = __toESM(require("../core.js"));
var HO = __toESM(require("../Handoff.js"));
var UnfoldChunkEffect = __toESM(require("./unfoldChunkEffect.js"));
function combineChunks_(self, that, s, f) {
  const producer = (handoff, latch) => CH.zipRight_(CH.fromEffect(HO.take(latch)), CH.readWithCause((chunk) => CH.zipRight_(CH.fromEffect(HO.offer(handoff, TK.chunk(chunk))), producer(handoff, latch)), (cause) => CH.fromEffect(HO.offer(handoff, TK.failCause(cause))), (_) => CH.zipRight_(CH.fromEffect(HO.offer(handoff, TK.end)), producer(handoff, latch))));
  return new C.Stream(CH.managed_(M.map_(M.tap_(M.tap_(M.bind_(M.bind_(M.bind_(M.bind_(M.do, "left", () => T.toManaged(HO.make())), "right", () => T.toManaged(HO.make())), "latchL", () => T.toManaged(HO.make())), "latchR", () => T.toManaged(HO.make())), ({
    latchL,
    left
  }) => M.fork(CH.runManaged(self.channel[">>>"](producer(left, latchL))))), ({
    latchR,
    right
  }) => M.fork(CH.runManaged(that.channel[">>>"](producer(right, latchR))))), ({
    latchL,
    latchR,
    left,
    right
  }) => Tp.tuple(left, right, latchL, latchR)), ({
    tuple: [left, right, latchL, latchR]
  }) => {
    const pullLeft = T.zipRight_(HO.offer(latchL, void 0), T.chain_(HO.take(left), TK.done));
    const pullRight = T.zipRight_(HO.offer(latchR, void 0), T.chain_(HO.take(right), TK.done));
    return UnfoldChunkEffect.unfoldChunkEffect(s, (s2) => T.chain_(f(s2, pullLeft, pullRight), (_) => T.unoption(T.done(_)))).channel;
  }));
}
function combineChunks(that, s, f) {
  return (self) => combineChunks_(self, that, s, f);
}
module.exports = __toCommonJS(combineChunks_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  combineChunks,
  combineChunks_
});
