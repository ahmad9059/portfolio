var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var take_exports = {};
__export(take_exports, {
  take: () => take,
  take_: () => take_
});
var CS = __toESM(require("../../../../Cause/index.js"));
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var CH = __toESM(require("../../Channel/index.js"));
var C = __toESM(require("../core.js"));
var Die = __toESM(require("./die.js"));
var Empty = __toESM(require("./empty.js"));
function takeLoop(n) {
  return CH.readWith((i) => {
    const taken = CK.take_(i, n);
    const left = Math.max(n - CK.size(taken), 0);
    if (left > 0) {
      return CH.chain_(CH.write(taken), () => takeLoop(left));
    } else {
      return CH.write(taken);
    }
  }, CH.fail, CH.end);
}
function take_(self, n) {
  if (n <= 0) {
    return Empty.empty;
  }
  if (!Number.isInteger(n)) {
    return Die.die(new CS.IllegalArgumentException(`${n} should be an integer`));
  }
  return new C.Stream(self.channel[">>>"](takeLoop(n)));
}
function take(n) {
  return (self) => take_(self, n);
}
module.exports = __toCommonJS(take_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  take,
  take_
});
