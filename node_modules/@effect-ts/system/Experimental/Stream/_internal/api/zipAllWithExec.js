var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipAllWithExec_exports = {};
__export(zipAllWithExec_exports, {
  zipAllWithExec: () => zipAllWithExec,
  zipAllWithExec_: () => zipAllWithExec_
});
var CS = __toESM(require("../../../../Cause/index.js"));
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var E = __toESM(require("../../../../Either/index.js"));
var Ex = __toESM(require("../../../../Exit/index.js"));
var import_Function = require("../../../../Function/index.js");
var O = __toESM(require("../../../../Option/index.js"));
var ZipChunks = __toESM(require("./_internal/zipChunks.js"));
var CombineChunks = __toESM(require("./combineChunks.js"));
const StatusTypeId = /* @__PURE__ */ Symbol();
const RunningTypeId = /* @__PURE__ */ Symbol();
class Running {
  constructor() {
    this._statusTypeId = StatusTypeId;
    this._typeId = RunningTypeId;
  }
}
const LeftDoneTypeId = /* @__PURE__ */ Symbol();
class LeftDone {
  constructor() {
    this._statusTypeId = StatusTypeId;
    this._typeId = LeftDoneTypeId;
  }
}
const RightDoneTypeId = /* @__PURE__ */ Symbol();
class RightDone {
  constructor() {
    this._statusTypeId = StatusTypeId;
    this._typeId = RightDoneTypeId;
  }
}
const EndTypeId = /* @__PURE__ */ Symbol();
class End {
  constructor() {
    this._statusTypeId = StatusTypeId;
    this._typeId = EndTypeId;
  }
}
function zipAllWithExec_(self, that, exec, left, right, both) {
  const handleSuccess = (maybeO, maybeA1, excess) => {
    const {
      tuple: [excessL, excessR]
    } = E.fold_(excess, (l) => Tp.tuple(l, CK.empty()), (r) => Tp.tuple(CK.empty(), r));
    const chunkL = O.fold_(maybeO, () => excessL, (upd) => CK.concat_(excessL, upd));
    const chunkR = O.fold_(maybeA1, () => excessR, (upd) => CK.concat_(excessR, upd));
    const {
      tuple: [emit, newExcess]
    } = ZipChunks.zipChunks_(chunkL, chunkR, both);
    const {
      tuple: [fullEmit, status]
    } = (() => {
      if (O.isSome(maybeO)) {
        if (O.isSome(maybeA1)) {
          return Tp.tuple(emit, new Running());
        } else {
          return Tp.tuple(emit, new RightDone());
        }
      } else {
        if (O.isSome(maybeA1)) {
          return Tp.tuple(emit, new LeftDone());
        } else {
          const leftover = E.fold_(newExcess, CK.map(left), CK.map(right));
          return Tp.tuple(CK.concat_(emit, leftover), new End());
        }
      }
    })();
    return Ex.succeed(Tp.tuple(fullEmit, Tp.tuple(status, newExcess)));
  };
  return CombineChunks.combineChunks_(self, that, Tp.tuple(new Running(), E.left(CK.empty())), ({
    tuple: [status, excess]
  }, pullL, pullR) => {
    switch (status._typeId) {
      case RunningTypeId: {
        if (exec._tag === "Sequential") {
          return T.catchAllCause_(T.zipWith_(T.unoption(pullL), T.unoption(pullR), (a, b) => handleSuccess(a, b, excess)), (e) => T.succeed(Ex.failCause(CS.map_(e, O.some))));
        } else {
          return T.catchAllCause_(T.zipWithPar(T.unoption(pullR), (a, b) => handleSuccess(a, b, excess))(T.unoption(pullL)), (e) => T.succeed(Ex.failCause(CS.map_(e, O.some))));
        }
      }
      case LeftDoneTypeId:
        return T.catchAllCause_(T.map_(T.unoption(pullR), (_) => handleSuccess(O.none, _, excess)), (e) => T.succeed(Ex.failCause(CS.map_(e, O.some))));
      case RightDoneTypeId:
        return T.catchAllCause_(T.map_(T.unoption(pullL), (_) => handleSuccess(_, O.none, excess)), (e) => T.succeed(Ex.failCause(CS.map_(e, O.some))));
      case EndTypeId:
        return T.succeed(Ex.fail(O.none));
    }
  });
}
function zipAllWithExec(that, exec, left, right, both) {
  return (self) => zipAllWithExec_(self, that, exec, left, right, both);
}
module.exports = __toCommonJS(zipAllWithExec_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipAllWithExec,
  zipAllWithExec_
});
