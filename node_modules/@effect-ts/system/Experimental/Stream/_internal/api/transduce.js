var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var transduce_exports = {};
__export(transduce_exports, {
  transduce: () => transduce,
  transduce_: () => transduce_
});
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var AB = __toESM(require("../../../../Support/AtomicBoolean/index.js"));
var AR = __toESM(require("../../../../Support/AtomicReference/index.js"));
var CH = __toESM(require("../../Channel/index.js"));
var C = __toESM(require("../core.js"));
function transduce_(self, sink) {
  return new C.Stream(CH.suspend(() => {
    const leftovers = new AR.AtomicReference(CK.empty());
    const upstreamDone = new AB.AtomicBoolean(false);
    const buffer = CH.suspend(() => {
      const l = leftovers.get;
      if (CK.isEmpty(l)) {
        return CH.readWith((c) => CH.zipRight_(CH.write(c), buffer), (e) => CH.fail(e), (done) => CH.end(done));
      } else {
        leftovers.set(CK.empty());
        return CH.zipRight_(CH.writeChunk(l), buffer);
      }
    });
    const concatAndGet = (c) => {
      const ls = leftovers.get;
      const concat = CK.concat_(ls, CK.filter_(c, (a) => !CK.isEmpty(a)));
      leftovers.set(concat);
      return concat;
    };
    const upstreamMarker = CH.readWith((_in) => CH.zipRight_(CH.write(_in), upstreamMarker), (err) => CH.fail(err), (done) => CH.zipRight_(CH.succeedWith(() => upstreamDone.set(true)), CH.end(done)));
    const transducer = CH.chain_(CH.doneCollect(sink.channel), ({
      tuple: [leftover, z]
    }) => CH.chain_(CH.succeedWith(() => Tp.tuple(upstreamDone.get, concatAndGet(leftover))), ({
      tuple: [done, newLeftovers]
    }) => {
      const nextChannel = done && CK.isEmpty(newLeftovers) ? CH.end(void 0) : transducer;
      return CH.zipRight_(CH.write(CK.single(z)), nextChannel);
    }));
    return self.channel[">>>"](upstreamMarker)[">>>"](buffer)[">>>"](transducer);
  }));
}
function transduce(sink) {
  return (self) => transduce_(self, sink);
}
module.exports = __toCommonJS(transduce_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transduce,
  transduce_
});
