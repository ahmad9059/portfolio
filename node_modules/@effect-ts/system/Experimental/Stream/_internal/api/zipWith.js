var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var zipWith_exports = {};
__export(zipWith_exports, {
  zipWith: () => zipWith,
  zipWith_: () => zipWith_
});
var CS = __toESM(require("../../../../Cause/index.js"));
var CK = __toESM(require("../../../../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var E = __toESM(require("../../../../Either/index.js"));
var Ex = __toESM(require("../../../../Exit/index.js"));
var O = __toESM(require("../../../../Option/index.js"));
var ZipChunks = __toESM(require("./_internal/zipChunks.js"));
var CombineChunks = __toESM(require("./combineChunks.js"));
class Running {
  constructor(excess) {
    this.excess = excess;
    this._tag = "Running";
  }
}
class LeftDone {
  constructor(excessL) {
    this.excessL = excessL;
    this._tag = "LeftDone";
  }
}
class RightDone {
  constructor(excessR) {
    this.excessR = excessR;
    this._tag = "RightDone";
  }
}
class End {
  constructor() {
    this._tag = "End";
  }
}
function handleSuccess(f, leftUpd, rightUpd, excess) {
  const [leftExcess, rightExcess] = E.fold_(excess, (l) => [l, CK.empty()], (r) => [CK.empty(), r]);
  const left = O.fold_(leftUpd, () => leftExcess, (upd) => CK.concat_(leftExcess, upd));
  const right = O.fold_(rightUpd, () => rightExcess, (upd) => CK.concat_(rightExcess, upd));
  const {
    tuple: [emit, newExcess]
  } = ZipChunks.zipChunks_(left, right, f);
  if (leftUpd._tag === "Some" && rightUpd._tag === "Some") {
    return Ex.succeed(Tp.tuple(emit, new Running(newExcess)));
  }
  if (leftUpd._tag === "None" && rightUpd._tag === "None") {
    return Ex.fail(O.none);
  }
  const newState = newExcess._tag === "Left" ? CK.isEmpty(newExcess.left) ? new End() : new LeftDone(newExcess.left) : CK.isEmpty(newExcess.right) ? new End() : new RightDone(newExcess.right);
  return Ex.succeed(Tp.tuple(emit, newState));
}
function zipWith_(self, that, f) {
  return CombineChunks.combineChunks_(self, that, new Running(E.left(CK.empty())), (st, p1, p2) => {
    switch (st._tag) {
      case "End": {
        return T.succeed(Ex.fail(O.none));
      }
      case "Running": {
        return T.catchAllCause_(T.zipWithPar_(T.optional(p1), T.optional(p2), (l, r) => handleSuccess(f, l, r, st.excess)), (e) => T.succeed(Ex.halt(CS.map_(e, O.some))));
      }
      case "LeftDone": {
        return T.catchAllCause_(T.map_(T.optional(p2), (l) => handleSuccess(f, O.none, l, E.left(st.excessL))), (e) => T.succeed(Ex.halt(CS.map_(e, O.some))));
      }
      case "RightDone": {
        return T.catchAllCause_(T.map_(T.optional(p1), (r) => handleSuccess(f, r, O.none, E.right(st.excessR))), (e) => T.succeed(Ex.halt(CS.map_(e, O.some))));
      }
    }
  });
}
function zipWith(that, f) {
  return (self) => zipWith_(self, that, f);
}
module.exports = __toCommonJS(zipWith_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zipWith,
  zipWith_
});
