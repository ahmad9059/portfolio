var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var distributedWithDynamic_exports = {};
__export(distributedWithDynamic_exports, {
  distributedWithDynamic: () => distributedWithDynamic,
  distributedWithDynamic_: () => distributedWithDynamic_
});
var CS = __toESM(require("../../../../Cause/index.js"));
var HM = __toESM(require("../../../../Collections/Immutable/HashMap/index.js"));
var L = __toESM(require("../../../../Collections/Immutable/List/index.js"));
var Tp = __toESM(require("../../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../../Effect/index.js"));
var Ex = __toESM(require("../../../../Exit/index.js"));
var import_Function = require("../../../../Function/index.js");
var M = __toESM(require("../../../../Managed/index.js"));
var O = __toESM(require("../../../../Option/index.js"));
var Q = __toESM(require("../../../../Queue/index.js"));
var Ref = __toESM(require("../../../../Ref/index.js"));
var SM = __toESM(require("../../../../Semaphore/index.js"));
var AR = __toESM(require("../../../../Support/AtomicNumber/index.js"));
var RunForEachManaged = __toESM(require("./runForEachManaged.js"));
const distributedWithDynamicId = /* @__PURE__ */ new AR.AtomicNumber(0);
function distributedWithDynamic_(self, maximumLag, decide, done) {
  return M.map_(M.bind_(M.bind_(M.do, "queuesRef", () => T.toManagedRelease_(Ref.makeRef(HM.make()), (_) => T.chain_(Ref.get(_), (qs) => T.forEach_(HM.values(qs), (_2) => Q.shutdown(_2))))), "add", ({
    queuesRef
  }) => {
    const offer = (a) => T.asUnit(T.tap_(T.bind_(T.bind_(T.do, "shouldProcess", () => decide(a)), "queues", () => Ref.get(queuesRef)), ({
      queues,
      shouldProcess
    }) => T.chain_(T.reduce_(queues, L.empty(), (acc, [id, queue]) => {
      if (shouldProcess(id)) {
        return T.foldCauseM_(Q.offer_(queue, Ex.succeed(a)), (c) => CS.interrupted(c) ? T.succeed(L.prepend_(acc, id)) : T.halt(c), (_) => T.succeed(acc));
      } else {
        return T.succeed(acc);
      }
    }), (ids) => L.isEmpty(ids) ? T.unit : Ref.update_(queuesRef, HM.removeMany(ids)))));
    return M.map_(M.tap_(M.let_(M.bind_(M.bind_(M.do, "queuesLock", () => T.toManaged(SM.makeSemaphore(1))), "newQueue", () => T.toManaged(Ref.makeRef(T.map_(T.tap_(T.bind_(T.bind_(T.do, "queue", () => Q.makeBounded(maximumLag)), "id", () => T.succeedWith(() => distributedWithDynamicId.incrementAndGet())), ({
      id,
      queue
    }) => Ref.update_(queuesRef, HM.set(id, queue))), ({
      id,
      queue
    }) => Tp.tuple(id, queue))))), "finalize", ({
      newQueue,
      queuesLock
    }) => (endTake) => SM.withPermit_(T.asUnit(T.tap_(T.tap_(T.bind_(T.tap_(T.do, () => Ref.set_(newQueue, T.map_(T.tap_(T.bind_(T.tap_(T.bind_(T.do, "queue", () => Q.makeBounded(1)), ({
      queue
    }) => Q.offer_(queue, endTake)), "id", () => T.succeedWith(() => distributedWithDynamicId.incrementAndGet())), ({
      id,
      queue
    }) => Ref.update_(queuesRef, HM.set(id, queue))), ({
      id,
      queue
    }) => Tp.tuple(id, queue)))), "queues", () => T.map_(Ref.get(queuesRef), HM.values)), ({
      queues
    }) => T.forEach_(queues, (queue) => T.catchSomeCause_(Q.offer_(queue, endTake), (c) => {
      if (CS.interrupted(c)) {
        return O.some(T.unit);
      } else {
        return O.none;
      }
    }))), (_) => done(endTake))), queuesLock)), ({
      finalize
    }) => M.fork(M.foldCauseM_(RunForEachManaged.runForEachManaged_(self, offer), (cause) => T.toManaged(finalize(Ex.halt(CS.map_(cause, O.some)))), (_) => T.toManaged(finalize(Ex.fail(O.none)))))), ({
      newQueue,
      queuesLock
    }) => SM.withPermit_(T.flatten(Ref.get(newQueue)), queuesLock));
  }), ({
    add
  }) => add);
}
function distributedWithDynamic(maximumLag, decide, done) {
  return (self) => distributedWithDynamic_(self, maximumLag, decide, done);
}
module.exports = __toCommonJS(distributedWithDynamic_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  distributedWithDynamic,
  distributedWithDynamic_
});
