var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var bufferSignal_exports = {};
__export(bufferSignal_exports, {
  bufferSignal: () => bufferSignal
});
var Tp = __toESM(require("../../../../../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../../../../../Effect/index.js"));
var import_Function = require("../../../../../Function/index.js");
var M = __toESM(require("../../../../../Managed/index.js"));
var P = __toESM(require("../../../../../Promise/index.js"));
var Q = __toESM(require("../../../../../Queue/index.js"));
var Ref = __toESM(require("../../../../../Ref/index.js"));
var CH = __toESM(require("../../../Channel/index.js"));
var TK = __toESM(require("../../../Take/index.js"));
function bufferSignal(managed, channel) {
  const producer = (queue, ref) => {
    const terminate = (take) => CH.fromEffect(T.asUnit(T.tap_(T.tap_(T.tap_(T.bind_(T.tap_(T.bind_(T.do, "latch", () => ref.get), ({
      latch
    }) => P.await(latch)), "p", () => P.make()), ({
      p
    }) => Q.offer_(queue, Tp.tuple(take, p))), ({
      p
    }) => ref.set(p)), ({
      p
    }) => P.await(p))));
    return CH.readWith((_in) => CH.zipRight_(CH.fromEffect(T.asUnit(T.tap_(T.bind_(T.bind_(T.do, "p", () => P.make()), "added", ({
      p
    }) => Q.offer_(queue, Tp.tuple(TK.chunk(_in), p))), ({
      added,
      p
    }) => T.when_(ref.set(p), () => added)))), producer(queue, ref)), (err) => terminate(TK.fail(err)), (_) => terminate(TK.end));
  };
  const consumer = (queue) => {
    const process = CH.chain_(CH.fromEffect(Q.take(queue)), ({
      tuple: [take, promise]
    }) => CH.zipRight_(CH.fromEffect(P.succeed_(promise, void 0)), TK.fold_(take, CH.end(void 0), (error) => CH.failCause(error), (value) => CH.zipRight_(CH.write(value), process))));
    return process;
  };
  return CH.managed_(M.map_(M.tap_(M.bind_(M.tap_(M.bind_(M.bind_(M.do, "queue", () => managed), "start", () => T.toManaged(P.make())), ({
    start
  }) => T.toManaged(P.succeed_(start, void 0))), "ref", ({
    start
  }) => Ref.makeManagedRef(start)), ({
    queue,
    ref
  }) => M.fork(CH.runManaged(channel[">>>"](producer(queue, ref))))), ({
    queue
  }) => queue), (queue) => consumer(queue));
}
module.exports = __toCommonJS(bufferSignal_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bufferSignal
});
