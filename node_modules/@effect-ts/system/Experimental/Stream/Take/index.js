var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Take_exports = {};
__export(Take_exports, {
  Take: () => Take,
  chunk: () => chunk,
  die: () => die,
  dieMessage: () => dieMessage,
  done: () => done,
  end: () => end,
  fail: () => fail,
  failCause: () => failCause,
  fold: () => fold,
  foldEffect: () => foldEffect,
  foldEffect_: () => foldEffect_,
  fold_: () => fold_,
  fromEffect: () => fromEffect,
  fromExit: () => fromExit,
  fromPull: () => fromPull,
  halt: () => halt,
  isDone: () => isDone,
  isFailure: () => isFailure,
  isSuccess: () => isSuccess,
  map: () => map,
  map_: () => map_,
  single: () => single,
  tap: () => tap,
  tap_: () => tap_
});
var C = __toESM(require("../../../Cause/index.js"));
var A = __toESM(require("../../../Collections/Immutable/Chunk/index.js"));
var import_commons = require("../../../Effect/commons.js");
var T = __toESM(require("../../../Effect/index.js"));
var Ex = __toESM(require("../../../Exit/index.js"));
var O = __toESM(require("../../../Option/index.js"));
class Take {
  constructor(exit) {
    this.exit = exit;
  }
}
function done(self) {
  return T.done(self.exit);
}
function fold_(self, end2, error, value) {
  return Ex.fold_(self.exit, (_) => O.fold_(C.flipCauseOption(_), () => end2, error), value);
}
function fold(end2, error, value) {
  return (self) => fold_(self, end2, error, value);
}
function foldEffect_(self, end2, error, value) {
  return Ex.foldM_(self.exit, (_) => O.fold_(C.flipCauseOption(_), () => end2, error), value);
}
function foldEffect(end2, error, value) {
  return (self) => foldEffect_(self, end2, error, value);
}
function isDone(self) {
  return Ex.fold_(self.exit, (_) => O.isNone(C.flipCauseOption(_)), (_) => false);
}
function isFailure(self) {
  return Ex.fold_(self.exit, (_) => O.isSome(C.flipCauseOption(_)), (_) => false);
}
function isSuccess(self) {
  return Ex.fold_(self.exit, (_) => false, (_) => true);
}
function map_(self, f) {
  return new Take(Ex.map_(self.exit, A.map(f)));
}
function map(f) {
  return (self) => map_(self, f);
}
function tap_(self, f) {
  return T.asUnit(Ex.forEach_(self.exit, f));
}
function tap(f) {
  return (self) => tap_(self, f);
}
function single(a) {
  return new Take(Ex.succeed(A.single(a)));
}
function chunk(as) {
  return new Take(Ex.succeed(as));
}
function fail(e) {
  return new Take(Ex.fail(O.some(e)));
}
function failCause(c) {
  return new Take(Ex.failCause(C.map_(c, O.some)));
}
function fromEffect(effect) {
  return T.foldCause_(effect, (cause) => halt(cause), single);
}
function fromPull(pull) {
  return T.foldCause_(pull, (_) => O.fold_(C.flipCauseOption(_), () => end, halt), chunk);
}
function halt(c) {
  return new Take(Ex.halt(C.map_(c, O.some)));
}
function die(e) {
  return new Take(Ex.die(e));
}
function dieMessage(msg) {
  return new Take(Ex.die(new C.RuntimeError(msg)));
}
function fromExit(exit) {
  return new Take(Ex.map_(Ex.mapError_(exit, O.some), A.single));
}
const end = /* @__PURE__ */ new Take(/* @__PURE__ */ Ex.fail(O.none));
module.exports = __toCommonJS(Take_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Take,
  chunk,
  die,
  dieMessage,
  done,
  end,
  fail,
  failCause,
  fold,
  foldEffect,
  foldEffect_,
  fold_,
  fromEffect,
  fromExit,
  fromPull,
  halt,
  isDone,
  isFailure,
  isSuccess,
  map,
  map_,
  single,
  tap,
  tap_
});
