var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Strategy_exports = {};
__export(Strategy_exports, {
  BackPressure: () => BackPressure,
  Dropping: () => Dropping,
  Sliding: () => Sliding,
  Strategy: () => Strategy
});
var import_Operator = require("../Operator/index.js");
var Chunk = __toESM(require("../Collections/Immutable/Chunk/index.js"));
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var T = __toESM(require("../Effect/index.js"));
var import_Function = require("../Function/index.js");
var P = __toESM(require("../Promise/index.js"));
var MQ = __toESM(require("../Support/MutableQueue/index.js"));
var U = __toESM(require("./_internal/unsafe.js"));
class Strategy {
  unsafeCompletePollers(hub, subscribers, subscription, pollers) {
    let keepPolling = true;
    const nullPoller = null;
    const empty = null;
    while (keepPolling && !subscription.isEmpty()) {
      const poller = pollers.poll(nullPoller);
      if (poller === nullPoller) {
        const subPollerPair = Tp.tuple(subscription, pollers);
        subscribers.remove(subPollerPair);
        if (!pollers.isEmpty) {
          subscribers.add(subPollerPair);
        }
        keepPolling = false;
      } else {
        const pollResult = subscription.poll(empty);
        if (pollResult === null) {
          U.unsafeOfferAll(pollers, Chunk.prepend_(U.unsafePollAllQueue(pollers), poller));
        } else {
          U.unsafeCompletePromise(poller, pollResult);
          this.unsafeOnHubEmptySpace(hub, subscribers);
        }
      }
    }
  }
  unsafeCompleteSubscribers(hub, subscribers) {
    for (const {
      tuple: [subscription, pollers]
    } of subscribers) {
      this.unsafeCompletePollers(hub, subscribers, subscription, pollers);
    }
  }
}
class BackPressure extends Strategy {
  constructor() {
    super(...arguments);
    this.publishers = new MQ.Unbounded();
  }
  handleSurplus(hub, subscribers, as, isShutdown) {
    return T.suspend((_, fiberId) => {
      const promise = P.unsafeMake(fiberId);
      return T.onInterrupt_(T.suspend(() => {
        this.unsafeOffer(as, promise);
        this.unsafeOnHubEmptySpace(hub, subscribers);
        this.unsafeCompleteSubscribers(hub, subscribers);
        return isShutdown.get ? T.interrupt : P.await(promise);
      }), () => T.succeedWith(() => this.unsafeRemove(promise)));
    });
  }
  get shutdown() {
    return T.asUnit(T.tap_(T.bind_(T.bind_(T.do, "fiberId", () => T.fiberId), "publishers", () => T.succeedWith(() => U.unsafePollAllQueue(this.publishers))), ({
      fiberId,
      publishers
    }) => T.forEachPar_(publishers, ([_, promise, last]) => last ? P.interruptAs(fiberId)(promise) : T.unit)));
  }
  unsafeOnHubEmptySpace(hub, subscribers) {
    const empty = null;
    let keepPolling = true;
    while (keepPolling && !hub.isFull()) {
      const publisher = this.publishers.poll(empty);
      if (publisher === null) {
        keepPolling = false;
      } else {
        const published = hub.publish(publisher[0]);
        if (published && publisher[2]) {
          U.unsafeCompletePromise(publisher[1], true);
        } else if (!published) {
          U.unsafeOfferAll(this.publishers, Chunk.prepend_(U.unsafePollAllQueue(this.publishers), publisher));
        }
        this.unsafeCompleteSubscribers(hub, subscribers);
      }
    }
  }
  unsafeOffer(as, promise) {
    const it = as[Symbol.iterator]();
    let curr = it.next();
    if (!curr.done) {
      let next;
      while ((next = it.next()) && !next.done) {
        this.publishers.offer([curr.value, promise, false]);
        curr = next;
      }
      this.publishers.offer([curr.value, promise, true]);
    }
  }
  unsafeRemove(promise) {
    U.unsafeOfferAll(this.publishers, Chunk.filter_(U.unsafePollAllQueue(this.publishers), ([_, a]) => a !== promise));
  }
}
class Dropping extends Strategy {
  constructor() {
    super(...arguments);
    this.shutdown = T.unit;
  }
  handleSurplus(_hub, _subscribers, _as, _isShutdown) {
    return T.succeed(false);
  }
  unsafeOnHubEmptySpace(_hub, _subscribers) {
  }
}
class Sliding extends Strategy {
  constructor() {
    super(...arguments);
    this.shutdown = T.unit;
  }
  unsafeSlidingPublish(hub, as) {
    const it = as[Symbol.iterator]();
    let next = it.next();
    if (!next.done && hub.capacity > 0) {
      let a = next.value;
      let loop = true;
      while (loop) {
        hub.slide();
        const pub = hub.publish(a);
        if (pub && (next = it.next()) && !next.done) {
          a = next.value;
        } else if (pub) {
          loop = false;
        }
      }
    }
  }
  handleSurplus(hub, subscribers, as, _isShutdown) {
    return T.succeedWith(() => {
      this.unsafeSlidingPublish(hub, as);
      this.unsafeCompleteSubscribers(hub, subscribers);
      return true;
    });
  }
  unsafeOnHubEmptySpace(_hub, _subscribers) {
  }
}
module.exports = __toCommonJS(Strategy_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BackPressure,
  Dropping,
  Sliding,
  Strategy
});
