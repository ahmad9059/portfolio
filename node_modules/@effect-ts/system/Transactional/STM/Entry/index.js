var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Entry_exports = {};
__export(Entry_exports, {
  Entry: () => Entry,
  EntryOps: () => EntryOps,
  EntryOpsTypeId: () => EntryOpsTypeId,
  EntryTypeId: () => EntryTypeId,
  makeEntry: () => makeEntry
});
var import_Operator = require("../../../Operator/index.js");
var import_Versioned = require("../Versioned/index.js");
const EntryTypeId = /* @__PURE__ */ Symbol();
class Entry {
  constructor(use) {
    this.use = use;
    this._typeId = EntryTypeId;
  }
}
function makeEntry(tref0, isNew0) {
  const versioned = tref0.versioned;
  const ops = new EntryOps(tref0, versioned, versioned.value, isNew0, false);
  return new Entry((f) => f(ops));
}
const EntryOpsTypeId = /* @__PURE__ */ Symbol();
class EntryOps {
  constructor(tref, expected, newValue, isNew, isChanged) {
    this._typeId = EntryOpsTypeId;
    this.tref = tref;
    this.expected = expected;
    this.newValue = newValue;
    this.isNew = isNew;
    this._isChanged = isChanged;
  }
  unsafeSet(value) {
    this._isChanged = true;
    this.newValue = value;
  }
  unsafeGet() {
    return this.newValue;
  }
  commit() {
    this.tref.versioned = new import_Versioned.Versioned(this.newValue);
  }
  copy() {
    const ops = new EntryOps(this.tref, this.expected, this.newValue, this.isNew, this.isChanged());
    return new Entry((f) => f(ops));
  }
  isInvalid() {
    return !this.isValid();
  }
  isValid() {
    return this.tref.versioned === this.expected;
  }
  isChanged() {
    return this._isChanged;
  }
  toString() {
    return `Entry(expected.value = ${this.expected.value}, newValue = ${this.newValue}, tref = ${this.tref}, isChanged = ${this.isChanged()})`;
  }
}
module.exports = __toCommonJS(Entry_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Entry,
  EntryOps,
  EntryOpsTypeId,
  EntryTypeId,
  makeEntry
});
