var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var TExit_exports = {};
__export(TExit_exports, {
  Die: () => Die,
  DieTypeId: () => DieTypeId,
  Fail: () => Fail,
  FailTypeId: () => FailTypeId,
  Retry: () => Retry,
  RetryTypeId: () => RetryTypeId,
  Succeed: () => Succeed,
  SucceedTypeId: () => SucceedTypeId,
  die: () => die,
  fail: () => fail,
  retry: () => retry,
  succeed: () => succeed,
  unit: () => unit
});
var import_Operator = require("../../../Operator/index.js");
var St = __toESM(require("../../../Structural/index.js"));
const FailTypeId = /* @__PURE__ */ Symbol();
class Fail {
  constructor(value) {
    this.value = value;
    this._typeId = FailTypeId;
  }
  get [St.hashSym]() {
    return St.hash(this.value);
  }
  [St.equalsSym](that) {
    return that instanceof Fail && St.equals(this.value, that.value);
  }
}
const DieTypeId = /* @__PURE__ */ Symbol();
class Die {
  constructor(value) {
    this.value = value;
    this._typeId = DieTypeId;
  }
  get [St.hashSym]() {
    return St.hash(this.value);
  }
  [St.equalsSym](that) {
    return that instanceof Die && St.equals(this.value, that.value);
  }
}
const SucceedTypeId = /* @__PURE__ */ Symbol();
class Succeed {
  constructor(value) {
    this.value = value;
    this._typeId = SucceedTypeId;
  }
  get [St.hashSym]() {
    return St.hash(this.value);
  }
  [St.equalsSym](that) {
    return that instanceof Succeed && St.equals(this.value, that.value);
  }
}
const RetryTypeId = /* @__PURE__ */ Symbol();
const _retryHash = /* @__PURE__ */ St.randomInt();
class Retry {
  constructor() {
    this._typeId = RetryTypeId;
  }
  get [St.hashSym]() {
    return St.opt(_retryHash);
  }
  [St.equalsSym](that) {
    return that instanceof Retry;
  }
}
const unit = /* @__PURE__ */ new Succeed(void 0);
function succeed(a) {
  return new Succeed(a);
}
function fail(e) {
  return new Fail(e);
}
function die(e) {
  return new Die(e);
}
const retry = /* @__PURE__ */ new Retry();
module.exports = __toCommonJS(TExit_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Die,
  DieTypeId,
  Fail,
  FailTypeId,
  Retry,
  RetryTypeId,
  Succeed,
  SucceedTypeId,
  die,
  fail,
  retry,
  succeed,
  unit
});
