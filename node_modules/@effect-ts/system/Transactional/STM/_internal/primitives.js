var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var primitives_exports = {};
__export(primitives_exports, {
  DieExceptionTypeId: () => DieExceptionTypeId,
  FailExceptionTypeId: () => FailExceptionTypeId,
  RetryExceptionTypeId: () => RetryExceptionTypeId,
  STM: () => STM,
  STMDieException: () => STMDieException,
  STMEffect: () => STMEffect,
  STMEffectTypeId: () => STMEffectTypeId,
  STMFailException: () => STMFailException,
  STMOnFailure: () => STMOnFailure,
  STMOnFailureTypeId: () => STMOnFailureTypeId,
  STMOnRetry: () => STMOnRetry,
  STMOnRetryTypeId: () => STMOnRetryTypeId,
  STMOnSuccess: () => STMOnSuccess,
  STMOnSuccessTypeId: () => STMOnSuccessTypeId,
  STMProvideSome: () => STMProvideSome,
  STMProvideSomeTypeId: () => STMProvideSomeTypeId,
  STMRetryException: () => STMRetryException,
  STMSucceed: () => STMSucceed,
  STMSucceedNow: () => STMSucceedNow,
  STMSucceedNowTypeId: () => STMSucceedNowTypeId,
  STMSucceedTypeId: () => STMSucceedTypeId,
  STMTypeId: () => STMTypeId,
  catchAll: () => catchAll,
  catchAll_: () => catchAll_,
  chain: () => chain,
  chain_: () => chain_,
  concreteSTM: () => concreteSTM,
  die: () => die,
  dieWith: () => dieWith,
  ensuring: () => ensuring,
  ensuring_: () => ensuring_,
  fail: () => fail,
  failWith: () => failWith,
  foldM: () => foldM,
  foldM_: () => foldM_,
  isDieException: () => isDieException,
  isFailException: () => isFailException,
  isRetryException: () => isRetryException,
  map: () => map,
  map_: () => map_,
  provideSome: () => provideSome,
  provideSome_: () => provideSome_,
  retry: () => retry,
  succeed: () => succeed,
  succeedWith: () => succeedWith,
  unit: () => unit
});
var T = __toESM(require("../../../Effect/index.js"));
var E = __toESM(require("../../../Either/index.js"));
var _a;
const STMTypeId = /* @__PURE__ */ Symbol();
class STM {
  constructor() {
    this[_a] = STMTypeId;
  }
}
_a = STMTypeId, T._R, T._E, T._A;
const STMEffectTypeId = /* @__PURE__ */ Symbol();
class STMEffect extends STM {
  constructor(f) {
    super();
    this.f = f;
    this._typeId = STMEffectTypeId;
  }
}
const STMOnFailureTypeId = /* @__PURE__ */ Symbol();
class STMOnFailure extends STM {
  constructor(stm, onFailure) {
    super();
    this.stm = stm;
    this.onFailure = onFailure;
    this._typeId = STMOnFailureTypeId;
  }
  apply(a) {
    return new STMSucceedNow(a);
  }
}
const STMOnRetryTypeId = /* @__PURE__ */ Symbol();
class STMOnRetry extends STM {
  constructor(stm, onRetry) {
    super();
    this.stm = stm;
    this.onRetry = onRetry;
    this._typeId = STMOnRetryTypeId;
  }
  apply(a) {
    return new STMSucceedNow(a);
  }
}
const STMOnSuccessTypeId = /* @__PURE__ */ Symbol();
class STMOnSuccess extends STM {
  constructor(stm, apply) {
    super();
    this.stm = stm;
    this.apply = apply;
    this._typeId = STMOnSuccessTypeId;
  }
}
const STMSucceedTypeId = /* @__PURE__ */ Symbol();
class STMSucceed extends STM {
  constructor(a) {
    super();
    this.a = a;
    this._typeId = STMSucceedTypeId;
  }
}
const STMSucceedNowTypeId = /* @__PURE__ */ Symbol();
class STMSucceedNow extends STM {
  constructor(a) {
    super();
    this.a = a;
    this._typeId = STMSucceedNowTypeId;
  }
}
const STMProvideSomeTypeId = /* @__PURE__ */ Symbol();
class STMProvideSome extends STM {
  constructor(stm, f) {
    super();
    this.stm = stm;
    this.f = f;
    this._typeId = STMProvideSomeTypeId;
  }
}
function concreteSTM(_) {
}
const FailExceptionTypeId = /* @__PURE__ */ Symbol();
class STMFailException {
  constructor(e) {
    this.e = e;
    this._typeId = FailExceptionTypeId;
  }
}
function isFailException(u) {
  return typeof u === "object" && u != null && "_typeId" in u && u["_typeId"] === FailExceptionTypeId;
}
const DieExceptionTypeId = /* @__PURE__ */ Symbol();
class STMDieException {
  constructor(e) {
    this.e = e;
    this._typeId = DieExceptionTypeId;
  }
}
function isDieException(u) {
  return typeof u === "object" && u != null && "_typeId" in u && u["_typeId"] === DieExceptionTypeId;
}
const RetryExceptionTypeId = /* @__PURE__ */ Symbol();
class STMRetryException {
  constructor() {
    this._typeId = RetryExceptionTypeId;
  }
}
function isRetryException(u) {
  return typeof u === "object" && u != null && "_typeId" in u && u["_typeId"] === RetryExceptionTypeId;
}
function succeed(a) {
  return new STMSucceedNow(a);
}
function succeedWith(a) {
  return new STMSucceed(a);
}
function fail(e) {
  return new STMEffect(() => {
    throw new STMFailException(e);
  });
}
function failWith(e) {
  return new STMEffect(() => {
    throw new STMFailException(e());
  });
}
function die(u) {
  return new STMEffect(() => {
    throw new STMDieException(u);
  });
}
function dieWith(u) {
  return new STMEffect(() => {
    throw new STMDieException(u());
  });
}
function map_(self, f) {
  return chain_(self, (a) => succeed(f(a)));
}
function map(f) {
  return (self) => map_(self, f);
}
function chain_(self, f) {
  return new STMOnSuccess(self, f);
}
function chain(f) {
  return (self) => chain_(self, f);
}
function catchAll_(self, f) {
  return new STMOnFailure(self, f);
}
function catchAll(f) {
  return (self) => catchAll_(self, f);
}
function foldM_(self, g, f) {
  return chain_(catchAll_(map_(self, E.right), (e) => map_(g(e), E.left)), E.fold(succeed, f));
}
function foldM(g, f) {
  return (self) => foldM_(self, g, f);
}
function ensuring_(self, finalizer) {
  return foldM_(self, (e) => chain_(finalizer, () => fail(e)), (a) => chain_(finalizer, () => succeed(a)));
}
function ensuring(finalizer) {
  return (self) => ensuring_(self, finalizer);
}
const retry = /* @__PURE__ */ new STMEffect(() => {
  throw new STMRetryException();
});
const unit = /* @__PURE__ */ succeed(void 0);
function provideSome_(self, f) {
  return new STMProvideSome(self, f);
}
function provideSome(f) {
  return (self) => provideSome_(self, f);
}
module.exports = __toCommonJS(primitives_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DieExceptionTypeId,
  FailExceptionTypeId,
  RetryExceptionTypeId,
  STM,
  STMDieException,
  STMEffect,
  STMEffectTypeId,
  STMFailException,
  STMOnFailure,
  STMOnFailureTypeId,
  STMOnRetry,
  STMOnRetryTypeId,
  STMOnSuccess,
  STMOnSuccessTypeId,
  STMProvideSome,
  STMProvideSomeTypeId,
  STMRetryException,
  STMSucceed,
  STMSucceedNow,
  STMSucceedNowTypeId,
  STMSucceedTypeId,
  STMTypeId,
  catchAll,
  catchAll_,
  chain,
  chain_,
  concreteSTM,
  die,
  dieWith,
  ensuring,
  ensuring_,
  fail,
  failWith,
  foldM,
  foldM_,
  isDieException,
  isFailException,
  isRetryException,
  map,
  map_,
  provideSome,
  provideSome_,
  retry,
  succeed,
  succeedWith,
  unit
});
