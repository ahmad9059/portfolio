var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var TArray_exports = {};
__export(TArray_exports, {
  TArray: () => TArray,
  TArrayTypeId: () => TArrayTypeId,
  empty: () => empty,
  find: () => find,
  findLast: () => findLast,
  findLast_: () => findLast_,
  find_: () => find_,
  fromIterable: () => fromIterable,
  get: () => get,
  get_: () => get_,
  make: () => make
});
var import_GlobalExceptions = require("../../GlobalExceptions/index.js");
var O = __toESM(require("../../Option/index.js"));
var STM = __toESM(require("../STM/index.js"));
var TRef = __toESM(require("../TRef/index.js"));
const TArrayTypeId = /* @__PURE__ */ Symbol();
class TArray {
  constructor(array) {
    this.array = array;
    this._typeId = TArrayTypeId;
  }
}
function fromIterable(it) {
  return STM.map_(STM.forEach_(it, TRef.make), (as) => new TArray(as));
}
function make(...data) {
  return fromIterable(data);
}
function empty() {
  return fromIterable([]);
}
function get_(self, index) {
  if (!Number.isInteger(index) || index < 0 || index >= self.array.length) {
    return STM.die(new import_GlobalExceptions.ArrayIndexOutOfBoundsException(index));
  }
  return TRef.get(self.array[index]);
}
function get(index) {
  return (self) => get_(self, index);
}
function find_(self, p) {
  return new STM.STMEffect((journal) => {
    let i = 0;
    while (i < self.array.length) {
      const a = TRef.unsafeGet_(self.array[i], journal);
      if (p(a)) {
        return O.some(a);
      }
      i++;
    }
    return O.none;
  });
}
function find(p) {
  return (self) => find_(self, p);
}
function findLast_(self, p) {
  return new STM.STMEffect((journal) => {
    let i = 0;
    let res = O.emptyOf();
    while (i < self.array.length) {
      const a = TRef.unsafeGet_(self.array[i], journal);
      if (p(a)) {
        res = O.some(a);
      }
      i++;
    }
    return res;
  });
}
function findLast(p) {
  return (self) => findLast_(self, p);
}
module.exports = __toCommonJS(TArray_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TArray,
  TArrayTypeId,
  empty,
  find,
  findLast,
  findLast_,
  find_,
  fromIterable,
  get,
  get_,
  make
});
