var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var forEach_exports = {};
__export(forEach_exports, {
  forEach: () => forEach,
  forEachExec: () => forEachExec,
  forEachExec_: () => forEachExec_,
  forEachPar: () => forEachPar,
  forEachParN: () => forEachParN,
  forEachParN_: () => forEachParN_,
  forEachPar_: () => forEachPar_,
  forEachUnit: () => forEachUnit,
  forEachUnit_: () => forEachUnit_,
  forEach_: () => forEach_
});
var import_unzip = require("../Collections/Immutable/Chunk/api/unzip.js");
var Chunk = __toESM(require("../Collections/Immutable/Chunk/core.js"));
var Tp = __toESM(require("../Collections/Immutable/Tuple/index.js"));
var import_ExecutionStrategy = require("../Effect/ExecutionStrategy.js");
var import_core = require("./core.js");
var T = __toESM(require("./deps.js"));
var import_managed = require("./managed.js");
function forEach(f, __trace) {
  return (as) => forEach_(as, f, __trace);
}
function forEach_(as, f, __trace) {
  return (0, import_managed.managedApply)(T.map_(T.forEach_(as, (a) => f(a).effect, __trace), (res) => {
    const fins = Chunk.map_(res, (k) => k.get(0));
    const as2 = Chunk.map_(res, (k) => k.get(1));
    return Tp.tuple((e) => T.forEach_(Chunk.reverse(fins), (fin) => fin(e), __trace), as2);
  }));
}
function forEachExec_(as, es, f, __trace) {
  switch (es._tag) {
    case "Sequential": {
      return forEach_(as, f, __trace);
    }
    case "Parallel": {
      return forEachPar_(as, f, __trace);
    }
    case "ParallelN": {
      return forEachParN_(as, es.n, f, __trace);
    }
  }
}
function forEachExec(es, f, __trace) {
  return (as) => forEachExec_(as, es, f, __trace);
}
function forEachUnit_(as, f, __trace) {
  return (0, import_managed.managedApply)(T.map_(T.forEach_(as, (a) => f(a).effect, __trace), (result) => {
    const {
      tuple: [fins]
    } = (0, import_unzip.unzip)(result);
    return Tp.tuple((e) => T.forEach_(Chunk.reverse(fins), (f2) => f2(e), __trace), void 0);
  }));
}
function forEachUnit(f, __trace) {
  return (as) => forEachUnit_(as, f, __trace);
}
function forEachPar(f, __trace) {
  return (as) => forEachPar_(as, f, __trace);
}
function forEachPar_(as, f, __trace) {
  return (0, import_core.mapM_)((0, import_core.makeManagedReleaseMap)(T.parallel, __trace), (parallelReleaseMap) => {
    const makeInnerMap = T.provideSome_(T.map_((0, import_core.makeManagedReleaseMap)(import_ExecutionStrategy.sequential).effect, ({
      tuple: [_, x]
    }) => x), (x) => Tp.tuple(x, parallelReleaseMap));
    return T.forEachPar_(as, (a) => T.map_(T.chain_(makeInnerMap, (innerMap) => T.provideSome_(f(a).effect, (u) => Tp.tuple(u, innerMap))), ({
      tuple: [_, b]
    }) => b));
  });
}
function forEachParN(n, f, __trace) {
  return (as) => forEachParN_(as, n, f, __trace);
}
function forEachParN_(as, n, f, __trace) {
  return (0, import_core.mapM_)((0, import_core.makeManagedReleaseMap)(T.parallelN(n), __trace), (parallelReleaseMap) => {
    const makeInnerMap = T.provideSome_(T.map_((0, import_core.makeManagedReleaseMap)(import_ExecutionStrategy.sequential).effect, ({
      tuple: [_, x]
    }) => x), (x) => Tp.tuple(x, parallelReleaseMap));
    return T.forEachParN_(as, n, (a) => T.map_(T.chain_(makeInnerMap, (innerMap) => T.provideSome_(f(a).effect, (u) => Tp.tuple(u, innerMap))), ({
      tuple: [_, b]
    }) => b));
  });
}
module.exports = __toCommonJS(forEach_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  forEach,
  forEachExec,
  forEachExec_,
  forEachPar,
  forEachParN,
  forEachParN_,
  forEachPar_,
  forEachUnit,
  forEachUnit_,
  forEach_
});
