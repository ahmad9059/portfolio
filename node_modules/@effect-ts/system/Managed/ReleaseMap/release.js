var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var release_exports = {};
__export(release_exports, {
  release: () => release
});
var import_core = require("../../Collections/Immutable/Map/core.js");
var Tp = __toESM(require("../../Collections/Immutable/Tuple/index.js"));
var import_Function = require("../../Function/index.js");
var O = __toESM(require("../../Option/index.js"));
var T = __toESM(require("../deps-core.js"));
var R = __toESM(require("./deps-ref.js"));
var import_Running = require("./Running.js");
function release(key, exit) {
  return (_) => T.flatten(R.modify_(_.ref, (s) => {
    switch (s._tag) {
      case "Exited": {
        return Tp.tuple(T.unit, s);
      }
      case "Running": {
        return Tp.tuple(O.fold_((0, import_core.lookup)(key)(s.finalizers()), () => T.unit, (f) => f(exit)), new import_Running.Running(s.nextKey, (0, import_core.remove)(key)(s.finalizers())));
      }
    }
  }));
}
module.exports = __toCommonJS(release_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  release
});
