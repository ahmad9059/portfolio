var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var core_exports = {};
__export(core_exports, {
  absurd: () => absurd,
  constFalse: () => constFalse,
  constNull: () => constNull,
  constTrue: () => constTrue,
  constUndefined: () => constUndefined,
  constVoid: () => constVoid,
  constant: () => constant,
  decrement: () => decrement,
  enforceContext: () => enforceContext,
  enforceError: () => enforceError,
  enforceOutput: () => enforceOutput,
  flip: () => flip,
  flow: () => import_flow.flow,
  hole: () => hole,
  identity: () => identity,
  increment: () => increment,
  literal: () => literal,
  not: () => not,
  pipe: () => import_pipe.pipe,
  tuple: () => tuple,
  tupled: () => tupled,
  unsafeCoerce: () => unsafeCoerce,
  untupled: () => untupled
});
var import_flow = require("./flow.js");
var import_pipe = require("./pipe.js");
function absurd(_) {
  throw new Error("Called `absurd` function which should be uncallable");
}
function constant(a) {
  return () => a;
}
const constFalse = () => {
  return false;
};
const constNull = () => {
  return null;
};
const constTrue = () => {
  return true;
};
const constUndefined = () => {
  return;
};
const constVoid = () => {
  return;
};
function flip(f) {
  return (b, a) => f(a, b);
}
function identity(a) {
  return a;
}
function literal(k) {
  return k;
}
function not(predicate) {
  return (a) => !predicate(a);
}
function tuple(...t) {
  return t;
}
function tupled(f) {
  return (a) => f(...a);
}
function untupled(f) {
  return (...a) => f(a);
}
function unsafeCoerce(a) {
  return a;
}
function hole() {
  throw new Error("Hole should never be called");
}
function enforceOutput() {
  return (_) => _;
}
function enforceError() {
  return (_) => _;
}
function enforceContext() {
  return (_) => _;
}
function increment(n) {
  return n + 1;
}
function decrement(n) {
  return n - 1;
}
module.exports = __toCommonJS(core_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  absurd,
  constFalse,
  constNull,
  constTrue,
  constUndefined,
  constVoid,
  constant,
  decrement,
  enforceContext,
  enforceError,
  enforceOutput,
  flip,
  flow,
  hole,
  identity,
  increment,
  literal,
  not,
  pipe,
  tuple,
  tupled,
  unsafeCoerce,
  untupled
});
