var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Decision_exports = {};
__export(Decision_exports, {
  Continue: () => Continue,
  Done: () => Done,
  as: () => as,
  contramap: () => contramap,
  done: () => done,
  makeContinue: () => makeContinue,
  makeDone: () => makeDone,
  map: () => map,
  toDone: () => toDone
});
var T = __toESM(require("../effect.js"));
class Done {
  constructor(out) {
    this.out = out;
    this._tag = "Done";
  }
}
class Continue {
  constructor(out, interval, next) {
    this.out = out;
    this.interval = interval;
    this.next = next;
    this._tag = "Continue";
  }
}
function makeDone(o) {
  return new Done(o);
}
function makeContinue(out, interval, next) {
  return new Continue(out, interval, next);
}
function toDone(self) {
  switch (self._tag) {
    case "Done": {
      return self;
    }
    case "Continue": {
      return new Done(self.out);
    }
  }
}
function map(f) {
  return (self) => {
    switch (self._tag) {
      case "Done": {
        return new Done(f(self.out));
      }
      case "Continue": {
        return new Continue(f(self.out), self.interval, (n, i) => T.map_(self.next(n, i), map(f)));
      }
    }
  };
}
function contramap(f) {
  return (self) => {
    switch (self._tag) {
      case "Done": {
        return self;
      }
      case "Continue": {
        return new Continue(self.out, self.interval, (n, i) => T.map_(self.next(n, f(i)), contramap(f)));
      }
    }
  };
}
function as(o) {
  return (self) => map(() => o)(self);
}
function done(a) {
  return () => T.succeed(new Done(a));
}
module.exports = __toCommonJS(Decision_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Continue,
  Done,
  as,
  contramap,
  done,
  makeContinue,
  makeDone,
  map,
  toDone
});
