"use strict";
// ets_tracing: off
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveSimpleProcessor = exports.makeTracingSpanExporter = exports.makeOTLPTraceExporterConfigLayerM = exports.makeOTLPTraceExporterConfigLayer = exports.OTLPTraceExporterConfigTag = exports.OTLPTraceExporterConfig = exports.OTLPTraceExporterConfigSymbol = void 0;
const T = __importStar(require("@effect-ts/core/Effect"));
const L = __importStar(require("@effect-ts/core/Effect/Layer"));
const M = __importStar(require("@effect-ts/core/Effect/Managed"));
const Function_1 = require("@effect-ts/core/Function");
const Has_1 = require("@effect-ts/core/Has");
const otel_1 = require("@effect-ts/otel");
const exporter_trace_otlp_grpc_1 = require("@opentelemetry/exporter-trace-otlp-grpc");
exports.OTLPTraceExporterConfigSymbol = Symbol();
class OTLPTraceExporterConfig {
    constructor(config) {
        this.config = config;
        this[_a] = exports.OTLPTraceExporterConfigSymbol;
    }
}
exports.OTLPTraceExporterConfig = OTLPTraceExporterConfig;
_a = exports.OTLPTraceExporterConfigSymbol;
exports.OTLPTraceExporterConfigTag = (0, Has_1.tag)(exports.OTLPTraceExporterConfigSymbol);
const makeOTLPTraceExporterConfigLayer = (config) => L.fromEffect(exports.OTLPTraceExporterConfigTag)(T.succeedWith(() => new OTLPTraceExporterConfig(config))).setKey(exports.OTLPTraceExporterConfigTag.key);
exports.makeOTLPTraceExporterConfigLayer = makeOTLPTraceExporterConfigLayer;
const makeOTLPTraceExporterConfigLayerM = (config) => L.fromEffect(exports.OTLPTraceExporterConfigTag)(T.map_(config, (_) => new OTLPTraceExporterConfig(_))).setKey(exports.OTLPTraceExporterConfigTag.key);
exports.makeOTLPTraceExporterConfigLayerM = makeOTLPTraceExporterConfigLayerM;
exports.makeTracingSpanExporter = M.gen(function* (_) {
    const { config } = yield* _(exports.OTLPTraceExporterConfigTag);
    const spanExporter = yield* _((0, Function_1.pipe)(T.succeedWith(() => new exporter_trace_otlp_grpc_1.OTLPTraceExporter(config)), 
    // NOTE Unfortunately this workaround/"hack" is currently needed since Otel doesn't yet provide a graceful
    // way to shutdown.
    //
    // Related issue: https://github.com/open-telemetry/opentelemetry-js/issues/987
    M.make((p) => T.gen(function* (_) {
        while (1) {
            yield* _(T.sleep(0));
            const promises = p["_sendingPromises"];
            if (promises.length > 0) {
                yield* _(T.result(T.promise(() => Promise.all(promises))));
            }
            else {
                break;
            }
        }
    }))));
    return spanExporter;
});
exports.LiveSimpleProcessor = (0, otel_1.SimpleProcessor)(exports.makeTracingSpanExporter);
//# sourceMappingURL=index.js.map