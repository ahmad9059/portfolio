"use strict";
// ets_tracing: off
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.addEvent = exports.addAttribute = exports.withSpan = exports.Span = exports.SpanImpl = exports.SpanSymbol = void 0;
const T = __importStar(require("@effect-ts/core/Effect"));
const Cause_1 = require("@effect-ts/core/Effect/Cause");
const Function_1 = require("@effect-ts/core/Function");
const Has_1 = require("@effect-ts/core/Has");
const O = __importStar(require("@effect-ts/core/Option"));
const OTApi = __importStar(require("@opentelemetry/api"));
const api_1 = require("@opentelemetry/api");
const index_js_1 = require("../Tracer/index.js");
exports.SpanSymbol = Symbol();
class SpanImpl {
    constructor(span) {
        this.span = span;
        this[_a] = exports.SpanSymbol;
    }
}
exports.SpanImpl = SpanImpl;
_a = exports.SpanSymbol;
exports.Span = (0, Has_1.tag)();
function withSpan(name, options) {
    return (effect) => {
        const createSpan = (0, index_js_1.withTracer)((tracer) => T.access((r) => {
            const maybeSpan = exports.Span.readOption(r);
            if ((options === null || options === void 0 ? void 0 : options.root) !== true && O.isSome(maybeSpan)) {
                const ctx = api_1.trace.setSpan(api_1.context.active(), maybeSpan.value.span);
                return tracer.startSpan(name, options, ctx);
            }
            return tracer.startSpan(name, { ...options, root: true });
        }));
        return T.bracketExit_(createSpan, (s) => (0, Function_1.pipe)(effect, T.provideService(exports.Span)(new SpanImpl(s))), (s, e) => T.succeedWith(() => {
            if (e._tag === "Failure") {
                s.setAttribute("error.type", "Fiber Failure");
                s.setAttribute("error.message", "An Effect Has A Failure");
                s.setAttribute("error.stack", (0, Cause_1.pretty)(e.cause));
                s.setStatus({ code: OTApi.SpanStatusCode.ERROR });
            }
            else {
                s.setStatus({ code: OTApi.SpanStatusCode.OK });
            }
            s.end();
        }));
    };
}
exports.withSpan = withSpan;
function addAttribute(name, value) {
    return T.accessServiceM(exports.Span)((_) => T.succeedWith(() => {
        _.span.setAttribute(name, value);
    }));
}
exports.addAttribute = addAttribute;
function addEvent(name, attributesOrStartTime, startTime) {
    return T.accessServiceM(exports.Span)((_) => T.succeedWith(() => {
        _.span.addEvent(name, attributesOrStartTime, startTime);
    }));
}
exports.addEvent = addEvent;
//# sourceMappingURL=index.js.map