// ets_tracing: off
var _a;
import * as T from "@effect-ts/core/Effect";
import { pretty } from "@effect-ts/core/Effect/Cause";
import { pipe } from "@effect-ts/core/Function";
import { tag } from "@effect-ts/core/Has";
import * as O from "@effect-ts/core/Option";
import * as OTApi from "@opentelemetry/api";
import { context, trace } from "@opentelemetry/api";
import { withTracer } from "../Tracer/index.js";
export const SpanSymbol = Symbol();
export class SpanImpl {
    constructor(span) {
        this.span = span;
        this[_a] = SpanSymbol;
    }
}
_a = SpanSymbol;
export const Span = tag();
export function withSpan(name, options) {
    return (effect) => {
        const createSpan = withTracer((tracer) => T.access((r) => {
            const maybeSpan = Span.readOption(r);
            if ((options === null || options === void 0 ? void 0 : options.root) !== true && O.isSome(maybeSpan)) {
                const ctx = trace.setSpan(context.active(), maybeSpan.value.span);
                return tracer.startSpan(name, options, ctx);
            }
            return tracer.startSpan(name, { ...options, root: true });
        }));
        return T.bracketExit_(createSpan, (s) => pipe(effect, T.provideService(Span)(new SpanImpl(s))), (s, e) => T.succeedWith(() => {
            if (e._tag === "Failure") {
                s.setAttribute("error.type", "Fiber Failure");
                s.setAttribute("error.message", "An Effect Has A Failure");
                s.setAttribute("error.stack", pretty(e.cause));
                s.setStatus({ code: OTApi.SpanStatusCode.ERROR });
            }
            else {
                s.setStatus({ code: OTApi.SpanStatusCode.OK });
            }
            s.end();
        }));
    };
}
export function addAttribute(name, value) {
    return T.accessServiceM(Span)((_) => T.succeedWith(() => {
        _.span.setAttribute(name, value);
    }));
}
export function addEvent(name, attributesOrStartTime, startTime) {
    return T.accessServiceM(Span)((_) => T.succeedWith(() => {
        _.span.addEvent(name, attributesOrStartTime, startTime);
    }));
}
//# sourceMappingURL=index.js.map