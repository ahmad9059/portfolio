var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var operations_exports = {};
__export(operations_exports, {
  first: () => first,
  fold: () => fold,
  func: () => func,
  intercalate: () => intercalate,
  inverted: () => inverted,
  last: () => last,
  max: () => max,
  min: () => min,
  object: () => object,
  struct: () => struct,
  tuple: () => tuple
});
var Ord = __toESM(require("@effect-ts/system/Ord"));
var import_makeAssociative = require("./makeAssociative.js");
__reExport(operations_exports, require("./definition.js"));
function fold(S) {
  return (a) => (as) => as.reduce((x, y) => S.combine(x, y), a);
}
function first() {
  return (0, import_makeAssociative.makeAssociative)((x) => x);
}
function last() {
  return (0, import_makeAssociative.makeAssociative)((_, y) => y);
}
function tuple(...associatives) {
  return (0, import_makeAssociative.makeAssociative)((x, y) => associatives.map((s, i) => s.combine(x[i], y[i])));
}
function inverted(S) {
  return (0, import_makeAssociative.makeAssociative)((x, y) => S.combine(y, x));
}
function func(S) {
  return () => (0, import_makeAssociative.makeAssociative)((f, g) => (a) => S.combine(f(a), g(a)));
}
function struct(associatives) {
  return (0, import_makeAssociative.makeAssociative)((x, y) => {
    const r = {};
    for (const key of Object.keys(associatives)) {
      r[key] = associatives[key].combine(x[key], y[key]);
    }
    return r;
  });
}
function min(O) {
  return (0, import_makeAssociative.makeAssociative)(Ord.min(O));
}
function max(O) {
  return (0, import_makeAssociative.makeAssociative)(Ord.max(O));
}
function object() {
  return (0, import_makeAssociative.makeAssociative)((x, y) => Object.assign({}, x, y));
}
function intercalate(a) {
  return (S) => (0, import_makeAssociative.makeAssociative)((x, y) => S.combine(x, S.combine(a, y)));
}
module.exports = __toCommonJS(operations_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  first,
  fold,
  func,
  intercalate,
  inverted,
  last,
  max,
  min,
  object,
  struct,
  tuple
});
