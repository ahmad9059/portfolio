var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var instances_exports = {};
__export(instances_exports, {
  Any: () => Any,
  Applicative: () => Applicative,
  AssociativeBoth: () => AssociativeBoth,
  AssociativeFlatten: () => AssociativeFlatten,
  Covariant: () => Covariant,
  Extend: () => Extend,
  FoldMap: () => FoldMap,
  FoldMapWithIndex: () => FoldMapWithIndex,
  Foldable: () => Foldable,
  FoldableWithIndex: () => FoldableWithIndex,
  ForEach: () => ForEach,
  ForEachWithIndex: () => ForEachWithIndex,
  Monad: () => Monad,
  Reduce: () => Reduce,
  ReduceRight: () => ReduceRight,
  ReduceRightWithIndex: () => ReduceRightWithIndex,
  ReduceWithIndex: () => ReduceWithIndex
});
var P = __toESM(require("../../../Prelude/index.js"));
var A = __toESM(require("./operations.js"));
const Any = {
  any: () => [{}]
};
const AssociativeBoth = {
  both: A.zip
};
const AssociativeFlatten = {
  flatten: A.flatten
};
const Covariant = {
  map: A.map
};
const Applicative = __spreadValues(__spreadValues(__spreadValues({}, Any), Covariant), AssociativeBoth);
const Monad = __spreadValues(__spreadValues(__spreadValues({}, Any), Covariant), AssociativeFlatten);
const ForEach = {
  map: A.map,
  forEachF: A.forEachF
};
const ForEachWithIndex = {
  map: A.map,
  forEachWithIndexF: A.forEachWithIndexF
};
const Extend = {
  extend: A.extend
};
const Reduce = {
  reduce: A.reduce
};
const ReduceWithIndex = {
  reduceWithIndex: A.reduceWithIndex
};
const ReduceRightWithIndex = {
  reduceRightWithIndex: A.reduceRightWithIndex
};
const ReduceRight = {
  reduceRight: A.reduceRight
};
const FoldMap = {
  foldMap: A.foldMap
};
const FoldMapWithIndex = {
  foldMapWithIndex: A.foldMapWithIndex
};
const Foldable = __spreadValues(__spreadValues(__spreadValues({}, FoldMap), Reduce), ReduceRight);
const FoldableWithIndex = __spreadValues(__spreadValues(__spreadValues({}, FoldMapWithIndex), ReduceWithIndex), ReduceRightWithIndex);
module.exports = __toCommonJS(instances_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Any,
  Applicative,
  AssociativeBoth,
  AssociativeFlatten,
  Covariant,
  Extend,
  FoldMap,
  FoldMapWithIndex,
  Foldable,
  FoldableWithIndex,
  ForEach,
  ForEachWithIndex,
  Monad,
  Reduce,
  ReduceRight,
  ReduceRightWithIndex,
  ReduceWithIndex
});
