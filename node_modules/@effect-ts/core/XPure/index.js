var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var XPure_exports = {};
__export(XPure_exports, {
  Access: () => Access,
  Any: () => Any,
  Applicative: () => Applicative,
  AssociativeBoth: () => AssociativeBoth,
  AssociativeEither: () => AssociativeEither,
  AssociativeFlatten: () => AssociativeFlatten,
  Category: () => Category,
  Covariant: () => Covariant,
  Fail: () => Fail,
  Monad: () => Monad,
  Provide: () => Provide,
  StateCategory: () => StateCategory,
  match: () => match,
  matchIn: () => matchIn,
  matchMorph: () => matchMorph,
  matchTag: () => matchTag,
  matchTagIn: () => matchTagIn,
  struct: () => struct,
  tuple: () => tuple
});
var import_Operator = require("../Operator/index.js");
var Tp = __toESM(require("@effect-ts/system/Collections/Immutable/Tuple"));
var import_Function = require("@effect-ts/system/Function");
var X = __toESM(require("@effect-ts/system/XPure"));
var P = __toESM(require("../Prelude/index.js"));
__reExport(XPure_exports, require("@effect-ts/system/XPure"));
const Any = {
  any: () => X.succeed((0, import_Function.constant)({}))
};
const Covariant = {
  map: X.map
};
const AssociativeBoth = {
  both: X.zip
};
const AssociativeEither = {
  orElseEither: X.orElseEither
};
const AssociativeFlatten = {
  flatten: (ffa) => X.chain_(ffa, import_Function.identity)
};
const Applicative = __spreadValues(__spreadValues(__spreadValues({}, Any), Covariant), AssociativeBoth);
const Access = {
  access: X.access
};
const Fail = {
  fail: X.fail
};
const Provide = {
  provide: X.provideAll
};
const Monad = __spreadValues(__spreadValues(__spreadValues({}, Any), AssociativeFlatten), Covariant);
const StateCategory = {
  id: () => X.modify((a) => Tp.tuple(a, a)),
  compose: (bc) => X.chain((_) => bc)
};
const Category = {
  id: () => X.access(import_Function.identity),
  compose: (bc) => (ab) => X.chain_(ab, (b) => X.provideAll_(bc, b))
};
const struct = /* @__PURE__ */ P.structF(Applicative);
const tuple = /* @__PURE__ */ P.tupleF(Applicative);
const {
  match,
  matchIn,
  matchMorph,
  matchTag,
  matchTagIn
} = /* @__PURE__ */ P.matchers(Covariant);
module.exports = __toCommonJS(XPure_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Access,
  Any,
  Applicative,
  AssociativeBoth,
  AssociativeEither,
  AssociativeFlatten,
  Category,
  Covariant,
  Fail,
  Monad,
  Provide,
  StateCategory,
  match,
  matchIn,
  matchMorph,
  matchTag,
  matchTagIn,
  struct,
  tuple
});
