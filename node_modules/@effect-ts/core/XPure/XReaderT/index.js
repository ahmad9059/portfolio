var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var XReaderT_exports = {};
__export(XReaderT_exports, {
  access: () => access,
  applicative: () => applicative,
  fail: () => fail,
  monad: () => monad,
  provide: () => provide,
  run: () => run
});
var import_Operator = require("../../Operator/index.js");
var import_Function = require("../../Function/index.js");
var import_DSL = require("../../Prelude/DSL/index.js");
var HKT = __toESM(require("../../Prelude/HKT/index.js"));
var R = __toESM(require("../XReader/index.js"));
function monad(M) {
  return {
    any: () => R.succeed(M.any()),
    flatten: (ffa) => R.map(M.flatten)(R.access((e) => M.map(R.runEnv(e))(R.runEnv(e)(ffa)))),
    map: (f) => R.map(M.map(f))
  };
}
function access(M) {
  return {
    access: (x) => R.map((0, import_DSL.succeedF)(M))(R.access(x))
  };
}
function provide(_) {
  return {
    provide: (r) => R.provideSome(() => r)
  };
}
function applicative(M) {
  return {
    any: () => R.succeed(M.any()),
    map: (f) => R.map(M.map(f)),
    both: (fb) => (x) => R.map(({
      tuple: [_a, _b]
    }) => M.both(_b)(_a))(R.zip(fb)(x))
  };
}
function run(M) {
  return {
    either: (x) => R.map(M.either)(x)
  };
}
function fail(M) {
  return {
    fail: (x) => R.succeed(M.fail(x))
  };
}
module.exports = __toCommonJS(XReaderT_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  access,
  applicative,
  fail,
  monad,
  provide,
  run
});
