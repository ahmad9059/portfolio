var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var dsls_exports = {};
__export(dsls_exports, {
  bind: () => bind,
  do: () => do_,
  gen: () => gen,
  if: () => branch,
  if_: () => branch_,
  let: () => let_,
  match: () => match,
  matchIn: () => matchIn,
  matchMorph: () => matchMorph,
  matchTag: () => matchTag,
  matchTagIn: () => matchTagIn,
  struct: () => struct,
  tuple: () => tuple
});
var P = __toESM(require("../Prelude/index.js"));
var import_instances = require("./instances.js");
const struct = /* @__PURE__ */ P.structF(import_instances.Applicative);
const tuple = /* @__PURE__ */ P.tupleF(import_instances.Applicative);
const gen = /* @__PURE__ */ P.genF(import_instances.Monad);
const bind = /* @__PURE__ */ P.bindF(import_instances.Monad);
const let_ = /* @__PURE__ */ P.letF(import_instances.Monad);
const do_ = /* @__PURE__ */ P.doF(import_instances.Monad);
const {
  match,
  matchIn,
  matchMorph,
  matchTag,
  matchTagIn
} = /* @__PURE__ */ P.matchers(import_instances.Covariant);
const branch = /* @__PURE__ */ P.conditionalF(import_instances.Covariant);
const branch_ = /* @__PURE__ */ P.conditionalF_(import_instances.Covariant);
module.exports = __toCommonJS(dsls_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bind,
  do: null,
  gen,
  if: null,
  if_,
  let,
  match,
  matchIn,
  matchMorph,
  matchTag,
  matchTagIn,
  struct,
  tuple
});
