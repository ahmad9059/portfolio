var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Async_exports = {};
__export(Async_exports, {
  Access: () => Access,
  Any: () => Any,
  Applicative: () => Applicative,
  AssociativeBoth: () => AssociativeBoth,
  AssociativeFlatten: () => AssociativeFlatten,
  Covariant: () => Covariant,
  Fail: () => Fail,
  IdentityBoth: () => IdentityBoth,
  IdentityFlatten: () => IdentityFlatten,
  Monad: () => Monad,
  Provide: () => Provide,
  Run: () => Run,
  either: () => either,
  flatten: () => flatten,
  fromEither: () => fromEither,
  fromSync: () => fromSync,
  gen: () => gen,
  getValidation: () => getValidation,
  if: () => branch,
  if_: () => branch_,
  match: () => match,
  matchIn: () => matchIn,
  matchMorph: () => matchMorph,
  matchTag: () => matchTag,
  matchTagIn: () => matchTagIn
});
var import_Operator = require("../Operator/index.js");
var A = __toESM(require("@effect-ts/system/Async"));
var E = __toESM(require("@effect-ts/system/Either"));
var import_GlobalExceptions = require("@effect-ts/system/GlobalExceptions");
var import_Function = require("../Function/index.js");
var P = __toESM(require("../Prelude/index.js"));
var import_Sync = require("../Sync/index.js");
var import_Utils = require("../Utils/index.js");
__reExport(Async_exports, require("@effect-ts/system/Async"));
const Covariant = {
  map: A.map
};
const Any = {
  any: () => A.succeed({})
};
const AssociativeBoth = {
  both: A.zip
};
const AssociativeFlatten = {
  flatten
};
const IdentityBoth = __spreadValues(__spreadValues({}, Any), AssociativeBoth);
const IdentityFlatten = __spreadValues(__spreadValues({}, Any), AssociativeFlatten);
const Applicative = __spreadValues(__spreadValues({}, Covariant), IdentityBoth);
const Monad = __spreadValues(__spreadValues({}, Covariant), IdentityFlatten);
const Fail = {
  fail: A.fail
};
const Run = {
  either: (x) => A.catchAll_(A.map_(x, E.right), (e) => A.succeed(E.left(e)))
};
const either = Run.either;
const getValidation = /* @__PURE__ */ P.getValidationF(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, Monad), Run), Applicative), Fail));
const Provide = {
  provide: A.provideAll
};
const Access = {
  access: A.access
};
const genAdapter = (_, __) => {
  if ((0, import_Utils.isTag)(_)) {
    return new P.GenHKT(A.service(_));
  }
  if ((0, import_Utils.isEither)(_)) {
    return new P.GenHKT(_._tag === "Left" ? A.fail(_.left) : A.succeed(_.right));
  }
  if ((0, import_Utils.isOption)(_)) {
    return new P.GenHKT(_._tag === "None" ? A.fail(__ ? __() : new import_GlobalExceptions.NoSuchElementException()) : A.succeed(_.value));
  }
  return new P.GenHKT(_);
};
const gen = /* @__PURE__ */ P.genF(Monad, {
  adapter: genAdapter
});
function flatten(ffa) {
  return A.chain_(ffa, import_Function.identity);
}
function fromEither(_) {
  return _._tag === "Left" ? A.fail(_.left) : A.succeed(_.right);
}
function fromSync(_) {
  return A.accessM((r) => fromEither((0, import_Sync.runEitherEnv)(r)(_)));
}
const {
  match,
  matchIn,
  matchMorph,
  matchTag,
  matchTagIn
} = /* @__PURE__ */ P.matchers(Covariant);
const branch = /* @__PURE__ */ P.conditionalF(Covariant);
const branch_ = /* @__PURE__ */ P.conditionalF_(Covariant);
module.exports = __toCommonJS(Async_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Access,
  Any,
  Applicative,
  AssociativeBoth,
  AssociativeFlatten,
  Covariant,
  Fail,
  IdentityBoth,
  IdentityFlatten,
  Monad,
  Provide,
  Run,
  either,
  flatten,
  fromEither,
  fromSync,
  gen,
  getValidation,
  if: null,
  if_,
  match,
  matchIn,
  matchMorph,
  matchTag,
  matchTagIn
});
