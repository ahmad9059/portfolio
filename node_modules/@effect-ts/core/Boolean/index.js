var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Boolean_exports = {};
__export(Boolean_exports, {
  ConjunctionClosure: () => ConjunctionClosure,
  ConjunctionIdentity: () => ConjunctionIdentity,
  DisjunctionClosure: () => DisjunctionClosure,
  DisjunctionIdentity: () => DisjunctionIdentity,
  Equal: () => Equal,
  ProdClosure: () => ProdClosure,
  ProdIdentity: () => ProdIdentity,
  SumClosure: () => SumClosure,
  SumIdentity: () => SumIdentity,
  allPass: () => allPass,
  allPass_: () => allPass_,
  and: () => and,
  andPass: () => andPass,
  andPass_: () => andPass_,
  and_: () => and_,
  anyPass: () => anyPass,
  anyPass_: () => anyPass_,
  fold: () => fold,
  invert: () => invert,
  not: () => not,
  or: () => or,
  orPass: () => orPass,
  orPass_: () => orPass_,
  or_: () => or_,
  xor: () => xor,
  xor_: () => xor_
});
var import_Operator = require("../Operator/index.js");
var C = __toESM(require("../Closure/index.js"));
var Eq = __toESM(require("../Equal/index.js"));
var I = __toESM(require("../Identity/index.js"));
var import_Newtype = require("../Newtype/index.js");
const ConjunctionClosure = /* @__PURE__ */ C.makeClosure((l, r) => l && r);
const DisjunctionClosure = /* @__PURE__ */ C.makeClosure((l, r) => l || r);
const ProdClosure = /* @__PURE__ */ C.makeClosure((l, r) => l && r);
const SumClosure = /* @__PURE__ */ C.makeClosure((l, r) => l || r);
const ConjunctionIdentity = /* @__PURE__ */ I.makeIdentity(true, ConjunctionClosure.combine);
const DisjunctionIdentity = /* @__PURE__ */ I.makeIdentity(false, DisjunctionClosure.combine);
const ProdIdentity = /* @__PURE__ */ I.makeIdentity(false, ProdClosure.combine);
const SumIdentity = /* @__PURE__ */ I.makeIdentity(false, SumClosure.combine);
const Equal = /* @__PURE__ */ Eq.strict();
function fold(onFalse, onTrue) {
  return (value) => value ? onTrue() : onFalse();
}
function not(a) {
  return !a;
}
function invert(b) {
  return !b;
}
function and_(x, y) {
  return x && y;
}
function and(y) {
  return (x) => x && y;
}
function or_(x, y) {
  return x || y;
}
function or(y) {
  return (x) => x || y;
}
function xor_(x, y) {
  return x && !y || !x && y;
}
function xor(y) {
  return (x) => x && !y || !x && y;
}
function allPass_(a, ps) {
  return ps.every((f) => f(a));
}
function allPass(ps) {
  return (a) => ps.every((f) => f(a));
}
function anyPass_(a, ps) {
  return ps.some((f) => f(a));
}
function anyPass(ps) {
  return (a) => ps.some((f) => f(a));
}
function andPass_(f, g) {
  return (a) => and_(f(a), g(a));
}
function andPass(g) {
  return (f) => andPass_(f, g);
}
function orPass_(f, g) {
  return (a) => or_(f(a), g(a));
}
function orPass(g) {
  return (f) => orPass_(f, g);
}
module.exports = __toCommonJS(Boolean_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConjunctionClosure,
  ConjunctionIdentity,
  DisjunctionClosure,
  DisjunctionIdentity,
  Equal,
  ProdClosure,
  ProdIdentity,
  SumClosure,
  SumIdentity,
  allPass,
  allPass_,
  and,
  andPass,
  andPass_,
  and_,
  anyPass,
  anyPass_,
  fold,
  invert,
  not,
  or,
  orPass,
  orPass_,
  or_,
  xor,
  xor_
});
