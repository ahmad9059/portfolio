var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Modules_exports = {};
__export(Modules_exports, {
  ArrayURI: () => ArrayURI,
  AsyncURI: () => AsyncURI,
  BoundedURI: () => BoundedURI,
  ChunkURI: () => ChunkURI,
  ClosureURI: () => ClosureURI,
  CommutativeURI: () => CommutativeURI,
  ConstURI: () => ConstURI,
  DictionaryURI: () => DictionaryURI,
  EffectCategoryURI: () => EffectCategoryURI,
  EffectURI: () => import_Effect.EffectURI,
  EitherURI: () => EitherURI,
  EqualURI: () => EqualURI,
  FreeAssociativeURI: () => FreeAssociativeURI,
  IOURI: () => IOURI,
  IdURI: () => IdURI,
  IdentityURI: () => IdentityURI,
  InverseURI: () => InverseURI,
  IterableURI: () => IterableURI,
  IxURI: () => IxURI,
  LayerURI: () => LayerURI,
  ListURI: () => ListURI,
  NonEmptyArrayURI: () => NonEmptyArrayURI,
  OptionURI: () => OptionURI,
  OrdURI: () => OrdURI,
  ParametricStateInURI: () => ParametricStateInURI,
  ReaderURI: () => ReaderURI,
  ShowURI: () => ShowURI,
  StateInURI: () => StateInURI,
  StateOutURI: () => StateOutURI,
  SyncURI: () => SyncURI,
  TaskURI: () => TaskURI,
  TreeURI: () => TreeURI,
  XIOURI: () => XIOURI,
  XPureReaderCategoryURI: () => XPureReaderCategoryURI,
  XPureStateCategoryURI: () => XPureStateCategoryURI,
  XPureURI: () => XPureURI,
  XReaderURI: () => XReaderURI,
  XStateURI: () => XStateURI
});
var import_Operator = require("../Operator/index.js");
var import_Effect = require("@effect-ts/system/Effect");
const ArrayURI = "Array";
const NonEmptyArrayURI = "NonEmptyArray";
const BoundedURI = "Bounded";
const ClosureURI = "Closure";
const CommutativeURI = "Commutative";
const EitherURI = "Either";
const EqualURI = "Equal";
const IdentityURI = "Identity";
const InverseURI = "Inverse";
const IterableURI = "IterableURI";
const OrdURI = "Ord";
const DictionaryURI = "Dictionary";
const ShowURI = "Show";
const XIOURI = "XIO";
const XReaderURI = "XReader";
const XStateURI = "XState";
const ReaderURI = "Reader";
const StateInURI = "StateIn";
const ParametricStateInURI = "ParametricStateIn";
const StateOutURI = "StateOut";
const IxURI = "Ix";
const TaskURI = "Task";
const ConstURI = "Const";
const LayerURI = "Layer";
const SyncURI = "Sync";
const XPureURI = "XPure";
const IOURI = "IO";
const XPureReaderCategoryURI = "XPureReaderCategory";
const XPureStateCategoryURI = "XPureStateCategory";
const IdURI = "Id";
const EffectCategoryURI = "EffectCategory";
const FreeAssociativeURI = "FreeAssociative";
const AsyncURI = "Async";
const TreeURI = "Tree";
const OptionURI = "Option";
const ListURI = "List";
const ChunkURI = "Chunk";
module.exports = __toCommonJS(Modules_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ArrayURI,
  AsyncURI,
  BoundedURI,
  ChunkURI,
  ClosureURI,
  CommutativeURI,
  ConstURI,
  DictionaryURI,
  EffectCategoryURI,
  EffectURI,
  EitherURI,
  EqualURI,
  FreeAssociativeURI,
  IOURI,
  IdURI,
  IdentityURI,
  InverseURI,
  IterableURI,
  IxURI,
  LayerURI,
  ListURI,
  NonEmptyArrayURI,
  OptionURI,
  OrdURI,
  ParametricStateInURI,
  ReaderURI,
  ShowURI,
  StateInURI,
  StateOutURI,
  SyncURI,
  TaskURI,
  TreeURI,
  XIOURI,
  XPureReaderCategoryURI,
  XPureStateCategoryURI,
  XPureURI,
  XReaderURI,
  XStateURI
});
