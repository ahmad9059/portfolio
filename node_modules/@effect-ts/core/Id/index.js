var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Id_exports = {};
__export(Id_exports, {
  Any: () => Any,
  Applicative: () => Applicative,
  AssociativeBoth: () => AssociativeBoth,
  AssociativeFlatten: () => AssociativeFlatten,
  Covariant: () => Covariant,
  FoldMap: () => FoldMap,
  Foldable: () => Foldable,
  ForEach: () => ForEach,
  IdentityBoth: () => IdentityBoth,
  IdentityFlatten: () => IdentityFlatten,
  Monad: () => Monad,
  Reduce: () => Reduce,
  ReduceRight: () => ReduceRight,
  alt: () => alt,
  alt_: () => alt_,
  ap: () => ap,
  apFirst: () => apFirst,
  apSecond: () => apSecond,
  ap_: () => ap_,
  chain: () => chain,
  chain_: () => chain_,
  duplicate: () => duplicate,
  extend: () => extend,
  extend_: () => extend_,
  extract: () => extract,
  flatten: () => flatten,
  foldMap: () => foldMap,
  foldMap_: () => foldMap_,
  getEq: () => getEq,
  getShow: () => getShow,
  map: () => map,
  map_: () => map_,
  reduce: () => reduce,
  reduceRight: () => reduceRight,
  reduceRight_: () => reduceRight_,
  reduce_: () => reduce_,
  struct: () => struct,
  tap: () => tap,
  tap_: () => tap_,
  tuple: () => tuple
});
var import_Operator = require("../Operator/index.js");
var Tp = __toESM(require("@effect-ts/system/Collections/Immutable/Tuple"));
var import_DSL = require("../Prelude/DSL/index.js");
var P = __toESM(require("../Prelude/index.js"));
function alt_(fx, _fy) {
  return fx;
}
function alt(that) {
  return (fa) => alt_(fa, that);
}
function ap_(fab, fa) {
  return fab(fa);
}
function ap(fa) {
  return (fab) => ap_(fab, fa);
}
function apFirst(_fb) {
  return (fa) => fa;
}
function apSecond(fb) {
  return (_fa) => fb;
}
function chain_(fa, f) {
  return f(fa);
}
function chain(f) {
  return (ma) => f(ma);
}
function tap(f) {
  return (ma) => chain_(ma, (x) => map_(f(x), () => x));
}
function tap_(ma, f) {
  return chain_(ma, (x) => map_(f(x), () => x));
}
function duplicate(ma) {
  return ma;
}
function extend_(wa, f) {
  return f(wa);
}
function extend(f) {
  return (ma) => f(ma);
}
function extract(wa) {
  return wa;
}
function flatten(wa) {
  return wa;
}
function foldMap_(M) {
  return (fa, f) => f(fa);
}
function foldMap(M) {
  return (f) => (fa) => foldMap_(M)(fa, f);
}
function getEq(E) {
  return E;
}
function getShow(E) {
  return E;
}
function map_(fa, f) {
  return f(fa);
}
function map(f) {
  return (fa) => map_(fa, f);
}
function reduce_(fa, b, f) {
  return f(b, fa);
}
function reduce(b, f) {
  return (fa) => reduce_(fa, b, f);
}
function reduceRight_(fa, b, f) {
  return f(fa, b);
}
function reduceRight(b, f) {
  return (fa) => reduceRight_(fa, b, f);
}
const Any = {
  any: () => ({})
};
const Covariant = {
  map
};
const AssociativeBoth = {
  both: (b) => (a) => Tp.tuple(a, b)
};
const AssociativeFlatten = {
  flatten: (a) => a
};
const IdentityBoth = __spreadValues(__spreadValues({}, Any), AssociativeBoth);
const IdentityFlatten = __spreadValues(__spreadValues({}, Any), AssociativeFlatten);
const Applicative = __spreadValues(__spreadValues({}, Covariant), IdentityBoth);
const Monad = __spreadValues(__spreadValues({}, Covariant), IdentityFlatten);
const Reduce = {
  reduce
};
const ReduceRight = {
  reduceRight
};
const FoldMap = {
  foldMap
};
const Foldable = __spreadValues(__spreadValues(__spreadValues({}, Reduce), ReduceRight), FoldMap);
const ForEach = __spreadProps(__spreadValues({}, Covariant), {
  forEachF: () => (f) => f
});
const struct = /* @__PURE__ */ (0, import_DSL.structF)(Applicative);
const tuple = /* @__PURE__ */ (0, import_DSL.tupleF)(Applicative);
module.exports = __toCommonJS(Id_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Any,
  Applicative,
  AssociativeBoth,
  AssociativeFlatten,
  Covariant,
  FoldMap,
  Foldable,
  ForEach,
  IdentityBoth,
  IdentityFlatten,
  Monad,
  Reduce,
  ReduceRight,
  alt,
  alt_,
  ap,
  apFirst,
  apSecond,
  ap_,
  chain,
  chain_,
  duplicate,
  extend,
  extend_,
  extract,
  flatten,
  foldMap,
  foldMap_,
  getEq,
  getShow,
  map,
  map_,
  reduce,
  reduceRight,
  reduceRight_,
  reduce_,
  struct,
  tap,
  tap_,
  tuple
});
