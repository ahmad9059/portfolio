var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var OptionT_exports = {};
__export(OptionT_exports, {
  access: () => access,
  applicative: () => applicative,
  monad: () => monad,
  provide: () => provide
});
var import_Operator = require("../Operator/index.js");
var import_Function = require("../Function/index.js");
var O = __toESM(require("../Option/index.js"));
var import_DSL = require("../Prelude/DSL/index.js");
var HKT = __toESM(require("../Prelude/HKT/index.js"));
function monad(M) {
  const succeed = (0, import_DSL.succeedF)(M);
  return {
    any: () => succeed(O.some({})),
    flatten: (x) => M.flatten(M.map((o) => o._tag === "None" ? succeed(O.none) : o.value)(x)),
    map: (f) => M.map(O.map(f))
  };
}
function applicative(M) {
  const succeed = (0, import_DSL.succeedF)(M);
  return {
    any: () => succeed(O.some({})),
    map: (f) => M.map(O.map(f)),
    both: (fb) => (x) => M.map(({
      tuple: [a, b]
    }) => O.zip_(a, b))(M.both(fb)(x))
  };
}
function access(M) {
  return {
    access: (f) => M.map(O.some)(M.access(f))
  };
}
function provide(M) {
  return {
    provide: M.provide
  };
}
module.exports = __toCommonJS(OptionT_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  access,
  applicative,
  monad,
  provide
});
