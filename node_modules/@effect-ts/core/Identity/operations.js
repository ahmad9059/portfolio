var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var operations_exports = {};
__export(operations_exports, {
  deriveIdentity: () => deriveIdentity,
  endomorphism: () => endomorphism,
  fold: () => fold,
  func: () => func,
  inverted: () => inverted,
  max: () => max,
  min: () => min,
  struct: () => struct,
  tuple: () => tuple
});
var A = __toESM(require("../Associative/index.js"));
var import_Function = require("../Function/index.js");
var import_makeIdentity = require("./makeIdentity.js");
function deriveIdentity(D, I) {
  return D.derive(I);
}
function fold(M) {
  const foldM = A.fold(M);
  return foldM(M.identity);
}
function inverted(M) {
  return (0, import_makeIdentity.makeIdentity)(M.identity, A.inverted(M).combine);
}
function endomorphism() {
  return (0, import_makeIdentity.makeIdentity)(import_Function.identity, (x, y) => (a) => a);
}
function func(M) {
  return () => (0, import_makeIdentity.makeIdentity)((_) => M.identity, A.func(M)().combine);
}
function max(B) {
  return (0, import_makeIdentity.makeIdentity)(B.bottom, A.max(B).combine);
}
function min(B) {
  return (0, import_makeIdentity.makeIdentity)(B.top, A.min(B).combine);
}
function struct(identities) {
  const empty = {};
  for (const key of Object.keys(identities)) {
    empty[key] = identities[key].identity;
  }
  return (0, import_makeIdentity.makeIdentity)(empty, A.struct(identities).combine);
}
function tuple(...identities) {
  return (0, import_makeIdentity.makeIdentity)(identities.map((m) => m.identity), A.tuple(...identities).combine);
}
module.exports = __toCommonJS(operations_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  deriveIdentity,
  endomorphism,
  fold,
  func,
  inverted,
  max,
  min,
  struct,
  tuple
});
