var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Const_exports = {};
__export(Const_exports, {
  Contravariant: () => Contravariant,
  Covariant: () => Covariant,
  bimap: () => bimap,
  bimap_: () => bimap_,
  contramap: () => contramap,
  contramap_: () => contramap_,
  getAny: () => getAny,
  getApplicative: () => getApplicative,
  getAssociative: () => getAssociative,
  getAssociativeBoth: () => getAssociativeBoth,
  getBounded: () => getBounded,
  getEqual: () => getEqual,
  getIdentity: () => getIdentity,
  getIdentityBoth: () => getIdentityBoth,
  getOrd: () => getOrd,
  getShow: () => getShow,
  makeConst: () => makeConst,
  map: () => map,
  mapLeft: () => mapLeft,
  mapLeft_: () => mapLeft_,
  map_: () => map_
});
var import_Operator = require("../Operator/index.js");
var import_Function = require("../Function/index.js");
var P = __toESM(require("../Prelude/index.js"));
var import_Show = require("../Show/index.js");
function bimap_(fea, f, g) {
  return makeConst(f(fea))();
}
function bimap(f, g) {
  return (fa) => bimap_(fa, f, g);
}
const contramap_ = import_Function.unsafeCoerce;
function contramap(f) {
  return (fa) => contramap_(fa, f);
}
function getAny(e) {
  return {
    any: makeConst(e)
  };
}
function getAssociativeBoth(A) {
  return {
    both: (fb) => (fa) => makeConst(A.combine(fa, fb))()
  };
}
const Contravariant = {
  contramap
};
const Covariant = {
  map
};
function getIdentityBoth(I) {
  return __spreadValues(__spreadValues({}, getAny(I.identity)), getAssociativeBoth(I));
}
function getApplicative(I) {
  return __spreadValues(__spreadValues({}, Covariant), getIdentityBoth(I));
}
function getShow(S) {
  return () => (0, import_Show.makeShow)((c) => `make(${S.show(c)})`);
}
function getBounded(B) {
  return () => B;
}
function getEqual(E) {
  return () => E;
}
function getIdentity(I) {
  return () => I;
}
function getOrd(O) {
  return () => O;
}
function getAssociative(A) {
  return () => A;
}
const makeConst = (e) => () => e;
const map_ = import_Function.unsafeCoerce;
function map(f) {
  return (fa) => map_(fa, f);
}
const mapLeft_ = (fea, f) => makeConst(f(fea))();
function mapLeft(f) {
  return (fa) => mapLeft_(fa, f);
}
module.exports = __toCommonJS(Const_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Contravariant,
  Covariant,
  bimap,
  bimap_,
  contramap,
  contramap_,
  getAny,
  getApplicative,
  getAssociative,
  getAssociativeBoth,
  getBounded,
  getEqual,
  getIdentity,
  getIdentityBoth,
  getOrd,
  getShow,
  makeConst,
  map,
  mapLeft,
  mapLeft_,
  map_
});
