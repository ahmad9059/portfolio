var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var operations_exports = {};
__export(operations_exports, {
  forEachOf: () => forEachOf,
  forEachParNOf: () => forEachParNOf,
  forEachParOf: () => forEachParOf
});
var import_Operator = require("../Operator/index.js");
var T = __toESM(require("@effect-ts/system/Effect"));
function forEachOf(C) {
  return function() {
    if (arguments.length >= 2 && typeof arguments[1] !== "string") {
      return T.suspend(() => {
        let builder = C.builder();
        return T.map_(T.forEachUnit_(arguments[0], (a) => T.map_(arguments[1](a), (aa) => {
          builder = builder.append(aa);
        }), arguments[2]), () => builder.build());
      });
    }
    return (self) => forEachOf(C)(self, arguments[0], arguments[1]);
  };
}
function forEachParOf(C) {
  return function() {
    if (arguments.length >= 2 && typeof arguments[1] !== "string") {
      return T.map_(T.forEachPar_(arguments[0], arguments[1], arguments[2]), (arr) => {
        let builder = C.builder();
        for (const b of arr) {
          builder = builder.append(b);
        }
        return builder.build();
      });
    }
    return (self) => forEachParOf(C)(self, arguments[0], arguments[1]);
  };
}
function forEachParNOf(C) {
  return function() {
    if (arguments.length >= 3 && typeof arguments[2] !== "string") {
      return T.map_(T.forEachParN_(arguments[0], arguments[1], arguments[2], arguments[3]), (arr) => {
        let builder = C.builder();
        for (const b of arr) {
          builder = builder.append(b);
        }
        return builder.build();
      });
    }
    return (self) => forEachParNOf(C)(self, arguments[0], arguments[1], arguments[2]);
  };
}
module.exports = __toCommonJS(operations_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  forEachOf,
  forEachParNOf,
  forEachParOf
});
