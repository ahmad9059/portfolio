var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var esm_exports = {};
__export(esm_exports, {
  Access: () => Access_1,
  Any: () => Any_1,
  Applicative: () => Applicative_1,
  Apply: () => Apply_1,
  Array: () => Array_1,
  Associative: () => Associative_1,
  AssociativeBoth: () => AssociativeBoth_1,
  AssociativeCompose: () => AssociativeCompose_1,
  AssociativeEither: () => AssociativeEither_1,
  AssociativeFlatten: () => AssociativeFlatten_1,
  Async: () => Async_1,
  AtomicBoolean: () => AtomicBoolean_1,
  AtomicNumber: () => AtomicNumber_1,
  AtomicReference: () => AtomicReference_1,
  Boolean: () => Boolean_1,
  Branded: () => Branded_1,
  BufferedPull: () => BufferedPull_1,
  Category: () => Category_1,
  Cause: () => Cause_1,
  ChainRec: () => ChainRec_1,
  Chunk: () => Chunk_1,
  Clock: () => Clock_1,
  Closure: () => Closure_1,
  Commutative: () => Commutative_1,
  CommutativeBoth: () => CommutativeBoth_1,
  CommutativeEither: () => CommutativeEither_1,
  Compact: () => Compact_1,
  Compactable: () => Compactable_1,
  Const: () => Const_1,
  Contravariant: () => Contravariant_1,
  Covariant: () => Covariant_1,
  CovariantWithIndex: () => CovariantWithIndex_1,
  DSL: () => DSL_1,
  Derive: () => Derive_1,
  DoublyLinkedList: () => DoublyLinkedList_1,
  Effect: () => Effect_1,
  Either: () => Either_1,
  EitherT: () => EitherT_1,
  Equal: () => Equal_1,
  Exit: () => Exit_1,
  Extend: () => Extend_1,
  Fail: () => Fail_1,
  Fiber: () => Fiber_1,
  FiberRef: () => FiberRef_1,
  Filter: () => Filter_1,
  FilterMap: () => FilterMap_1,
  FilterMapWithIndex: () => FilterMapWithIndex_1,
  FilterWithIndex: () => FilterWithIndex_1,
  Filterable: () => Filterable_1,
  FilterableWithIndex: () => FilterableWithIndex_1,
  FoldMap: () => FoldMap_1,
  FoldMapWithIndex: () => FoldMapWithIndex_1,
  Foldable: () => Foldable_1,
  FoldableWithIndex: () => FoldableWithIndex_1,
  ForEach: () => ForEach_1,
  ForEachWithIndex: () => ForEachWithIndex_1,
  FreeAssociative: () => FreeAssociative_1,
  Function: () => Function_1,
  HKT: () => HKT_1,
  Has: () => Has_1,
  Hash: () => Hash_1,
  HashMap: () => HashMap_1,
  HashSet: () => HashSet_1,
  IO: () => IO_1,
  Id: () => Id_1,
  Identity: () => Identity_1,
  IdentityBoth: () => IdentityBoth_1,
  IdentityEither: () => IdentityEither_1,
  IdentityFlatten: () => IdentityFlatten_1,
  ImmutableQueue: () => ImmutableQueue_1,
  IndexedT: () => IndexedT_1,
  Invariant: () => Invariant_1,
  InvariantT: () => InvariantT_1,
  Inverse: () => Inverse_1,
  Iterable: () => Iterable_1,
  LinkedList: () => LinkedList_1,
  List: () => List_1,
  Managed: () => Managed_1,
  Map: () => Map_1,
  Monad: () => Monad_1,
  MutableQueue: () => MutableQueue_1,
  Newtype: () => Newtype_1,
  NonEmptyArray: () => NonEmptyArray_1,
  None: () => None_1,
  OneShot: () => OneShot_1,
  Option: () => Option_1,
  OptionT: () => OptionT_1,
  Ord: () => Ord_1,
  Ordering: () => Ordering_1,
  ParametricStateT: () => ParametricStateT_1,
  Partition: () => Partition_1,
  PartitionMap: () => PartitionMap_1,
  PartitionMapWithIndex: () => PartitionMapWithIndex_1,
  PartitionWithIndex: () => PartitionWithIndex_1,
  PrettyCause: () => PrettyCause_1,
  Promise: () => Promise_1,
  Provide: () => Provide_1,
  Pull: () => Pull_1,
  Push: () => Push_1,
  Queue: () => Queue_1,
  Random: () => Random_1,
  Reader: () => Reader_1,
  ReaderT: () => ReaderT_1,
  Record: () => Record_1,
  RedBlackTree: () => RedBlackTree_1,
  Reduce: () => Reduce_1,
  ReduceRight: () => ReduceRight_1,
  ReduceRightWithIndex: () => ReduceRightWithIndex_1,
  ReduceWithIndex: () => ReduceWithIndex_1,
  Ref: () => Ref_1,
  RefM: () => RefM_1,
  RingBuffer: () => RingBuffer_1,
  RoseTree: () => RoseTree_1,
  Run: () => Run_1,
  Schedule: () => Schedule_1,
  Scope: () => Scope_1,
  Selective: () => Selective_1,
  Semaphore: () => Semaphore_1,
  Separate: () => Separate_1,
  Set: () => Set_1,
  Show: () => Show_1,
  Sink: () => Sink_1,
  SortedSet: () => SortedSet_1,
  StateT: () => StateT_1,
  Stream: () => Stream_1,
  String: () => String_1,
  Supervisor: () => Supervisor_1,
  Sync: () => Sync_1,
  SyncLayer: () => SyncLayer_1,
  Take: () => Take_1,
  Transducer: () => Transducer_1,
  Utils: () => Utils_1,
  Wiltable: () => Wiltable_1,
  WiltableWithIndex: () => WiltableWithIndex_1,
  Witherable: () => Witherable_1,
  WitherableWithIndex: () => WitherableWithIndex_1,
  XIO: () => XIO_1,
  XPure: () => XPure_1,
  XReader: () => XReader_1,
  XReaderT: () => XReaderT_1,
  XState: () => XState_1,
  pipe: () => import_Function.pipe
});
var import_Operator = require("./Operator/index.js");
var Array_1 = __toESM(require("./Collections/Immutable/Array/index.js"));
var Associative_1 = __toESM(require("./Associative/index.js"));
var Async_1 = __toESM(require("./Async/index.js"));
var Boolean_1 = __toESM(require("./Boolean/index.js"));
var Branded_1 = __toESM(require("./Branded/index.js"));
var Chunk_1 = __toESM(require("./Collections/Immutable/Chunk/index.js"));
var Closure_1 = __toESM(require("./Closure/index.js"));
var Commutative_1 = __toESM(require("./Commutative/index.js"));
var Const_1 = __toESM(require("./Const/index.js"));
var Effect_1 = __toESM(require("./Effect/index.js"));
var Cause_1 = __toESM(require("./Effect/Cause/index.js"));
var PrettyCause_1 = __toESM(require("./Effect/Cause/Pretty/index.js"));
var Clock_1 = __toESM(require("./Effect/Clock/index.js"));
var Exit_1 = __toESM(require("./Effect/Exit/index.js"));
var Fiber_1 = __toESM(require("./Effect/Fiber/index.js"));
var FiberRef_1 = __toESM(require("./Effect/FiberRef/index.js"));
var Managed_1 = __toESM(require("./Effect/Managed/index.js"));
var Promise_1 = __toESM(require("./Effect/Promise/index.js"));
var Queue_1 = __toESM(require("./Effect/Queue/index.js"));
var Random_1 = __toESM(require("./Effect/Random/index.js"));
var Ref_1 = __toESM(require("./Effect/Ref/index.js"));
var RefM_1 = __toESM(require("./Effect/RefM/index.js"));
var Schedule_1 = __toESM(require("./Effect/Schedule/index.js"));
var Scope_1 = __toESM(require("./Effect/Scope/index.js"));
var Semaphore_1 = __toESM(require("./Effect/Semaphore/index.js"));
var Stream_1 = __toESM(require("./Effect/Stream/index.js"));
var BufferedPull_1 = __toESM(require("./Effect/Stream/BufferedPull/index.js"));
var Pull_1 = __toESM(require("./Effect/Stream/Pull/index.js"));
var Push_1 = __toESM(require("./Effect/Stream/Push/index.js"));
var Sink_1 = __toESM(require("./Effect/Stream/Sink/index.js"));
var Take_1 = __toESM(require("./Effect/Stream/Take/index.js"));
var Transducer_1 = __toESM(require("./Effect/Stream/Transducer/index.js"));
var Supervisor_1 = __toESM(require("./Effect/Supervisor/index.js"));
var Either_1 = __toESM(require("./Either/index.js"));
var EitherT_1 = __toESM(require("./EitherT/index.js"));
var Equal_1 = __toESM(require("./Equal/index.js"));
var FreeAssociative_1 = __toESM(require("./FreeAssociative/index.js"));
var Function_1 = __toESM(require("./Function/index.js"));
var Has_1 = __toESM(require("./Has/index.js"));
var Hash_1 = __toESM(require("./Hash/index.js"));
var HashMap_1 = __toESM(require("./Collections/Immutable/HashMap/index.js"));
var HashSet_1 = __toESM(require("./Collections/Immutable/HashSet/index.js"));
var IO_1 = __toESM(require("./IO/index.js"));
var Id_1 = __toESM(require("./Id/index.js"));
var Identity_1 = __toESM(require("./Identity/index.js"));
var IndexedT_1 = __toESM(require("./IndexedT/index.js"));
var InvariantT_1 = __toESM(require("./InvariantT/index.js"));
var Inverse_1 = __toESM(require("./Inverse/index.js"));
var Iterable_1 = __toESM(require("./Iterable/index.js"));
var List_1 = __toESM(require("./Collections/Immutable/List/index.js"));
var Map_1 = __toESM(require("./Collections/Immutable/Map/index.js"));
var Newtype_1 = __toESM(require("./Newtype/index.js"));
var NonEmptyArray_1 = __toESM(require("./Collections/Immutable/NonEmptyArray/index.js"));
var Option_1 = __toESM(require("./Option/index.js"));
var OptionT_1 = __toESM(require("./OptionT/index.js"));
var Ord_1 = __toESM(require("./Ord/index.js"));
var Ordering_1 = __toESM(require("./Ordering/index.js"));
var Any_1 = __toESM(require("./Prelude/Any/index.js"));
var Applicative_1 = __toESM(require("./Prelude/Applicative/index.js"));
var Apply_1 = __toESM(require("./Prelude/Apply/index.js"));
var AssociativeBoth_1 = __toESM(require("./Prelude/AssociativeBoth/index.js"));
var AssociativeCompose_1 = __toESM(require("./Prelude/AssociativeCompose/index.js"));
var AssociativeEither_1 = __toESM(require("./Prelude/AssociativeEither/index.js"));
var AssociativeFlatten_1 = __toESM(require("./Prelude/AssociativeFlatten/index.js"));
var Category_1 = __toESM(require("./Prelude/Category/index.js"));
var ChainRec_1 = __toESM(require("./Prelude/ChainRec/index.js"));
var CommutativeBoth_1 = __toESM(require("./Prelude/CommutativeBoth/index.js"));
var CommutativeEither_1 = __toESM(require("./Prelude/CommutativeEither/index.js"));
var Compact_1 = __toESM(require("./Prelude/Compact/index.js"));
var Compactable_1 = __toESM(require("./Prelude/Compactable/index.js"));
var Contravariant_1 = __toESM(require("./Prelude/Contravariant/index.js"));
var Covariant_1 = __toESM(require("./Prelude/Covariant/index.js"));
var CovariantWithIndex_1 = __toESM(require("./Prelude/CovariantWithIndex/index.js"));
var DSL_1 = __toESM(require("./Prelude/DSL/index.js"));
var Derive_1 = __toESM(require("./Prelude/Derive/index.js"));
var Extend_1 = __toESM(require("./Prelude/Extend/index.js"));
var Access_1 = __toESM(require("./Prelude/FX/Access/index.js"));
var Fail_1 = __toESM(require("./Prelude/FX/Fail/index.js"));
var Provide_1 = __toESM(require("./Prelude/FX/Provide/index.js"));
var Run_1 = __toESM(require("./Prelude/FX/Run/index.js"));
var Filter_1 = __toESM(require("./Prelude/Filter/index.js"));
var FilterMap_1 = __toESM(require("./Prelude/FilterMap/index.js"));
var FilterMapWithIndex_1 = __toESM(require("./Prelude/FilterMapWithIndex/index.js"));
var FilterWithIndex_1 = __toESM(require("./Prelude/FilterWithIndex/index.js"));
var Filterable_1 = __toESM(require("./Prelude/Filterable/index.js"));
var FilterableWithIndex_1 = __toESM(require("./Prelude/FilterableWithIndex/index.js"));
var FoldMap_1 = __toESM(require("./Prelude/FoldMap/index.js"));
var FoldMapWithIndex_1 = __toESM(require("./Prelude/FoldMapWithIndex/index.js"));
var Foldable_1 = __toESM(require("./Prelude/Foldable/index.js"));
var FoldableWithIndex_1 = __toESM(require("./Prelude/FoldableWithIndex/index.js"));
var ForEach_1 = __toESM(require("./Prelude/ForEach/index.js"));
var ForEachWithIndex_1 = __toESM(require("./Prelude/ForEachWithIndex/index.js"));
var HKT_1 = __toESM(require("./Prelude/HKT/index.js"));
var IdentityBoth_1 = __toESM(require("./Prelude/IdentityBoth/index.js"));
var IdentityEither_1 = __toESM(require("./Prelude/IdentityEither/index.js"));
var IdentityFlatten_1 = __toESM(require("./Prelude/IdentityFlatten/index.js"));
var Invariant_1 = __toESM(require("./Prelude/Invariant/index.js"));
var Monad_1 = __toESM(require("./Prelude/Monad/index.js"));
var None_1 = __toESM(require("./Prelude/None/index.js"));
var Partition_1 = __toESM(require("./Prelude/Partition/index.js"));
var PartitionMap_1 = __toESM(require("./Prelude/PartitionMap/index.js"));
var PartitionMapWithIndex_1 = __toESM(require("./Prelude/PartitionMapWithIndex/index.js"));
var PartitionWithIndex_1 = __toESM(require("./Prelude/PartitionWithIndex/index.js"));
var Reduce_1 = __toESM(require("./Prelude/Reduce/index.js"));
var ReduceRight_1 = __toESM(require("./Prelude/ReduceRight/index.js"));
var ReduceRightWithIndex_1 = __toESM(require("./Prelude/ReduceRightWithIndex/index.js"));
var ReduceWithIndex_1 = __toESM(require("./Prelude/ReduceWithIndex/index.js"));
var Selective_1 = __toESM(require("./Prelude/Selective/index.js"));
var Separate_1 = __toESM(require("./Prelude/Separate/index.js"));
var Wiltable_1 = __toESM(require("./Prelude/Wiltable/index.js"));
var WiltableWithIndex_1 = __toESM(require("./Prelude/WiltableWithIndex/index.js"));
var Witherable_1 = __toESM(require("./Prelude/Witherable/index.js"));
var WitherableWithIndex_1 = __toESM(require("./Prelude/WitherableWithIndex/index.js"));
var Reader_1 = __toESM(require("./Reader/index.js"));
var ReaderT_1 = __toESM(require("./ReaderT/index.js"));
var Record_1 = __toESM(require("./Collections/Immutable/Dictionary/index.js"));
var RedBlackTree_1 = __toESM(require("./Collections/Immutable/RedBlackTree/index.js"));
var RoseTree_1 = __toESM(require("./RoseTree/index.js"));
var Set_1 = __toESM(require("./Collections/Immutable/Set/index.js"));
var Show_1 = __toESM(require("./Show/index.js"));
var SortedSet_1 = __toESM(require("./Collections/Immutable/SortedSet/index.js"));
var StateT_1 = __toESM(require("./StateT/index.js"));
var ParametricStateT_1 = __toESM(require("./StateT/Parametric/index.js"));
var String_1 = __toESM(require("./String/index.js"));
var AtomicBoolean_1 = __toESM(require("./Support/AtomicBoolean/index.js"));
var AtomicNumber_1 = __toESM(require("./Support/AtomicNumber/index.js"));
var AtomicReference_1 = __toESM(require("./Support/AtomicReference/index.js"));
var DoublyLinkedList_1 = __toESM(require("./Support/DoublyLinkedList/index.js"));
var ImmutableQueue_1 = __toESM(require("./Support/ImmutableQueue/index.js"));
var LinkedList_1 = __toESM(require("./Support/LinkedList/index.js"));
var MutableQueue_1 = __toESM(require("./Support/MutableQueue/index.js"));
var OneShot_1 = __toESM(require("./Support/OneShot/index.js"));
var RingBuffer_1 = __toESM(require("./Support/RingBuffer/index.js"));
var Sync_1 = __toESM(require("./Sync/index.js"));
var SyncLayer_1 = __toESM(require("./Sync/Layer/index.js"));
var Utils_1 = __toESM(require("./Utils/index.js"));
var XPure_1 = __toESM(require("./XPure/index.js"));
var XIO_1 = __toESM(require("./XPure/XIO/index.js"));
var XReader_1 = __toESM(require("./XPure/XReader/index.js"));
var XReaderT_1 = __toESM(require("./XPure/XReaderT/index.js"));
var XState_1 = __toESM(require("./XPure/XState/index.js"));
var import_Function = require("./Function/index.js");
module.exports = __toCommonJS(esm_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Access,
  Any,
  Applicative,
  Apply,
  Array,
  Associative,
  AssociativeBoth,
  AssociativeCompose,
  AssociativeEither,
  AssociativeFlatten,
  Async,
  AtomicBoolean,
  AtomicNumber,
  AtomicReference,
  Boolean,
  Branded,
  BufferedPull,
  Category,
  Cause,
  ChainRec,
  Chunk,
  Clock,
  Closure,
  Commutative,
  CommutativeBoth,
  CommutativeEither,
  Compact,
  Compactable,
  Const,
  Contravariant,
  Covariant,
  CovariantWithIndex,
  DSL,
  Derive,
  DoublyLinkedList,
  Effect,
  Either,
  EitherT,
  Equal,
  Exit,
  Extend,
  Fail,
  Fiber,
  FiberRef,
  Filter,
  FilterMap,
  FilterMapWithIndex,
  FilterWithIndex,
  Filterable,
  FilterableWithIndex,
  FoldMap,
  FoldMapWithIndex,
  Foldable,
  FoldableWithIndex,
  ForEach,
  ForEachWithIndex,
  FreeAssociative,
  Function,
  HKT,
  Has,
  Hash,
  HashMap,
  HashSet,
  IO,
  Id,
  Identity,
  IdentityBoth,
  IdentityEither,
  IdentityFlatten,
  ImmutableQueue,
  IndexedT,
  Invariant,
  InvariantT,
  Inverse,
  Iterable,
  LinkedList,
  List,
  Managed,
  Map,
  Monad,
  MutableQueue,
  Newtype,
  NonEmptyArray,
  None,
  OneShot,
  Option,
  OptionT,
  Ord,
  Ordering,
  ParametricStateT,
  Partition,
  PartitionMap,
  PartitionMapWithIndex,
  PartitionWithIndex,
  PrettyCause,
  Promise,
  Provide,
  Pull,
  Push,
  Queue,
  Random,
  Reader,
  ReaderT,
  Record,
  RedBlackTree,
  Reduce,
  ReduceRight,
  ReduceRightWithIndex,
  ReduceWithIndex,
  Ref,
  RefM,
  RingBuffer,
  RoseTree,
  Run,
  Schedule,
  Scope,
  Selective,
  Semaphore,
  Separate,
  Set,
  Show,
  Sink,
  SortedSet,
  StateT,
  Stream,
  String,
  Supervisor,
  Sync,
  SyncLayer,
  Take,
  Transducer,
  Utils,
  Wiltable,
  WiltableWithIndex,
  Witherable,
  WitherableWithIndex,
  XIO,
  XPure,
  XReader,
  XReaderT,
  XState,
  pipe
});
