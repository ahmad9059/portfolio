var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var apply_exports = {};
__export(apply_exports, {
  apF: () => apF,
  structF: () => structF,
  tupleF: () => tupleF
});
var import_Function = require("../../Function/index.js");
function apF(F) {
  return (fa) => (fab) => F.map(({
    tuple: [a, f]
  }) => f(a))(F.both(fab)(fa));
}
function curried(f, n, acc) {
  return function(x) {
    const combined = acc.concat([x]);
    return n === 0 ? f.apply(null, combined) : curried(f, n - 1, combined);
  };
}
function getRecordConstructor(keys) {
  const len = keys.length;
  return curried((...args) => {
    const r = {};
    for (let i = 0; i < len; i++) {
      r[keys[i]] = args[i];
    }
    return r;
  }, len - 1, []);
}
function structF(F) {
  const ap = apF(F);
  return (r) => {
    const keys = Object.keys(r);
    const len = keys.length;
    const f = getRecordConstructor(keys);
    let fr = F.map(f)(r[keys[0]]);
    for (let i = 1; i < len; i++) {
      fr = ap(r[keys[i]])(fr);
    }
    return fr;
  };
}
const tupleConstructors = {};
function getTupleConstructor(len) {
  if (!tupleConstructors.hasOwnProperty(len)) {
    tupleConstructors[len] = curried(import_Function.tuple, len - 1, []);
  }
  return tupleConstructors[len];
}
function tupleF(F) {
  const ap = apF(F);
  return (...args) => {
    const len = args.length;
    const f = getTupleConstructor(len);
    let fas = F.map(f)(args[0]);
    for (let i = 1; i < len; i++) {
      fas = ap(args[i])(fas);
    }
    return fas;
  };
}
module.exports = __toCommonJS(apply_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  apF,
  structF,
  tupleF
});
