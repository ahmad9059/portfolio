var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var gen_exports = {};
__export(gen_exports, {
  GenHKT: () => GenHKT,
  GenLazyHKT: () => GenLazyHKT,
  genF: () => genF,
  genWithHistoryF: () => genWithHistoryF
});
var L = __toESM(require("@effect-ts/system/Collections/Immutable/List"));
var import_GlobalExceptions = require("@effect-ts/system/GlobalExceptions");
var import_Function = require("../../Function/index.js");
var import_chain = require("./chain.js");
var import_succeed = require("./succeed.js");
class GenHKT {
  constructor(effect) {
    this.effect = effect;
  }
  *[Symbol.iterator]() {
    return yield this;
  }
}
class GenLazyHKT {
  constructor(effect) {
    this.effect = effect;
  }
  *[Symbol.iterator]() {
    return yield this;
  }
}
const adapter = (_) => {
  return new GenHKT(_);
};
const adapterLazy = (_) => {
  return new GenHKT(_);
};
function genWithHistoryF(F, config) {
  const chain = (0, import_chain.chainF)(F);
  const succeed = (0, import_succeed.succeedF)(F);
  return (f) => {
    return chain(() => {
      function run(replayStack) {
        const iterator = f((config === null || config === void 0 ? void 0 : config.adapter) ? config.adapter : adapterLazy);
        let state = iterator.next();
        for (const a of replayStack) {
          if (state.done) {
            throw new import_GlobalExceptions.PrematureGeneratorExit();
          }
          state = iterator.next(a);
        }
        if (state.done) {
          return succeed(state.value);
        }
        return chain((val) => {
          return run(L.append_(replayStack, val));
        })(state.value["effect"]());
      }
      return run(L.empty());
    })(succeed({}));
  };
}
function genF(F, config) {
  const chain = (0, import_chain.chainF)(F);
  const succeed = (0, import_succeed.succeedF)(F);
  return (f) => {
    return chain(() => {
      const iterator = f((config === null || config === void 0 ? void 0 : config.adapter) ? config.adapter : adapter);
      const state = iterator.next();
      function run(state2) {
        if (state2.done) {
          return succeed(state2.value);
        }
        return chain((val) => {
          const next = iterator.next(val);
          return run(next);
        })(state2.value["effect"]);
      }
      return run(state);
    })(succeed({}));
  };
}
module.exports = __toCommonJS(gen_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GenHKT,
  GenLazyHKT,
  genF,
  genWithHistoryF
});
