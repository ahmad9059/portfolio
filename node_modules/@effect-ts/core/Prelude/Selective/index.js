var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
var Selective_exports = {};
__export(Selective_exports, {
  applicative: () => applicative,
  branchF: () => branchF,
  ifF: () => ifF,
  monad: () => monad,
  whenF: () => whenF
});
var E = __toESM(require("@effect-ts/system/Either"));
var import_Function = require("../../Function/index.js");
var HKT = __toESM(require("../../Prelude/HKT/index.js"));
var import_DSL = require("../DSL/index.js");
function monad(F) {
  return __spreadProps(__spreadValues({}, F), {
    select: (fab) => (fa) => (0, import_DSL.chainF)(F)(E.fold((a) => F.map((g) => g(a))(fab), (b) => (0, import_DSL.succeedF)(F)(b)))(fa)
  });
}
function applicative(F) {
  return __spreadProps(__spreadValues({}, F), {
    select: (fab) => (fa) => F.map(({
      tuple: [ea, f]
    }) => E.fold_(ea, f, import_Function.identity))(F.both(fab)(fa))
  });
}
function branchF(F) {
  return (lhs, rhs) => (x) => F.select(rhs)(F.select(F.map((fac) => (x2) => E.widenE()(E.right(fac(x2))))(lhs))(F.map(E.map(E.left))(x)));
}
function ifF(F) {
  return (then_, else_) => (x) => branchF(F)(F.map(import_Function.constant)(then_), F.map(import_Function.constant)(else_))(F.map((x2) => x2 ? E.left(void 0) : E.right(void 0))(x));
}
function whenF(F) {
  return (act) => ifF(F)(act, (0, import_DSL.succeedF)(F)(void 0));
}
module.exports = __toCommonJS(Selective_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  applicative,
  branchF,
  ifF,
  monad,
  whenF
});
