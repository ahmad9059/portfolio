"use strict";
// ets_tracing: off
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeProvider = exports.NodeProviderLayer = exports.makeNodeTracingProvider = exports.LiveNodeTracerProviderConfig = exports.NodeTracerProviderConfig = void 0;
const core_1 = require("@effect-ts/core");
const T = __importStar(require("@effect-ts/core/Effect"));
const L = __importStar(require("@effect-ts/core/Effect/Layer"));
const M = __importStar(require("@effect-ts/core/Effect/Managed"));
const Function_1 = require("@effect-ts/core/Function");
const Has_1 = require("@effect-ts/core/Has");
const O = __importStar(require("@effect-ts/core/Option"));
const OT = __importStar(require("@effect-ts/otel"));
const sdk_trace_node_1 = require("@opentelemetry/sdk-trace-node");
const NodeTracerProviderConfigSymbol = Symbol();
exports.NodeTracerProviderConfig = (0, Has_1.tag)(NodeTracerProviderConfigSymbol);
const LiveNodeTracerProviderConfig = (config) => L.fromValue(exports.NodeTracerProviderConfig)({ config });
exports.LiveNodeTracerProviderConfig = LiveNodeTracerProviderConfig;
exports.makeNodeTracingProvider = M.gen(function* (_) {
    const env = yield* _(T.environment());
    const config = (0, core_1.pipe)(exports.NodeTracerProviderConfig.readOption(env), O.map((_) => _.config), O.toUndefined);
    const tracerProvider = yield* _(T.succeedWith(() => new sdk_trace_node_1.NodeTracerProvider(config)));
    return (0, Function_1.identity)({
        [OT.TracerProviderSymbol]: OT.TracerProviderSymbol,
        tracerProvider
    });
});
exports.NodeProviderLayer = L.fromManaged(OT.TracerProvider)(exports.makeNodeTracingProvider);
const NodeProvider = (config) => config
    ? exports.NodeProviderLayer["<<<"]((0, exports.LiveNodeTracerProviderConfig)(config))
    : exports.NodeProviderLayer;
exports.NodeProvider = NodeProvider;
//# sourceMappingURL=index.js.map